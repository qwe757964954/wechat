{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/extend/MapEx.ts"],"names":["MapEx","keys","vals","set","key","val","index","indexOf","push","setToStartIndex","splice","unshift","forEach","callback","delete","Error","has","values","newVals","size","length","clear"],"mappings":";;;iBAgBaA,K;;;;;;;;;;;;;uBAAAA,K,GAAN,MAAMA,KAAN,CAAY;AAAA;AAAA,eAEVC,IAFU,GAEH,EAFG;AAAA,eAGVC,IAHU,GAGH,EAHG;AAAA;;AAKlB;AACD;AACA;AACA;AACA;AACCC,QAAAA,GAAG,CAACC,GAAD,EAAWC,GAAX,EAAqB;AACvB;AACA,cAAMC,KAAK,GAAG,KAAKL,IAAL,CAAUM,OAAV,CAAkBH,GAAlB,CAAd;;AACA,cAAIE,KAAK,IAAI,CAAb,EAAgB;AACf;AACA,iBAAKJ,IAAL,CAAUI,KAAV,IAAmBD,GAAnB;AACA,WAHD,MAGO;AACN;AACA,iBAAKJ,IAAL,CAAUO,IAAV,CAAeJ,GAAf;AACA,iBAAKF,IAAL,CAAUM,IAAV,CAAeH,GAAf;AACA;AACD;AACD;AACD;AACA;AACA;AACA;;;AACCI,QAAAA,eAAe,CAACL,GAAD,EAAWC,GAAX,EAAqB;AACnC;AACA,cAAMC,KAAK,GAAG,KAAKL,IAAL,CAAUM,OAAV,CAAkBH,GAAlB,CAAd;;AACA,cAAIE,KAAK,IAAI,CAAb,EAAgB;AACf;AACA,iBAAKL,IAAL,CAAUS,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACA,iBAAKJ,IAAL,CAAUQ,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACA,WAPkC,CAQnC;;;AACA,eAAKL,IAAL,CAAUU,OAAV,CAAkBP,GAAlB;AACA,eAAKF,IAAL,CAAUS,OAAV,CAAkBN,GAAlB;AACA;AAGD;AACD;AACA;AACA;;;AACCO,QAAAA,OAAO,CAACC,QAAD,EAAyB;AAC/B,eAAKZ,IAAL,CAAUW,OAAV,CAAkB,CAACR,GAAD,EAAME,KAAN,KAAgB;AACjCO,YAAAA,QAAQ,CAACT,GAAD,EAAM,KAAKF,IAAL,CAAUI,KAAV,CAAN,CAAR;AACA,WAFD;AAGA;AACD;AACD;AACA;AACA;;;AACCQ,QAAAA,MAAM,CAACV,GAAD,EAAoB;AACzB,cAAME,KAAK,GAAG,KAAKL,IAAL,CAAUM,OAAV,CAAkBH,GAAlB,CAAd;;AACA,cAAIE,KAAK,GAAG,CAAZ,EAAe;AACd;AACA,kBAAM,IAAIS,KAAJ,CAAU,uBAAV,CAAN;AACA,WAHD,MAGO;AACN;AACA,iBAAKd,IAAL,CAAUS,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACA,iBAAKJ,IAAL,CAAUQ,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACA,mBAAO,IAAP;AACA;AACD;AACD;AACD;AACA;AACA;;;AACCU,QAAAA,GAAG,CAACZ,GAAD,EAAgB;AAClB,cAAME,KAAK,GAAG,KAAKL,IAAL,CAAUM,OAAV,CAAkBH,GAAlB,CAAd;;AACA,cAAIE,KAAK,GAAG,CAAZ,EAAe;AACd;AACA,mBAAO,IAAP;AACA,WAHD,MAGO;AACN;AACA,mBAAO,KAAKJ,IAAL,CAAUI,KAAV,CAAP;AACA;AACD;AACD;AACD;AACA;AACA;;;AACCW,QAAAA,MAAM,GAAU;AACf,cAAIC,OAAO,GAAG,EAAd;AACA,eAAKhB,IAAL,CAAUU,OAAV,CAAkB,CAACR,GAAD,EAAME,KAAN,KAAgB;AACjCY,YAAAA,OAAO,CAACV,IAAR,CAAa,KAAKN,IAAL,CAAUI,KAAV,CAAb;AACA,WAFD;AAGA,iBAAOY,OAAP;AACA;AACD;AACD;AACA;;;AACS,YAAJC,IAAI,GAAG;AACV,iBAAO,KAAKlB,IAAL,CAAUmB,MAAjB;AACA;AAED;AACD;AACA;;;AACCC,QAAAA,KAAK,GAAG;AACP,eAAKpB,IAAL,GAAY,EAAZ;AACA,eAAKC,IAAL,GAAY,EAAZ;AACA;;AAxGiB,O","sourcesContent":["/**\n * Name = MapEx -->Map的扩展类\n * URL = db://assets/framework/extend/MapEx.ts\n * Time = Mon Apr 11 2022 16:51:27 GMT+0800 (中国标准时间)\n * Author = xueya\n *\n */\n\nexport interface Cb<K, V> {\n\t/**\n\t * 键值对的 key 和 val, 无返回\n\t */\n\t(key: K, val: V): void;\n}\n\n\nexport class MapEx {\n\t// 定义两个容器，来装对应的键集合或者值集合\n\tprivate keys = [];\n\tprivate vals = [];\n\n\t/**\n\t * 重新设置某个键对应的值，如果不存在，则添加\n\t * @param key \n\t * @param val \n\t */\n\tset(key: any, val: any) {\n\t\t// 判断键集合中是否存在，存在的话直接来改\n\t\tconst index = this.keys.indexOf(key);\n\t\tif (index >= 0) {\n\t\t\t// 存在直接修改\n\t\t\tthis.vals[index] = val;\n\t\t} else {\n\t\t\t// 不存在，直接添加\n\t\t\tthis.keys.push(key);\n\t\t\tthis.vals.push(val);\n\t\t}\n\t}\n\t/**\n\t * 向开始位置设置某个键对应的值，如果不存在，则添加,若存在则先删除再添加\n\t * @param key \n\t * @param val \n\t */\n\tsetToStartIndex(key: any, val: any) {\n\t\t// 判断键集合中是否存在，存在的话直接来改\n\t\tconst index = this.keys.indexOf(key);\n\t\tif (index >= 0) {\n\t\t\t// 存在先删除\n\t\t\tthis.keys.splice(index, 1);\n\t\t\tthis.vals.splice(index, 1);\n\t\t}\n\t\t//添加在开头\n\t\tthis.keys.unshift(key);\n\t\tthis.vals.unshift(val);\n\t}\n\n\n\t/**\n\t * 遍历键值对\n\t * @param callback \n\t */\n\tforEach(callback: Cb<any, any>) {\n\t\tthis.keys.forEach((key, index) => {\n\t\t\tcallback(key, this.vals[index]);\n\t\t})\n\t}\n\t/**\n\t * 通过指定的key 来删除val\n\t * @param key \n\t */\n\tdelete(key: any): Boolean {\n\t\tconst index = this.keys.indexOf(key);\n\t\tif (index < 0) {\n\t\t\t// 不存在，直接抛出错误，说该键不存在\n\t\t\tthrow new Error('this key is not exist');\n\t\t} else {\n\t\t\t// 存在，直接删除\n\t\t\tthis.keys.splice(index, 1);\n\t\t\tthis.vals.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t}\n\t/**\n\t * 判断某个键是否存在 存在则直接返回值\n\t * @param key \n\t */\n\thas(key: any): any {\n\t\tconst index = this.keys.indexOf(key);\n\t\tif (index < 0) {\n\t\t\t// 不存在\n\t\t\treturn null;\n\t\t} else {\n\t\t\t//存在\n\t\t\treturn this.vals[index]\n\t\t}\n\t}\n\t/**\n\t * 返回一个新的Array对象，包含了Array对象中每个元素的值 。\n\t * @returns \n\t */\n\tvalues(): any[] {\n\t\tlet newVals = []\n\t\tthis.vals.forEach((key, index) => {\n\t\t\tnewVals.push(this.vals[index])\n\t\t})\n\t\treturn newVals\n\t}\n\t/**\n\t * 得到键的数量\n\t */\n\tget size() {\n\t\treturn this.keys.length;\n\t}\n\n\t/**\n\t * 清除所有的键值对\n\t */\n\tclear() {\n\t\tthis.keys = [];\n\t\tthis.vals = [];\n\t}\n}\n\n"]}