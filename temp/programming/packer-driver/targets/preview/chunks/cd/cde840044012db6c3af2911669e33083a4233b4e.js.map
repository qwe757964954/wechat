{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/manager/SchedulerManager.ts"],"names":["_Scheduler","_SchedulerManager","director","constructor","_scheduler","_callback","_updateFunc","getScheduler","schedule","callback","interval","repeat","delay","enableForTarget","dt","isScheduled","scheduleOnce","unscheduleAll","unscheduleAllForTarget","GHandlerInterval","Map","GHandlerTimeOut","schedulerInterval","call","time","handler","i","index","setInterval","unscheduleInterval","set","Number","isNaN","get","undefined","clearInterval","delete","schedulerTimeout","setTimeout","SchedulerManager","unscheduleTimeout","clearTimeout","_index","instance","_instance","sc","unschedule","_handler","key","Object","prototype","hasOwnProperty","parseInt","forEach","value"],"mappings":"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","sourcesContent":["/**\n * Name = SchedulerManager\n * URL = db://assets/framework/manager/SchedulerManager.ts\n * Time = Thu Apr 07 2022 10:18:15 GMT+0800 (中国标准时间)\n * Author = xueya\n *\n */\n\nimport { director } from \"cc\";\n\n//定时器的实例\nclass _Scheduler {\n\t/** 定时器对象 */\n\tprivate _scheduler = null;\n\n\tprivate _callback = null;\n\n\tprivate _updateFunc = null;\n\t//实例化\n\tconstructor() {\n\t\tthis._scheduler = director.getScheduler()\n\t};\n\n\t/**\n\t * 开启定时器\n\t * @callback 回调函数\n\t * @interval 定时时间(单位: 秒) 若值为 0，那么回调函数每一帧都会被调用\n\t * @repeat 可以让定时器触发 repeat + 1 次\n\t * @delay 指定延迟时间，定时器会在延迟指定的时间之后开始计时，单位: 秒\n\t * return boolean 是否存在该定时器\n\t */\n\tschedule(callback: Function, interval?: number, repeat?: number, delay?: number): boolean {\n\t\tif (!interval) {\n\t\t\tinterval = 0\n\t\t}\n\t\tthis._scheduler.enableForTarget(this);\n\n\t\tthis._updateFunc = function (dt?: number) {\n\t\t\tthis._callback && this._callback(dt)\n\t\t}\n\n\t\tthis._scheduler.schedule(this._updateFunc, this, interval, repeat, delay)\n\n\t\tif (this._scheduler.isScheduled(this._updateFunc, this)) {\n\t\t\tthis._callback = callback\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\t/**\n\t * 开启一个只执行一次的定时器\n\t * @callback 回调函数\n\t * @interval 定时时间(单位: 秒) 若值为 0，那么回调函数每一帧都会被调用\n\t * @delay 指定延迟时间，定时器会在延迟指定的时间之后开始计时，单位: 秒\n\t * return boolean 是否存在该定时器\n\t */\n\tscheduleOnce(callback: Function, interval?: number, delay?: number): boolean {\n\t\tif (!interval) {\n\t\t\tinterval = 0\n\t\t}\n\t\tthis._scheduler.enableForTarget(this);\n\n\t\tthis._updateFunc = function (dt?: number) {\n\t\t\tthis._callback && this._callback(dt)\n\t\t\tthis.unscheduleAll()\n\t\t}\n\n\t\tthis._scheduler.schedule(this._updateFunc, this, interval, 0, delay)\n\n\t\tif (this._scheduler.isScheduled(this._updateFunc, this)) {\n\t\t\tthis._callback = callback\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\t/**\n\t * 停止计时器\n\t * @param callback 可空 停止后会调用该回调\n\t */\n\tunscheduleAll(callback?: Function) {\n\t\tif (this._scheduler) {\n\t\t\tthis._scheduler.unscheduleAllForTarget()\n\t\t}\n\t\tthis._callback = null;\n\n\t\tcallback && callback();\n\t};\n\t//是否存在定时器\n\tisScheduled() {\n\t\tif (this._callback) {\n\t\t\treturn this._scheduler.isScheduled(this._updateFunc, this)\n\t\t}\n\t\treturn false\n\t}\n\n}\n/** 全局定时常量保存 */\nconst GHandlerInterval = new Map();\nconst GHandlerTimeOut = new Map();\n\n//定时器的管理\nclass _SchedulerManager {\n\n\t/**\n\t * 开启定时刷新(后台不会关闭) --基于 setInterval\n\t * @callback 回调函数\n\t * @interval 时间间隔(单位:秒),若值为 0，那么回调函数每一帧都会被调用\n\t * @return number 定时器句柄\n\t */\n\tschedulerInterval(callback: Function, interval: number = 0, call?: Function): number {\n\t\tlet time = interval * 1000;\n\t\tlet handler = null;   //注意:此处可能不为number;\n\t\tlet i = _SchedulerManager.index;\n\n\t\tif (call) {\n\t\t\thandler = setInterval(function () {\n\t\t\t\tcallback.call(call, time, i);\n\t\t\t}, time);\n\t\t} else {\n\t\t\thandler = setInterval(function () {\n\t\t\t\tcallback(time, i);\n\t\t\t}, time);\n\t\t}\n\t\tthis.unscheduleInterval(i);\n\t\tGHandlerInterval.set(i, handler);\n\t\treturn i;\n\t}\n\n\t/**\n\t * 停止计时器 基于 setInterval\n\t * @param 定时器句柄\n\t */\n\tunscheduleInterval(index: any) {\n\t\tindex = Number(index);\n\t\tif (isNaN(index)) {\n\t\t\treturn;\n\t\t}\n\t\tif (GHandlerInterval.get(index) != null && GHandlerInterval.get(index) != undefined) {\n\t\t\tclearInterval(GHandlerInterval.get(index));\n\t\t\tGHandlerInterval.delete(index);\n\t\t}\n\t}\n\t/**\n\t * 开启一次延迟刷新(后台不会关闭) --基于 setTimeOut\n\t * @callback 回调函数\n\t * @interval 时间间隔(单位:秒),若值为 0，那么回调函数每一帧都会被调用\n\t * return number 定时器句柄\n\t */\n\tschedulerTimeout(callback: Function, interval: number = 0, call?: Function): number {\n\t\tlet time = interval * 1000;\n\t\tlet handler = null;  //注意:此处可能不为number;\n\t\tlet i = _SchedulerManager.index;\n\n\t\tif (call) {\n\t\t\thandler = setTimeout((dt: number) => {\n\t\t\t\tSchedulerManager.unscheduleTimeout(i);\n\t\t\t\tcallback.call(call, time, i);\n\t\t\t}, time);\n\t\t} else {\n\t\t\thandler = setTimeout((dt: number) => {\n\t\t\t\tSchedulerManager.unscheduleTimeout(i);\n\t\t\t\tcallback(time, i);\n\t\t\t}, time);\n\t\t}\n\t\tthis.unscheduleTimeout(i);\n\t\tGHandlerTimeOut.set(i, handler);\n\t\treturn i;\n\t}\n\n\t/**\n\t * 停止计时器 基于 setTimeout\n\t * @param 定时器句柄\n\t */\n\tunscheduleTimeout(index: any) {\n\t\tindex = Number(index);\n\t\tif (isNaN(index)) {\n\t\t\treturn;\n\t\t}\n\t\tif (GHandlerTimeOut.get(index) != null && GHandlerTimeOut.get(index) != undefined) {\n\t\t\tclearTimeout(GHandlerTimeOut.get(index));\n\t\t\tGHandlerTimeOut.delete(index);\n\t\t}\n\t}\n\n\n\t/** 所有定时器的句柄 {key = Object}*/\n\tprivate handler = {};\n\tprivate static _index = 0\n\t/** 类实例 */\n\tprivate static _instance = null;\n\t//获取一个新的index\n\tpublic static get index(): number {\n\t\tthis._index = this._index + 1\n\t\treturn this._index\n\t}\n\tpublic static get instance(): _SchedulerManager {\n\t\tif (!this._instance || this._instance == null) {\n\t\t\tthis._instance = new _SchedulerManager();\n\n\t\t}\n\t\treturn this._instance;\n\t}\n\n\t//实例化\n\tconstructor() {\n\t\tthis.handler = {}\n\t};\n\n\t/**\n\t * @callback 回调函数\n\t * @interval 时间间隔(单位:秒),若值为 0，那么回调函数每一帧都会被调用\n\t * @repeat 可以让定时器触发 repeat + 1 次\n\t * @delay 指定延迟时间，定时器会在延迟指定的时间之后开始计时，单位: 秒\n\t * return number 定时器句柄\n\t */\n\tschedule(callback: Function, interval?: number, repeat?: number, delay?: number): number {\n\t\tlet sc = new _Scheduler();\n\t\tsc.schedule(callback, interval, repeat, delay)\n\n\t\tlet i = _SchedulerManager.index\n\t\tthis.handler[i] = sc\n\t\treturn i\n\t}\n\t/**\n\t * @callback 回调函数\n\t * @interval 时间间隔(单位:秒),若值为 0，那么回调函数每一帧都会被调用\n\t * @delay 指定延迟时间，定时器会在延迟指定的时间之后开始计时，单位: 秒\n\t * return number 定时器句柄\n\t */\n\tscheduleOnce(callback: Function, interval?: number, delay?: number): number {\n\t\tlet sc = new _Scheduler();\n\t\tlet i = _SchedulerManager.index\n\n\t\tsc.scheduleOnce((dt?: number) => {\n\t\t\tcallback(dt)\n\t\t\tthis.unschedule(i)\n\t\t}, interval, delay)\n\n\t\tthis.handler[i] = sc\n\t\treturn i\n\t}\n\n\t/**\n\t * 停止计时器\n\t * @param 定时器句柄\n\t */\n\tunschedule(_handler: number) {\n\t\tif (_handler && this.handler[_handler]) {\n\t\t\tthis.handler[_handler].unscheduleAll()\n\t\t\tthis.handler[_handler] = null\n\t\t}\n\t}\n\t//释放\n\tunscheduleAll() {\n\t\tfor (let key in this.handler) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.handler, key)) {\n\t\t\t\tthis.unschedule(parseInt(key))\n\t\t\t}\n\t\t}\n\t\tGHandlerInterval.forEach((value, handler) => {\n\t\t\tSchedulerManager.unscheduleInterval(handler);\n\t\t})\n\t\tGHandlerTimeOut.forEach((value, handler) => {\n\t\t\tSchedulerManager.unscheduleTimeout(handler);\n\t\t})\n\n\t}\n\n\n}\n\nexport const SchedulerManager = _SchedulerManager.instance\n"]}