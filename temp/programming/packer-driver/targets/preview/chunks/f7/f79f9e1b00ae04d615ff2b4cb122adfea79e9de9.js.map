{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/proj/gnet/GSocket.ts"],"names":["GSocket","GCache","AppEvent","GConstants","GameTxt","EventManager","Logger","NetManager","Network","NetworkState","WebSocketTask","SchedulerManager","Utils","GCmdMapping","GlobalCMD","GlobalCMDHead","GlobalProtocol","GPBAdaptive","ReceivePHPDataQueve","ReceiveMaxDetail","instance","_instance","constructor","reqPhpSendDataQuene","netNode","socketIndex","PB","_globalProtocol","keepAliveHandler","keepAliveTimer","keepAliveTimeOuterHandler","keepAliveTimeOuterTimer","getInstance","addNetNode","globalProtocol","init","handler","onMessage","initCommonMapping","startConnect","url","options","autoReconnect","maxReConnectNum","optionsCallback","error","errorConnectedCallback","connected","connectedCallback","disconnect","disconnectCallback","connectouttime","connectOutTime","setNetNodeCallback","logNet","connect","closeConnect","param","setCallbackState","close","heartbeatOnLoading","isStart","stopKeepAlive","startHeart","stopHeart","setHeartTime","time","startKeepAlive","isFirst","sendKeepAliveCmd","schedulerInterval","dt","startKeepAliveTimeOuter","stopKeepAliveTimeOuter","schedulerTimeout","checkKeepAliveTimeOuter","unscheduleTimeout","sendMsg","PHP_KEEPALIVE","unscheduleInterval","info","dispatch","SYS_CLOSE_NETLOADING","NET_GOTO_START_LOGIN","endReconnerNumber","txt","netWorkTimeout","SYS_TOAST_TIP","content","connectOptions","event","state","OFFLINE","User","getLoginState","UserLoginState","LoginSuccess","netWorkError","LOGIN_GOTO_SHOW","SYS_SHOW_NETLOADING","netWorkReconnect","cmd","body","timeout","isConnected","_cmd","number_formatToHex","PHP_CMD_CONSTANT","pCmd","pPackageInfo","generatPacket","dump","isCompress","isCompressByHeadCmd","bodyPacket","getSendPacket","action","request","response","headCmd","SERVER_HEART_RESPONSE","data","seq","reqData","RESPONSE_PHP_REQUEST_NEW","push","RESPONSE_HALL_LOGIN_SUCCESS","eventID","getEventIDByHeadCmd","getEventIDByCmd","checkReceiveQueve","length","count","respData","shift","getActionByCmd","reqProtocol","force","requestUnique"],"mappings":"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","sourcesContent":["/**\n * Name = GSocket\n * URL = db://assets/proj/GSocket.ts\n * Time = Wed Apr 13 2022 18:43:26 GMT+0800 (中国标准时间)\n * Author = xueya\n * 全局gloablSocket\n */\n\nimport { GCache } from \"../../cache/GCache\";\nimport { AppEvent } from \"../../config/AppEvent\";\nimport { GConstants } from \"../../config/GameConstant\";\nimport { GameTxt } from \"../../config/GameTxt\";\nimport { EventManager } from \"../../framework/manager/EventManager\";\nimport { Logger } from \"../../framework/log/Logger\";\nimport { IRequestProtocol, IResponseProtocol } from \"../../framework/network/NetInterface\";\nimport { NetManager } from \"../../framework/network/NetManager\";\nimport { NetConnectOptions, NetNode } from \"../../framework/network/NetNode\";\nimport { Network, NetworkState } from \"../../framework/network/NetState\";\nimport { WebSocketTask } from \"../../framework/network/WebSocketTask\";\nimport { SchedulerManager } from \"../../framework/manager/SchedulerManager\";\nimport { Utils } from \"../../framework/Utils\";\nimport { GCmdMapping } from \"./GCmdMapping\";\nimport { GlobalCMD, GlobalCMDHead } from \"./GlobalCMD\";\nimport { GlobalProtocol } from \"./GlobalProtocol\";\nimport { GPBAdaptive } from \"./GPBAdaptive\";\n\n//接收到的php消息缓存队列\nconst ReceivePHPDataQueve: Array<IResponseProtocol> = []\n//每次处理的数量\nconst ReceiveMaxDetail = 3\n\nexport class GSocket {\n\n    private static _instance = null;\n    public static get instance(): GSocket {\n        if (!this._instance || this._instance == null) {\n            this._instance = new GSocket();\n        }\n        return this._instance;\n    }\n    //发送php数据的队列\n    private reqPhpSendDataQuene = [];\n    //socket实体\n    private netNode: NetNode | null = null;\n    private socketIndex: number | null = null;\n    //数据包装\n    private PB: GPBAdaptive = null;\n\n    private _globalProtocol = null;\n    //保活句柄\n    private keepAliveHandler = null\n    //保活发送间隔(秒)\n    private keepAliveTimer = 5 * 60;\n    //保活超时句柄\n    private keepAliveTimeOuterHandler = null;\n    //保活超时检测间隔(秒)\n    private keepAliveTimeOuterTimer = 6;\n\n    //最大重连次数\n    public static maxReConnectNum = 2;\n    //当前已重连\n    //实例化\n    constructor() {\n        [this.netNode, this.socketIndex] = NetManager.getInstance().addNetNode()\n        let globalProtocol = new GlobalProtocol()\n        if (this.netNode) {\n            this.netNode.init(new WebSocketTask(), globalProtocol, null, Utils.handler(this, this.onMessage));\n        }\n        this.PB = new GPBAdaptive()\n\n        this._globalProtocol = globalProtocol\n\n        //刷新cmd队列\n        GCmdMapping.initCommonMapping()\n    };\n    //开启连接\n    startConnect(url: string) {\n        if (!url) {\n            return\n        }\n        if (!this.netNode) {\n            [this.netNode, this.socketIndex] = NetManager.getInstance().addNetNode()\n            let globalProtocol = new GlobalProtocol()\n            this.netNode.init(new WebSocketTask(), globalProtocol, null, Utils.handler(this, this.onMessage));\n        }\n        //发送的数据结构\n        let options = {\n            url: url,\n            autoReconnect: GSocket.maxReConnectNum\n        }\n        //设置成功与错误的回调\n        let optionsCallback = {\n            error: Utils.handler(this, this.errorConnectedCallback),\n            connected: Utils.handler(this, this.connectedCallback),\n            disconnect: Utils.handler(this, this.disconnectCallback),\n            connectouttime: Utils.handler(this, this.connectOutTime)\n        }\n        NetManager.getInstance().setNetNodeCallback(this.socketIndex, optionsCallback)\n        //开启连接\n        Logger.logNet(\"GSocket 主动开启连接\")\n        NetManager.getInstance().connect(this.socketIndex, options)\n    }\n    //断开连接\n    closeConnect(param = null) {\n        Logger.logNet(`GSocket${param == null ? \"主动\" : \"被动\"} 断开连接 `)\n        if (this.netNode) {\n            this.netNode.setCallbackState(false)\n            this.netNode.close()\n            this.netNode = null\n            this.reqPhpSendDataQuene = []\n        }\n    }\n    //心跳加载\n    heartbeatOnLoading(isStart: boolean = false) {\n        this.stopKeepAlive()\n        if (this.netNode) {\n            if (isStart) {\n                Logger.logNet(\"GSocket 开启心跳\")\n                this.netNode.startHeart()\n            } else {\n                Logger.logNet(\"GSocket 关闭心跳\")\n                this.netNode.stopHeart()\n            }\n\n        }\n    }\n    /**\n     * 设置心跳间隔\n     * @param time 毫秒级别\n     */\n    setHeartTime(time: number = null) {\n        if (this.netNode) {\n            if (time == null) {\n                time = 10000 * 3 / 4\n            }\n            this.netNode.setHeartTime(time)\n        }\n    }\n    /**\n     * 开始保活命令\n     * @param isFirst 是否首次开启\n     * @returns \n     */\n    startKeepAlive(isFirst: boolean = false) {\n        if (this.keepAliveHandler) {\n            return\n        }\n        if (isFirst) {\n            GSocket.instance.sendKeepAliveCmd()\n        }\n        this.keepAliveHandler = SchedulerManager.schedulerInterval((dt: number) => {\n            GSocket.instance.sendKeepAliveCmd()\n        }, this.keepAliveTimer)\n        return\n    }\n    //开启保活超时\n    startKeepAliveTimeOuter() {\n        this.stopKeepAliveTimeOuter()\n        this.keepAliveTimeOuterHandler = SchedulerManager.schedulerTimeout((dt: number) => {\n            GSocket.instance.checkKeepAliveTimeOuter()\n        }, this.keepAliveTimeOuterTimer)\n    }\n    //停止保活超时检测\n    stopKeepAliveTimeOuter() {\n        if (this.keepAliveTimeOuterHandler) {\n            SchedulerManager.unscheduleTimeout(this.keepAliveTimeOuterHandler)\n        }\n        this.keepAliveTimeOuterHandler = null\n    }\n\n    //发送保活命令\n    sendKeepAliveCmd() {\n        this.sendMsg(GlobalCMD.PHP_KEEPALIVE, {})\n        this.startKeepAliveTimeOuter()\n    }\n    //检测保活超时\n    checkKeepAliveTimeOuter() {\n        this.sendKeepAliveCmd()\n        this.startKeepAlive()\n    }\n    //停止保活\n    stopKeepAlive() {\n        this.stopKeepAliveTimeOuter()\n        if (this.keepAliveHandler) {\n            SchedulerManager.unscheduleInterval(this.keepAliveHandler)\n        }\n        this.keepAliveHandler = null\n    }\n\n    //连接成功回调\n    connectedCallback(info: any) {\n        Logger.logNet(\"GSocket 连接成功开启保活会话,并开始登录\")\n        EventManager.dispatch(AppEvent.SYS_CLOSE_NETLOADING)\n        EventManager.dispatch(AppEvent.NET_GOTO_START_LOGIN)\n    }\n    //连接超时的回调\n    connectOutTime(endReconnerNumber: number) {\n        Logger.logNet(`GSocket连接超时：次数：${endReconnerNumber}`)\n        let txt = GameTxt.netWorkTimeout;\n        if (endReconnerNumber == GSocket.maxReConnectNum) {\n            txt = GameTxt.netWorkTimeout;\n        }\n        EventManager.dispatch(AppEvent.SYS_TOAST_TIP, { content: txt })\n    }\n    //连接错误回调（\n    errorConnectedCallback(connectOptions: NetConnectOptions, event: any, endReconnerNumber: number) {\n        Logger.logNet(`GSocket连接错误回调`)\n    }\n    //连接关闭的回调\n    disconnectCallback(endReconnerNumber: number) {\n        Logger.logNet(`连接失败 是否重连：${endReconnerNumber > 0} 剩余重连次数：${endReconnerNumber}`)\n        //先停止保活\n        GSocket.instance.stopKeepAlive()\n        if (endReconnerNumber <= 0 || Network.instance.state == NetworkState.OFFLINE || GCache.User.getLoginState() != GConstants.UserLoginState.LoginSuccess) {//非重连 或者 无网络 或者从来没有连接成功过\n            GSocket.instance.closeConnect(true);\n            EventManager.dispatch(AppEvent.SYS_TOAST_TIP, { content: GameTxt.netWorkError })\n            EventManager.dispatch(AppEvent.SYS_CLOSE_NETLOADING);\n            EventManager.dispatch(AppEvent.LOGIN_GOTO_SHOW, { state: \"reconnect_fail\" })\n\n        } else {\n            EventManager.dispatch(AppEvent.SYS_SHOW_NETLOADING);\n            EventManager.dispatch(AppEvent.SYS_TOAST_TIP, { content: GameTxt.netWorkReconnect });\n        }\n    }\n\n    /**发起一个请求 */\n    sendMsg(cmd: number, body: any, timeout?: number) {\n        if (!cmd) {\n            return\n        }\n        if (!this.isConnected()) {\n            return\n        }\n        let _cmd = cmd > 0 && Utils.number_formatToHex(cmd) || cmd\n        Logger.logNet(`CMD[10进制] = ${cmd} CMD[16进制] = ${_cmd}`)\n        if (cmd < GlobalCMDHead.PHP_CMD_CONSTANT) {\n            Logger.logNet(\"小于==>>>此为游戏请求\")\n            let [pCmd, pPackageInfo] = this.PB.generatPacket(cmd, body)\n\n            // Logger.logNet(\"发送的头：===>\" + pCmd)\n            Utils.dump(pPackageInfo)\n\n            let isCompress = this.PB.isCompressByHeadCmd(pCmd)\n            let bodyPacket = this.PB.getSendPacket(pCmd, pPackageInfo && pPackageInfo.action || null, null, pPackageInfo, isCompress, timeout)\n            if (bodyPacket) {\n                Utils.dump(bodyPacket);\n                this.request(bodyPacket);\n            }\n        } else {\n            Logger.logNet(\"大于==>>>此为PHP请求\")\n            let [pCmd, pPackageInfo] = this.PB.generatPacket(cmd, body)\n            if (pCmd) {\n                // Logger.logNet(\"发送的头：===>\" + pCmd)\n                // Utils.dump(pPackageInfo)\n\n                let isCompress = this.PB.isCompressByHeadCmd(pCmd)\n                let bodyPacket = this.PB.getSendPacket(pCmd, pPackageInfo && pPackageInfo.action || null, null, pPackageInfo, isCompress, timeout)\n                if (bodyPacket) {\n                    // Logger.logNet(\"输出===>\")\n                    // Utils.dump(bodyPacket)\n                    this.reqPhpSendDataQuene[pPackageInfo[\"seq\"]] = pPackageInfo\n\n                    this.request(bodyPacket)\n                }\n            } else {\n                Logger.logNet(`sendMbsg：包装数据有误 CMD[16进制] = ${_cmd}`)\n            }\n        }\n\n    }\n    //统一事件回调\n    onMessage(response: IResponseProtocol) {\n        if (response.headCmd == GlobalCMDHead.SERVER_HEART_RESPONSE) {\n            // Logger.logNet(\"[GSocket]:onMessage 心跳回包\")\n            return\n        }\n\n        Logger.logNet(`[GSocket]:onMessage 收到数据 CMD[10进制] = ${response.headCmd} CMD[16进制] = ${Utils.number_formatToHex(response.headCmd)}`)\n        // Utils.dump(response.data)\n        //寻找原请求数据\n        if (response?.data?.body?.seq != null) {\n            // Utils.dump(this.reqPhpSendDataQuene[response.data.body.seq])\n            response.reqData = this.reqPhpSendDataQuene[response.data.body.seq] || null\n            this.reqPhpSendDataQuene[response.data.body.seq] = null\n        }\n\n        //如果是命令RESPONSE_PHP_REQUEST_NEW 或者 RESPONSE_HALL_LOGIN_SUCCESS 返回的数据，则需要缓存\n        if (response.headCmd == GlobalCMDHead.RESPONSE_PHP_REQUEST_NEW) {\n            ReceivePHPDataQueve.push(response)\n        } else if (response.headCmd == GlobalCMDHead.RESPONSE_HALL_LOGIN_SUCCESS) {\n            ReceivePHPDataQueve.push(response)\n        } else {\n            //及时发送\n            //绑定的事件ID\n            let eventID = null;\n            /** 先从headCmd绑定事件中查找 找不到再在cmd绑定的事件中找*/\n            eventID = GCmdMapping.getEventIDByHeadCmd(response.headCmd)\n            if (!eventID) {\n                eventID = GCmdMapping.getEventIDByCmd(response.headCmd)\n            }\n            if (eventID) {\n                EventManager.dispatch(eventID, response.data, response.reqData)\n            } else {\n                Logger.logNet(`[GSocket]:onMessage 收到 HeadCmd[10进制] = ${response.headCmd} HeadCmd[16进制] = ${Utils.number_formatToHex(response.headCmd)} 的消息 但是没有找到对应的事件绑定`)\n            }\n        }\n\n    }\n    /** 每1ms检查一次接收队列，并处理其中的数据(每次处理3条) */\n    checkReceiveQueve() {\n        if (ReceivePHPDataQueve.length > 0) {\n            let count = 0\n            while (count < ReceiveMaxDetail && ReceivePHPDataQueve.length > 0) {\n                count++;\n                //绑定的事件ID\n                let eventID = null;\n                let respData: IResponseProtocol = ReceivePHPDataQueve.shift()\n                //计算Action\n                let action = null\n                if (respData.data && respData.data[\"cmd\"]) {\n                    action = GCmdMapping.getActionByCmd(respData.data[\"cmd\"])\n                }\n                respData.action = action\n\n                /** 先从headCmd绑定事件中查找 找不到再在cmd绑定的事件中找*/\n                eventID = GCmdMapping.getEventIDByHeadCmd(respData.headCmd)\n                if (!eventID) {\n                    eventID = GCmdMapping.getEventIDByCmd(respData.headCmd)\n                }\n                if (eventID) {\n                    EventManager.dispatch(eventID, respData.data, respData.reqData)\n                } else {\n                    Logger.logNet(`[GSocket]:onMessage 收到action = ${respData.action} 的消息 但是没有找到对应的事件绑定`)\n                }\n            }\n\n        }\n    }\n    /** 调用Node发送 */\n    // send(buf: NetData,force: boolean = false): number {\n    //     return NetManager.getInstance().send(this.socketIndex,buf,force)\n    // }\n\n    /** 发起请求，并在在结果返回时调用指定好的回调函数 */\n    request(reqProtocol: IRequestProtocol, force: boolean = false) {\n        NetManager.getInstance().request(this.socketIndex, reqProtocol, force)\n    }\n\n    /** 同request，但在request之前会先判断队列中是否已有rspCmd，如有重复的则直接返回 */\n    requestUnique(reqProtocol: IRequestProtocol, force: boolean = false): boolean {\n        return NetManager.getInstance().requestUnique(this.socketIndex, reqProtocol, force)\n    }\n\n    /** 获取连接状态 */\n    isConnected(): boolean {\n        if (this.netNode) {\n            return this.netNode.isConnected()\n        }\n        return false\n    }\n}\n\n"]}