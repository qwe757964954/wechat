{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/package/game/scripts/Players/PlayerOutCards.ts"],"names":["Vec3","_decorator","BaseComponent","MjSize","ccclass","property","PlayerOutCards","_mjList","onInitModuleEvent","onLoad","start","getOutCardPosInfo","index","height","Math","floor","column","row","posInfo","getOutCardPos","length","width","pushCard","tByte","pushCardToList","node","push","resetView","removeAllChildren"],"mappings":";;;;;;;;;;;;;;;;;;;;AACeA,MAAAA,I,OAAAA,I;AAAMC,MAAAA,U,OAAAA,U;;AACZC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,M,iBAAAA,M;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;gCAUaK,c,WADZF,OAAO,CAAC,gBAAD,C,gBAAR,MACaE,cADb;AAAA;AAAA,0CACkD;AAAA;AAAA;AAAA,eACjDC,OADiD,GAC/B,EAD+B;AAAA;;AAEjD;AACUC,QAAAA,iBAAiB,GAAG,CAE7B;;AAEDC,QAAAA,MAAM,GAAI,CAET;;AAGDC,QAAAA,KAAK,GAAI,CAER;;AACD;AACGC,QAAAA,iBAAiB,CAACC,KAAD,EACjB;AACI,cAAIC,MAAM,GAAIC,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAC,EAAjB,CAAd;AACAA,UAAAA,KAAK,GAAGA,KAAK,GAAGC,MAAM,GAAG,EAAzB;AACA,cAAIG,MAAM,GAAGJ,KAAK,GAAG,CAArB;AACA,cAAIK,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAC,CAAjB,CAAV;AAEA,cAAIM,OAAgB,GAAG;AACnBD,YAAAA,GAAG,EAAEA,GADc;AAEnBD,YAAAA,MAAM,EAAEA,MAFW;AAGnBH,YAAAA,MAAM,EAAEA;AAHW,WAAvB;AAKA,iBAAOK,OAAP;AACH,SA7B6C,CA8BjD;;;AACGC,QAAAA,aAAa,GACb;AACI,cAAID,OAAO,GAAG,KAAKP,iBAAL,CAAuB,KAAKJ,OAAL,CAAaa,MAApC,CAAd,CADJ,CAEF;;AACM,iBAAO,IAAIpB,IAAJ,CAAS;AAAA;AAAA,gCAAOqB,KAAP,GAAa,CAAb,GAAgBH,OAAO,CAACF,MAAR,GAAiB;AAAA;AAAA,gCAAOK,KAAjD,EAAwD;AAAA;AAAA,gCAAOD,MAAP,GAAc,CAAd,GAAkBF,OAAO,CAACL,MAAR,GAAiB;AAAA;AAAA,gCAAOO,MAAlG,EAA0G,CAA1G,CAAP;AACH,SApC6C,CAsCjD;;;AACGE,QAAAA,QAAQ,CAACC,KAAD,EACR,CACI;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACH;;AAEJC,QAAAA,cAAc,CAACC,IAAD,EACX;AACI,eAAKlB,OAAL,CAAamB,IAAb,CAAkBD,IAAlB;AACH,SAxD6C,CA0D9C;;;AACAE,QAAAA,SAAS,GAAG;AACR,eAAKF,IAAL,CAAUG,iBAAV;AACA,eAAKrB,OAAL,GAAe,EAAf,CAFQ,CAGR;AACH;;AA/D6C,O","sourcesContent":["\nimport { Node, Vec3, _decorator } from 'cc';\nimport { BaseComponent } from '../../../../framework/vc/BaseComponent';\nimport { MjSize } from './cardConfigs';\nconst { ccclass, property } = _decorator;\n\n/**\n * Name = OutCards\n * URL = db://assets/package/game/scripts/OutCards.ts\n * Time = Fri Aug 11 2023 11:08:55 GMT+0800 (中国标准时间)\n * Author = qwe757964\n *\n * Life: onLoad-->onInitModuleEvent-->onEnable->start->update->lateUpdate->onDisable->onDestroy\n * \n */\n \ninterface PosInfo {\n    row: number,\n    column: number,\n    height: number,\n}\n\n\n@ccclass('PlayerOutCards')\nexport class PlayerOutCards extends BaseComponent {\n\t_mjList: Node[] = [];\n\t/** override 初始化模块事件 */\n\tprotected onInitModuleEvent() {\n\n\t};\n\t\n\tonLoad () {\n\t\n\t};\n\n\n\tstart () {\n\n\t};\n\t//根据索引获取指定位置的牌的行列高信息\n    getOutCardPosInfo(index: number): PosInfo\n    {\n        let height =  Math.floor(index/12);\n        index = index - height * 12;\n        let column = index % 6;\n        let row = Math.floor(index/6);\n\n        let posInfo: PosInfo = {\n            row: row,\n            column: column,\n            height: height,\n        }\n        return posInfo\n    }\n\t//当前出牌区添加牌的位置\n    getOutCardPos(): Vec3\n    {\n        let posInfo = this.getOutCardPosInfo(this._mjList.length)\n\t\t// return new Vec3(MjSize.width/2 +posInfo.column * MjSize.width, MjSize.length/2 + posInfo.height * MjSize.length, MjSize.height/2 + MjSize.height * posInfo.row);\n        return new Vec3(MjSize.width/2 +posInfo.column * MjSize.width, MjSize.length/2 + posInfo.height * MjSize.length, 0);\n    }\n\n\t//往出牌区添加一张指定种类的牌\n    pushCard(tByte: number)\n    {\n        // let mjNode = instantiate(this._mjPrefab)\n        // mjNode.setPosition(this.getOutCardPos())\n\n        // mjNode.getChildByName(\"Cube\").getComponent(MeshRenderer).shadowCastingMode = 1;\n\n        // //根据value决定花色\n        // setSymbol(mjNode, tByte)\n\n        // this.node.addChild(mjNode)\n        // this._mjList.push(mjNode)\n    }\n\n\tpushCardToList(node: Node)\n    {\n        this._mjList.push(node);\n    }\n\n    //游戏开始或结束，清空出牌区，保持初始状态\n    resetView() {\n        this.node.removeAllChildren()\n        this._mjList = []\n        // this.initNodePos()\n    } \n}\n\n"]}