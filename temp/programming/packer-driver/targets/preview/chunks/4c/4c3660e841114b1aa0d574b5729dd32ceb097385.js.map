{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/extend/CountTime.ts"],"names":["CountTime","SchedulerManager","constructor","_handler","_startTime","_endTime","_time","_changeNum","_currowNum","_isDown","_isCanStart","_updateCall","_stopCall","_callParam","StartTime","time","Number","isNaN","EndTime","isDown","down","UpdateCallback","callF","StopCallback","CallbackParam","param","CurrowNum","isStart","Start","Stop","_initCurrowTime","Update","content","schedulerInterval","dt","unscheduleInterval"],"mappings":"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","sourcesContent":["import { SchedulerManager } from \"../manager/SchedulerManager\";\n\nexport class CountTime {\n    /** 当前计时句柄 */\n    private _handler: any = null;\n\n    /** 开始值 */\n    private _startTime: number = 0;\n    /** 最小值 */\n    private _endTime: number = 0;\n    /** 每次变化时间 */\n    private _time: number = 1;\n    /** 每次变化的基数 */\n    private _changeNum: number = 1;\n    /** 当前值 */\n    private _currowNum: number = null;\n    /** 是否倒计时 */\n    private _isDown: boolean = true;\n    /** 是否可以运行 */\n    private _isCanStart = false;\n\n    /** 更新的回调 */\n    private _updateCall: Function = null;\n    /** 停止的回调 */\n    private _stopCall: Function = null;\n    /** 回调时附加的参数 */\n    private _callParam = null;\n\n    constructor() {\n\n    }\n    /** 设置开始值 */\n    set StartTime(time: number) {\n        time = Number(time);\n        if (isNaN(time)) {\n            time = 0;\n        }\n        this._startTime = time;\n    }\n    /** 设置结束值 */\n    set EndTime(time: number) {\n        time = Number(time);\n        if (isNaN(time)) {\n            time = 0;\n        }\n        this._endTime = time;\n    }\n    /** 设置是否为倒计时 */\n    set isDown(down: boolean) {\n        this._isDown = down;\n    }\n    /** 设置更新的回调 */\n    set UpdateCallback(callF: Function) {\n        this._updateCall = callF;\n    }\n    /** 设置停止的回调 */\n    set StopCallback(callF: Function) {\n        this._stopCall = callF;\n    }\n    /** 设置回调时传递的附加参数 */\n    set CallbackParam(param: any) {\n        this._callParam = param;\n    }\n    /** 获取当前的值 */\n    get CurrowNum(): number {\n        return this._currowNum;\n    }\n    /** 开启状态 */\n    public isStart(): boolean {\n        return this._handler != null;\n    }\n    /** 开始计时 */\n    public Start() {\n        this.Stop();\n        this._initCurrowTime();\n        this._isCanStart = true;\n\n        this.Update();\n\n        if (this._isCanStart) {\n            const content = this;\n            this._handler = SchedulerManager.schedulerInterval((dt: number) => {\n                content.Update(dt);\n            }, this._time)\n        }\n    }\n    /** 停止计时 */\n    public Stop() {\n        if (this._handler) {\n            SchedulerManager.unscheduleInterval(this._handler);\n        }\n        this._handler = null;\n    }\n    /** 重置当前时间 */\n    private _initCurrowTime() {\n        if (this._isDown) {\n            this._currowNum = this._startTime + this._changeNum;\n        } else {\n            this._currowNum = this._startTime - this._changeNum;\n        }\n    }\n    /** 更新时间 */\n    protected Update(dt = null) {\n        if (this._isDown) {\n            this._currowNum = this._currowNum - this._changeNum;\n\n            //更新中\n            if (this._updateCall) {\n                this._updateCall(this._currowNum, this._callParam);\n            }\n            //停止了\n            if (this._currowNum <= this._endTime) {\n                this._isCanStart = false;\n                this.Stop();\n                if (this._stopCall) {\n                    this._stopCall(this._currowNum, this._callParam);\n                }\n            }\n        } else {\n            this._currowNum = this._currowNum + this._changeNum;\n            //更新中\n            if (this._updateCall) {\n                this._updateCall(this._currowNum, this._callParam);\n            }\n            //停止了\n            if (this._currowNum >= this._endTime) {\n                this._isCanStart = false;\n                this.Stop();\n                if (this._stopCall) {\n                    this._stopCall(this._currowNum, this._callParam);\n                }\n            }\n        }\n    }\n}"]}