{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/cache/ShareInfo.ts"],"names":["ShareInfo","AppEvent","GConstants","EventManager","Utils","BaseCache","constructor","superClass","__User","_shareConfVer","_shareConfig","_shareCount","timer","goodsgidArray","shareFriendsList","recodeShareStart","ShareConfig","clone","table_verify","updateConfig","shareCof","table_isEmpty","Object","keys","forEach","key","console","log","dispatch","NET_RESP_SHARE_CONFIG","getShareConfigByType","type","currentConfig","getShareCount","refreshShareCount","body","number_valueOf","getShareSwitch","getWinStreak","getAwardByNextCount","count","res","rewards","i","length","getAwardCount","isAwardNext","totalCount","getComTimes","notifyConfigUpdate","newVer","localVer","getShareConfVer","NET_REQ_SHARE_CONFIG","updateShareCountBySuccess","data","clearVer","shareSuccessTimeAdd","gid","_gidIndex","findIndex","item","splice","time","push","clearInterval","setInterval","index","getAfterSharetime","currentTime","find","workTime","effective","shareTimeAllowed","shareType","shopShareMsg","shareParams","title","imageUrl","coolDownTime","lastShareMSg","allowShareMsg","allowShare","nextSharetime","recodeShareFriendStart","checkCanShareToFriend","currowTime","shareSucConditions","shareUseTime","insertShareFriend","openID","string_isEmpty"],"mappings":";;;oFAcaA,S;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAdJC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;2BACaL,S,GAAN,MAAMA,SAAN;AAAA;AAAA,kCAAkC;AACrC;;AAIA;;AACA;;AAEA;;AAEA;;AAEA;;AAGA;;AAGA;AAGA;AACAM,QAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,gBAAM,WAAN;AADoB,eApBhBC,MAoBgB,GApBD,IAoBC;AAAA,eAlBhBC,aAkBgB,GAlBQ,IAkBR;AAAA,eAfhBC,YAegB,GAfD,EAeC;AAAA,eAbhBC,WAagB,GAbM,CAaN;AAAA,eAXhBC,KAWgB,GAXR,IAWQ;AAAA,eAThBC,aASgB,GATY,EASZ;AAAA,eANhBC,gBAMgB,GANG,EAMH;AAAA,eAHhBC,gBAGgB,GAHG,CAGH;AAEpB,eAAKP,MAAL,GAAcD,UAAd;AACH;;AACD;AACe,YAAXS,WAAW,GAAG;AACd,iBAAO;AAAA;AAAA,8BAAMC,KAAN,CAAY;AAAA;AAAA,8BAAMC,YAAN,CAAmB,KAAKR,YAAxB,CAAZ,CAAP;AACH;AACD;;;AACAS,QAAAA,YAAY,CAACC,QAAD,EAAW;AACnB,cAAI;AAAA;AAAA,8BAAMC,aAAN,CAAoBD,QAApB,CAAJ,EAAmC;AAC/B;AACH;;AACDE,UAAAA,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,OAAtB,CAA8BC,GAAG,IAAI;AACjC,iBAAKf,YAAL,CAAkBe,GAAlB,IAAyBL,QAAQ,CAACK,GAAD,CAAjC;AACH,WAFD;AAGAC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBP,QAAxB;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKjB,YAA5B,EARmB,CASnB;;AACA;AAAA;AAAA,4CAAakB,QAAb,CAAsB;AAAA;AAAA,oCAASC,qBAA/B,EAAsD,IAAtD,EAA4D,KAAKnB,YAAjE;AACH;AACD;;;AACAoB,QAAAA,oBAAoB,CAACC,IAAD,EAAO;AACvB,cAAIC,aAAa,GAAG,EAApB;AACAV,UAAAA,MAAM,CAACC,IAAP,CAAY,KAAKb,YAAjB,EAA+Bc,OAA/B,CAAuCC,GAAG,IAAI;AAC1C,gBAAIM,IAAI,IAAIN,GAAZ,EAAiB;AACbO,cAAAA,aAAa,GAAG,KAAKtB,YAAL,CAAkBqB,IAAlB,CAAhB;AACH;AACJ,WAJD;AAKA,iBAAOC,aAAP;AACH;AACD;;;AACAC,QAAAA,aAAa,GAAW;AACpB,iBAAO,KAAKtB,WAAZ;AACH;AACD;;;AACAuB,QAAAA,iBAAiB,CAACC,IAAD,EAAO;AACpB,cAAI;AAAA;AAAA,8BAAMd,aAAN,CAAoBc,IAApB,CAAJ,EAA+B;AAC3B;AACH;;AACD,eAAKxB,WAAL,GAAmB;AAAA;AAAA,8BAAMyB,cAAN,CAAqBD,IAAI,CAAC,SAAD,CAAzB,IAAwC,CAA3D;AACH;AACD;;;AACAE,QAAAA,cAAc,GAAY;AACtB,iBAAO,KAAK3B,YAAL,CAAkB,QAAlB,KAA+B,KAAtC;AACH;AACD;;;AACA4B,QAAAA,YAAY,GAAW;AACnB,iBAAO;AAAA;AAAA,8BAAMF,cAAN,CAAqB,KAAK1B,YAAL,CAAkB,YAAlB,CAArB,EAAsD,CAAtD,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AACI6B,QAAAA,mBAAmB,GAAW;AAC1B,cAAIC,KAAK,GAAG,KAAKP,aAAL,EAAZ;AACAO,UAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACA,cAAIC,GAAG,GAAG,EAAV;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,cAAIC,OAAO,GAAG;AAAA;AAAA,8BAAMxB,YAAN,CAAmB,KAAKR,YAAL,CAAkB,SAAlB,CAAnB,EAAiD,IAAjD,CAAd;;AACA,eAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,gBAAID,OAAO,CAACC,CAAD,CAAP,CAAW,KAAX,KAAqBH,KAAzB,EAAgC;AAC5BC,cAAAA,GAAG,GAAGC,OAAO,CAACC,CAAD,CAAb;AACA;AACH;;AAAA;AAEJ;;AACD,iBAAOF,GAAP;AACH;AACD;;;AACAI,QAAAA,aAAa,GAAW;AACpB,cAAIH,OAAO,GAAG;AAAA;AAAA,8BAAMxB,YAAN,CAAmB,KAAKR,YAAL,CAAkB,SAAlB,CAAnB,EAAiD,IAAjD,CAAd;AACA,iBAAOgC,OAAO,CAACE,MAAf;AACH;AACD;;;AACAE,QAAAA,WAAW,GAAY;AACnB,cAAIN,KAAK,GAAG,KAAKP,aAAL,EAAZ;AACAO,UAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACA,cAAIO,UAAU,GAAG,KAAKF,aAAL,EAAjB;AACA,iBAAQL,KAAK,GAAGO,UAAT,GAAuB,KAAvB,GAA+B,IAAtC;AACH;AACD;;;AACAC,QAAAA,WAAW,GAAW;AAClB,iBAAO;AAAA;AAAA,8BAAMZ,cAAN,CAAqB,KAAK1B,YAAL,CAAkB,WAAlB,CAArB,EAAqD,CAArD,CAAP;AACH;AACD;;;AACAuC,QAAAA,kBAAkB,CAACd,IAAD,EAAO;AACrB,cAAIA,IAAJ,EAAU;AACN,gBAAIe,MAAM,GAAG;AAAA;AAAA,gCAAMd,cAAN,CAAqBD,IAAI,CAAC,KAAD,CAAzB,EAAkC,CAAC,CAAnC,CAAb;AACA,gBAAIgB,QAAQ,GAAG,KAAKC,eAAL,EAAf;;AACA,gBAAIF,MAAM,GAAGC,QAAb,EAAuB;AACnB;AACA;AAAA;AAAA,gDAAavB,QAAb,CAAsB;AAAA;AAAA,wCAASyB,oBAA/B;AACH;AACJ;AACJ;AACD;;;AACAC,QAAAA,yBAAyB,CAACC,IAAD,EAAO;AAC5B;AACA,cAAI;AAAA;AAAA,8BAAMlC,aAAN,CAAoBkC,IAApB,KAA6B,KAAjC,EAAwC;AACpC,iBAAK5C,WAAL,GAAmB,KAAKA,WAAL,GAAmB,CAAtC,CADoC,CAEpC;AACA;AACH;AACJ;AAED;;;AACAyC,QAAAA,eAAe,GAAkB;AAC7B,iBAAO;AAAA;AAAA,8BAAMhB,cAAN,CAAqB,KAAK3B,aAA1B,CAAP;AACH;AACD;;;AACA+C,QAAAA,QAAQ,GAAS;AACb,eAAK/C,aAAL,GAAqB,IAArB;AACH;AACD;;;AACAgD,QAAAA,mBAAmB,CAACC,GAAD,EAAM;AACrB;AACA,cAAIC,SAAS,GAAG,KAAK9C,aAAL,CAAmB+C,SAAnB,CAA6BC,IAAI,IAAI;AAAE,mBAAOA,IAAI,CAAC,KAAD,CAAJ,IAAeH,GAAtB;AAA2B,WAAlE,CAAhB;;AACA,cAAIC,SAAS,GAAG,CAAC,CAAjB,EAAoB;AAChB,iBAAK9C,aAAL,CAAmBiD,MAAnB,CAA0BH,SAA1B,EAAqC,CAArC,EAAwC;AAAED,cAAAA,GAAG,EAAEA,GAAP;AAAYK,cAAAA,IAAI,EAAE;AAAlB,aAAxC;AACH,WAFD,MAEO;AACH,iBAAKlD,aAAL,CAAmBmD,IAAnB,CAAwB;AAAEN,cAAAA,GAAG,EAAEA,GAAP;AAAYK,cAAAA,IAAI,EAAE;AAAlB,aAAxB;AACH,WAPoB,CAQrB;;;AACAE,UAAAA,aAAa,CAAC,KAAKrD,KAAN,CAAb;AACA,eAAKA,KAAL,GAAasD,WAAW,CAAC,MAAM;AAC3B,gBAAI,KAAKrD,aAAL,CAAmB+B,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,mBAAK/B,aAAL,CAAmBW,OAAnB,CAA2B,CAACqC,IAAD,EAAOM,KAAP,KAAiB;AACxCN,gBAAAA,IAAI,CAAC,MAAD,CAAJ;AACH,eAFD;AAGH;AACJ,WANuB,EAMrB,IANqB,CAAxB;AAOH;AACD;;;AACAO,QAAAA,iBAAiB,CAACV,GAAD,EAAM;AACnB,cAAIW,WAAW,GAAG,KAAKxD,aAAL,CAAmByD,IAAnB,CAAwBT,IAAI,IAAI;AAAE,mBAAOA,IAAI,CAAC,KAAD,CAAJ,IAAeH,GAAtB;AAA2B,WAA7D,CAAlB;AACA,iBAAOW,WAAW,GAAG;AAAEE,YAAAA,QAAQ,EAAEF,WAAW,CAAC,MAAD,CAAvB;AAAiCG,YAAAA,SAAS,EAAE;AAA5C,WAAH,GAAwD;AAAED,YAAAA,QAAQ,EAAE,CAAZ;AAAeC,YAAAA,SAAS,EAAE;AAA1B,WAA1E;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,QAAAA,gBAAgB,CAACf,GAAD,EAAMgB,SAAN,EAAiB;AAC7B,cAAIC,YAAY,GAAG,KAAK7C,oBAAL,CAA0B4C,SAA1B,CAAnB;AACA,cAAIE,WAAgD,GAAG;AACnDC,YAAAA,KAAK,EAAEF,YAAY,CAAC,CAAD,CAAZ,CAAgB,OAAhB,CAD4C;AAClB;AACjCG,YAAAA,QAAQ,EAAEH,YAAY,CAAC,CAAD,CAAZ,CAAgB,KAAhB;AAFyC,WAAvD;AAIA,cAAII,YAAY,GAAGJ,YAAY,CAAC,CAAD,CAAZ,CAAgB,gBAAhB,IAAoCA,YAAY,CAAC,CAAD,CAAZ,CAAgB,gBAAhB,IAAoC,EAAxE,GAA6E,CAAhG,CAN6B,CAO7B;;AACA,cAAIK,YAAY,GAAG,KAAKZ,iBAAL,CAAuBV,GAAvB,CAAnB;AACA,cAAIuB,aAAa,GAAG;AAChBvB,YAAAA,GAAG,EAAEA,GADW;AAEhBwB,YAAAA,UAAU,EAAE,IAFI;AAEE;AAClBC,YAAAA,aAAa,EAAE,CAHC;AAIhBP,YAAAA,WAAW,EAAEA;AAJG,WAApB,CAT6B,CAe7B;;AACA,cAAII,YAAY,CAAC,UAAD,CAAZ,IAA4BD,YAA5B,IAA4C,CAACC,YAAY,CAAC,WAAD,CAA7D,EAA4E;AACxEC,YAAAA,aAAa,CAACC,UAAd,GAA2B,IAA3B;AACAD,YAAAA,aAAa,CAACE,aAAd,GAA8B,CAA9B,CAFwE,CAExC;;AAChCF,YAAAA,aAAa,CAACvB,GAAd,GAAoBA,GAApB;AACH,WAJD,CAKA;AALA,eAMK;AACDuB,YAAAA,aAAa,CAACC,UAAd,GAA2B,KAA3B;AACAD,YAAAA,aAAa,CAACvB,GAAd,GAAoBA,GAApB;AACAuB,YAAAA,aAAa,CAACE,aAAd,GAA8BJ,YAAY,GAAGC,YAAY,CAAC,UAAD,CAAzD,CAHC,CAGqE;AAEzE;;AACD,iBAAOC,aAAP;AACH;AACD;AACJ;AACA;;;AACIG,QAAAA,sBAAsB,GAAG;AACrB,eAAKrE,gBAAL,GAAwB;AAAA;AAAA,8BAAMgD,IAAN,EAAxB;AACH;AACD;AACJ;AACA;;;AACIsB,QAAAA,qBAAqB,GAAY;AAC7B,cAAIC,UAAU,GAAG;AAAA;AAAA,8BAAMvB,IAAN,EAAjB;AACA,iBAAQuB,UAAU,GAAG,KAAKvE,gBAAnB,IAAwC;AAAA;AAAA,wCAAWwE,kBAAX,CAA8BC,YAA7E;AACH;AACD;;;AACAC,QAAAA,iBAAiB,CAACC,MAAD,EAAS;AACtB,cAAI;AAAA;AAAA,8BAAMC,cAAN,CAAqBD,MAArB,KAAgC,KAApC,EAA2C;AACvC,iBAAK5E,gBAAL,CAAsBkD,IAAtB,CAA2B0B,MAA3B;AACH;AACJ;;AA3NoC,O","sourcesContent":["import { AppEvent } from \"../config/AppEvent\";\nimport { GConstants } from \"../config/GameConstant\";\nimport { EventManager } from \"../framework/manager/EventManager\";\nimport { Utils } from \"../framework/Utils\";\nimport { BaseCache } from \"../framework/vc/BaseCache\";\nimport { __InterFace_WXSdk_OnShareAppMessage } from \"../platform/weixin/WXSdkDefines\";\nimport { User } from \"./User\";\n/**\n * Name = ShareInfo\n * URL = db://assets/cache/ShareInfo.ts\n * Time = Mon May 09 2022 14:43:04 GMT+0800 (中国标准时间)\n * Author = xueya\n * 商城缓存\n */\nexport class ShareInfo extends BaseCache {\n    /** 用户类 */\n    private __User: User = null;\n\n    private _shareConfVer: number = null;\n    /** 分享配置 */\n    /** 枚举key与服务端返回一致 */\n    private _shareConfig = {};\n    /** 下一次的分享次数 */\n    private _shareCount: number = 0;\n    /** 分享之后开始计时的定时器 */\n    private timer = null\n    /** 储存Goods.gid用于对比 */\n    private goodsgidArray: Array<any> = [];\n\n    /** 已经分享的好友openid */\n    private shareFriendsList = [];\n\n    /** 记录分享开始的时间 */\n    private recodeShareStart = 0;\n\n    //实例化\n    constructor(superClass) {\n        super(\"ShareInfo\");\n        this.__User = superClass;\n    };\n    /** 获取分享配置 */\n    get ShareConfig() {\n        return Utils.clone(Utils.table_verify(this._shareConfig));\n    }\n    /** 更新分享配置 */\n    updateConfig(shareCof) {\n        if (Utils.table_isEmpty(shareCof)) {\n            return;\n        }\n        Object.keys(shareCof).forEach(key => {\n            this._shareConfig[key] = shareCof[key]\n        })\n        console.log('拉取到的分享配置', shareCof)\n        console.log('缓存的分享配置', this._shareConfig)\n        //通知：分享配置有更新\n        EventManager.dispatch(AppEvent.NET_RESP_SHARE_CONFIG, true, this._shareConfig);\n    }\n    /** 根据分享的key获得当前的分享配置 */\n    getShareConfigByType(type) {\n        let currentConfig = {}\n        Object.keys(this._shareConfig).forEach(key => {\n            if (type == key) {\n                currentConfig = this._shareConfig[type]\n            }\n        })\n        return currentConfig\n    }\n    /** 拿到分享次数 */\n    getShareCount(): number {\n        return this._shareCount;\n    }\n    /** 更新同步分享次数 */\n    refreshShareCount(body) {\n        if (Utils.table_isEmpty(body)) {\n            return;\n        }\n        this._shareCount = Utils.number_valueOf(body[\"cur_cnt\"]) + 1;\n    }\n    /** 取分享开关 */\n    getShareSwitch(): boolean {\n        return this._shareConfig[\"switch\"] || false;\n    }\n    /** 取触发分享连胜局数 */\n    getWinStreak(): number {\n        return Utils.number_valueOf(this._shareConfig[\"win_streak\"], 1);\n    }\n\n    /** \n     * 下一次分享是否有奖励\n     * @returns Object 或 {}\n     */\n    getAwardByNextCount(): Object {\n        let count = this.getShareCount();\n        count = count + 1;\n        let res = {};\n        /**\n         * idx: 1\n         * item_cnt: 2000\n         * item_id: 9\n         * item_type: 0\n         */\n        let rewards = Utils.table_verify(this._shareConfig[\"rewards\"], true);\n        for (let i = 0; i < rewards.length; i++) {\n            if (rewards[i][\"idx\"] == count) {\n                res = rewards[i];\n                break;\n            };\n\n        }\n        return res;\n    }\n    /** 获取一共有多少次奖励 */\n    getAwardCount(): number {\n        let rewards = Utils.table_verify(this._shareConfig[\"rewards\"], true);\n        return rewards.length;\n    }\n    /** 下一次分享是否有奖励 */\n    isAwardNext(): boolean {\n        let count = this.getShareCount();\n        count = count + 1;\n        let totalCount = this.getAwardCount();\n        return (count > totalCount) ? false : true;\n    }\n    /** 获取触发分享结算倍数 */\n    getComTimes(): number {\n        return Utils.number_valueOf(this._shareConfig[\"com_times\"], 1);\n    }\n    /** 分享配置推送更新,重新拉取 */\n    notifyConfigUpdate(body) {\n        if (body) {\n            let newVer = Utils.number_valueOf(body[\"ver\"], -1);\n            let localVer = this.getShareConfVer();\n            if (newVer > localVer) {\n                //请求分享配置\n                EventManager.dispatch(AppEvent.NET_REQ_SHARE_CONFIG);\n            }\n        }\n    }\n    /** 分享成功更新分享成功次数 */\n    updateShareCountBySuccess(data) {\n        //只有当奖励不为空的时候，才去更新分享次数\n        if (Utils.table_isEmpty(data) == false) {\n            this._shareCount = this._shareCount + 1;\n            //分享成功之后，无气泡不需要展示分享次数\n            // EventManager.dispatch(AppEvent.NOTIFY_SHARE_AWARD_REFRESH);\n        }\n    }\n\n    /** 获取分享更新配置的版本 */\n    getShareConfVer(): number | null {\n        return Utils.number_valueOf(this._shareConfVer);\n    }\n    /** 清理版本信息 */\n    clearVer(): void {\n        this._shareConfVer = null;\n    }\n    /**商城分享成功之后开始读秒 */\n    shareSuccessTimeAdd(gid) {\n        //判断是否是之前点击过的商品\n        let _gidIndex = this.goodsgidArray.findIndex(item => { return item['gid'] == gid })\n        if (_gidIndex > -1) {\n            this.goodsgidArray.splice(_gidIndex, 1, { gid: gid, time: 0 })\n        } else {\n            this.goodsgidArray.push({ gid: gid, time: 0 })\n        }\n        //清空上次的定时器\n        clearInterval(this.timer)\n        this.timer = setInterval(() => {\n            if (this.goodsgidArray.length > 0) {\n                this.goodsgidArray.forEach((item, index) => {\n                    item['time']++\n                })\n            }\n        }, 1000)\n    }\n    /** 获取距离上次分享成功的时间  */\n    getAfterSharetime(gid) {\n        let currentTime = this.goodsgidArray.find(item => { return item['gid'] == gid })\n        return currentTime ? { workTime: currentTime['time'], effective: true } : { workTime: 0, effective: false }\n    }\n    /**\n     * 计算当前分享是否在允许时间范围\n     * gid :比对分享时间\n     * shareType获得当前分享类型的参数\n     */\n    shareTimeAllowed(gid, shareType) {\n        let shopShareMsg = this.getShareConfigByType(shareType)\n        let shareParams: __InterFace_WXSdk_OnShareAppMessage = {\n            title: shopShareMsg[0]['title'], //转发标题，不传则默认使用当前小游戏的昵称\n            imageUrl: shopShareMsg[0]['img'],\n        }\n        let coolDownTime = shopShareMsg[0]['cool_down_type'] ? shopShareMsg[0]['cool_down_time'] * 60 : 0\n        //当前物品 距离上次分享的时间\n        let lastShareMSg = this.getAfterSharetime(gid)\n        let allowShareMsg = {\n            gid: gid,\n            allowShare: true, //默认允许分享\n            nextSharetime: 0,\n            shareParams: shareParams,\n        }\n        //允许分享：1，找到了当前定时器时间大于冷却时间 或者此时没找到,2，第一次分享找不到\n        if (lastShareMSg['workTime'] >= coolDownTime || !lastShareMSg['effective']) {\n            allowShareMsg.allowShare = true\n            allowShareMsg.nextSharetime = 0 //允许\n            allowShareMsg.gid = gid\n        }\n        //不允许分享\n        else {\n            allowShareMsg.allowShare = false\n            allowShareMsg.gid = gid\n            allowShareMsg.nextSharetime = coolDownTime - lastShareMSg['workTime'] //允许\n\n        }\n        return allowShareMsg\n    }\n    /**\n     *  计算当前分享时间范围\n    */\n    recodeShareFriendStart() {\n        this.recodeShareStart = Utils.time();\n    }\n    /**\n     * 校验是否可以分享到好友\n     */\n    checkCanShareToFriend(): boolean {\n        let currowTime = Utils.time();\n        return (currowTime - this.recodeShareStart) >= GConstants.shareSucConditions.shareUseTime;\n    }\n    /** 记录已经分享的好友 */\n    insertShareFriend(openID) {\n        if (Utils.string_isEmpty(openID) == false) {\n            this.shareFriendsList.push(openID);\n        }\n    }\n\n}"]}