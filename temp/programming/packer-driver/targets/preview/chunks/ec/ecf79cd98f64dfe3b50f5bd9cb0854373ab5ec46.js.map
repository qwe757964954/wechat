{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/layer/LayerDialog.ts"],"names":["LayerDialog","Color","inf_ViewParams","LayerPopUp","queue","onRemoved","node","viewParams","setTimeout","valid","removeByUuid","uuid","next","reloadMaskSprite","add","config","params","callbacks","isClickSpanceClose","isAutoRecover","isValid","bundle","prefabPath","prefab","getSoleID","noticeToRoot","onWillAdd","onAdded","onBeforeRemove","push","current","onCallbackChildRemove","length","updateMaskState","_maskNode","activeInHierarchy","children","active","insertChild","_buttonCompent","enabled","black","shift","load","remove","isDestroy","removeAll","addHistoryRecode","newQueue","countNum","index","toDestoryNotNotify","clear"],"mappings":"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","sourcesContent":["/**\n * UI基础层，允许添加多个预制件节点\n * Name = LayerDialog\n * URL = db://assets/framework/layer/LayerDialog.ts\n * Time = Thu Apr 14 2022 12:01:05 GMT+0800 (中国标准时间)\n * Author = xueya\n * Dialog 弹窗\n * */\n\nimport { Color, Node } from \"cc\";\nimport { inf_UICallbacks, inf_UIConfig, inf_ViewParams } from \"../InterfaceDefines\";\nimport { LayerPopUp } from \"./LayerPopup\";\n\n/*\n * Dialog 层\n * 该层的节点将一次只显示一个，删除以后会自动从队列当中取一个弹窗，直到队列为空\n */\nexport class LayerDialog extends LayerPopUp {\n    private queue: Array<inf_ViewParams> = [];\n    private current!: inf_ViewParams;\n\n    /** 重新加载maskNode蒙版(子节点) */\n    protected reloadMaskSprite() {\n        super.reloadMaskSprite(new Color(0, 0, 0, 0));\n    }\n    /**\n     * 添加一个预制件节点到层容器中，该方法将返回一个唯一`uuid`来标识该操作节点 \n     * @param config.prefab 预制件路径 config.bundle 分包包名 默认resources\n     * @param config.prefab 预制件路径\n     * @param param 传递的参数\n     * @param callbacks 回调函数 UICallbacks定义\n     * @param isClickSpanceClose 是否点击自动关闭 默认 false 不关闭\n     * @param isAutoRecover 是否自动释放加载的资源 默认false不释放\n     */\n    add(config: inf_UIConfig, params?: any, callbacks?: inf_UICallbacks, isClickSpanceClose?: boolean, isAutoRecover?: boolean): string {\n        if (this.isValid == false) {\n            return\n        }\n\n        let bundle = config.bundle || \"resources\";\n        let prefabPath = config.prefab;\n        let uuid = this.getSoleID(prefabPath);  //注意 此uuid为添加的历史证明\n\n        let viewParams = new inf_ViewParams();\n        viewParams.uuid = uuid;\n        viewParams.bundle = bundle\n        viewParams.prefabPath = prefabPath;\n        viewParams.params = params || {};\n        viewParams.callbacks = callbacks || {};\n        viewParams.noticeToRoot = {\n            onWillAdd: this.onWillAdd,\n            onAdded: this.onAdded,\n            onBeforeRemove: this.onBeforeRemove,\n            onRemoved: this.onRemoved\n        }\n        viewParams.isAutoRecover = isAutoRecover || false;\n        viewParams.isClickSpanceClose = isClickSpanceClose || false;\n\n        this.queue.push(viewParams);\n        if (this.current == null) {\n            this.next();\n        }\n        return uuid;\n    }\n    /** 有子节点被移除 */\n    protected onCallbackChildRemove(node: Node) {\n        if (this.queue.length > 0) {\n            return;\n        }\n        this.updateMaskState();\n    }\n    /** 更新遮罩层点击状态 */\n    protected updateMaskState() {\n        if (this.isValid == false || !this._maskNode) {\n            return;\n        }\n        if (this.activeInHierarchy == false) {\n            return;\n        }\n        if (this.children.length > 1) {\n            this.active = true;\n            this.insertChild(this._maskNode, (this.children.length - 1 - 1))\n            this._maskNode.active = true;\n            this._buttonCompent.enabled = true;\n        } else {\n            if (this.queue.length > 0) {\n                return;\n            }\n            this._maskNode.active = false;\n        }\n        this.black.enabled = this._maskNode.active;\n    }\n\n\n    /** UI层的回调 UICallbacks类型 */\n    protected onRemoved = (node: Node | null, viewParams: inf_ViewParams) => {\n        setTimeout(() => {\n            viewParams.valid = false;\n            this.removeByUuid(viewParams.uuid, true);\n            this.next();\n        }, 0);\n    }\n    //接着下一个\n    private next() {\n        if (this.isValid == false) {\n            return;\n        }\n        if (this.queue.length > 0) {\n            this.black.enabled = true;\n            this.current = this.queue.shift()!;\n            this.load(this.current);\n        } else {\n            this.current = null;\n            this.black.enabled = false;\n        }\n    }\n    //根据预制体路径移除 队列中未显示的node记录默认不会移除\n    remove(prefabPath: string, isDestroy: boolean): void {\n        super.remove(prefabPath, isDestroy)\n    }\n    //根据预制体路径移除所有 包括队列中未显示的\n    removeAll(prefabPath: string, isDestroy: boolean): void {\n        this.addHistoryRecode[prefabPath] = null\n        let newQueue: Array<inf_ViewParams> = []\n        let countNum = this.queue.length\n        for (let index = 0; index < countNum; index++) {\n            let viewParams = this.queue[index];\n            if (viewParams && viewParams.prefabPath != prefabPath) {\n                newQueue.push(viewParams)\n            }\n        }\n        this.queue = newQueue;\n        this.current = null;\n        this.remove(prefabPath, isDestroy)\n    }\n    /**\n     * 执行销毁,不发送通知\n     */\n    toDestoryNotNotify() {\n        super.toDestoryNotNotify();\n        if (this.isValid == false) {\n            return\n        }\n        this.queue = [];\n        this.current = null;\n    }\n\n    clear(isDestroy: boolean) {\n        this.queue = [];\n        this.current = null;\n        super.clear(isDestroy)\n    }\n\n}"]}