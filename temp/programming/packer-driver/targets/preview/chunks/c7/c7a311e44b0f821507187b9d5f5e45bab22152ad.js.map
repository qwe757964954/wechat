{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/proj/gprotobuf/BaseProtobuf.ts"],"names":["BaseProtobuf","error","sys","pbkiller","Logger","Utils","constructor","name","_className","_PBConf","_PBBuilder","print","args","logModel","console","dump","arg1","args2","platform","Platform","DESKTOP_BROWSER","table","onInitModuleEvent","reloadPB","pbConf","loadFromFile","FilePath","PackageName","reloadFinish","encodeBody","pData","funcName","undefined","copyData","delEmptyBody","newBody","encode","toArrayBuffer","decodeBody","bufferData","decodeStrFunc","pbData","resData","decode","byteLength","err","loopDecodeBody","obj","self","Object","keys","forEach","key","value","body","loopCount","_body","toRawDefault"],"mappings":"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","sourcesContent":["/**\n * Name = BaseProtobuf\n * URL = db://assets/proj/BaseProtobuf.ts\n * Time = Tue Sep 06 2022 10:47:29 GMT+0800 (中国标准时间)\n * Author = xueya\n * pb数据的基类\n */\n\nimport { error, sys } from \"cc\";\nimport { pbkiller } from \"../../framework/crypto/pbkiller\";\nimport { inf_PBConf } from \"../../framework/InterfaceDefines\";\nimport { Logger } from \"../../framework/log/Logger\";\nimport { Utils } from \"../../framework/Utils\";\n\n\nexport class BaseProtobuf {\n\n    _className: string = \"BaseProtobuf\";\n    /** 当前PB的配置  */\n    _PBConf: inf_PBConf = null;\n\n    /** 当前PB类加载 */\n    _PBBuilder: any = null;   //Builder\n\n    constructor(name?: string) {\n        this._className = name;\n        Logger.logModel(5, `${this._className}初始化...`)\n    };\n\n    protected onInitModuleEvent() {\n\n    }\n    /** 重新加载PB */\n    public reloadPB(pbConf: inf_PBConf) {\n        if (!pbConf) {\n            return;\n        }\n        Logger.logModel(5, `${this._className} reloadPB 加载PB...`)\n\n        this._PBConf = pbConf;\n\n        this._PBBuilder = pbkiller.loadFromFile(pbConf.FilePath, pbConf.PackageName);\n\n        this.reloadFinish();\n    }\n    /** 加载完成要干的事情 */\n    protected reloadFinish() {\n\n    }\n    /**\n     * 发送：包装要发送的数据\n     * @param pData 待序列化的数据\n     * @param funcName proto中的方法名\n     * @returns 返回字节数组 ArrayBuffer | null\n     */\n\n    public encodeBody(pData: object, funcName: string = null): ArrayBuffer | null {\n        if (!this._PBBuilder) {\n            this.error(`包装数据失败，PB未加载`)\n            return null;\n        }\n        if (this._PBBuilder[funcName] == null || this._PBBuilder[funcName] == undefined) {\n            this.error(`包装数据失败，协议函数名称：${funcName} 找不到`)\n            return null;\n        };\n        // Logger.logModel(5,`encodeBody 原始数据:`, pData);\n\n        let copyData = this.delEmptyBody(pData);\n\n        // Logger.logModel(5,`encodeBody 原始数据 去除空后:`, copyData);\n\n        let newBody = this._PBBuilder[funcName].encode(copyData, null, true);  //返回的私有属性 MessagePrototype\n\n        // let bufferData = newBody.toArrayBuffer();\n        // Logger.logModel(5,`encodeBody 编码后:`, newBody);\n        // Logger.logModel(5,`encodeBody 编码后:toArrayBuffer==>`, bufferData);\n\n        // let decodeBody = this._PBBuilder[funcName].decode(bufferData);\n        // Logger.logModel(5,`encodeBody 尝试对包装数据解码:==========>`, decodeBody)\n        // let resData = this.loopDecodeBody(decodeBody, funcName);\n        // Logger.logModel(5,`encodeBody 尝试对包装数据解码:明文==========>`, resData)\n\n        return newBody.toArrayBuffer();\n    }\n\n    /**\n     * 接收：解析收到的数据 \n     * @param bufferData ByteBuffer字节数组 或者string\n     * @param funcName proto中的方法名\n     * @param funcName bufferData为string时使用的解析函数(decode64、decodeJSON、decodeHex、decodeDelimited)\n     * @returns object 对象\n     */\n    public decodeBody(bufferData: any, funcName: string = null, decodeStrFunc = \"decode64\"): object | null {\n        if (!this._PBBuilder) {\n            this.error(\"解析数据失败，PB未加载\")\n            return;\n        }\n        if (this._PBBuilder[funcName] == null || this._PBBuilder[funcName] == undefined) {\n            this.error(`解析数据失败，协议函数名称：${funcName} 找不到`)\n            return;\n        }\n\n        if (!bufferData) {\n            Logger.logModel(5, \"这是一个空包:\", funcName, bufferData)\n            return;\n        }\n\n        let pbData = null;\n        let resData = null;\n\n        if (typeof (bufferData) == 'string') {\n            if (!this._PBBuilder[funcName][decodeStrFunc]) {\n                Logger.logModel(5, \"解析字符串类型时出错 解析函数不存在:\", decodeStrFunc, funcName, bufferData)\n                return;\n            }\n            pbData = this._PBBuilder[funcName][decodeStrFunc](bufferData);\n        } else {\n            try {\n                pbData = this._PBBuilder[funcName].decode(bufferData, bufferData.byteLength);\n            } catch (err) {\n                pbData = null;\n                Logger.logModel(5, \"解析ByteBuffer类型时出错\", funcName, bufferData);\n                error(err);\n            }\n        }\n\n        if (pbData) {\n            // Logger.logModel(5,`decodeBody 反序列化（前） funcName = ${funcName} `, pbData,)\n            // console.log(\"转换之后:\", pbData.toRaw());\n            resData = this.loopDecodeBody(pbData, funcName);\n        }\n        // Logger.logModel(5,`decodeBody 反序列化（后） funcName = ${funcName} `, resData, typeof (resData));\n        return resData;\n    }\n\n    /** 去除空数据 */\n    protected delEmptyBody(obj) {\n        if (obj == null) {\n            return null;\n        }\n        if (typeof (obj) != \"object\") {\n            return obj;\n        }\n        let self = this;\n        Object.keys(obj).forEach((key) => {\n            let value = obj[key];\n            if (value != null) {\n                if (typeof (value) == 'object') {\n                    self.delEmptyBody(value);\n                }\n            } else {\n                delete obj[key];\n            }\n        });\n        return obj;\n    };\n\n    /**\n     * orrvide 数据解析 循环迭代器\n     * @param body 待解析的数据\n     * @param funcName 函数名\n     * @param loopCount 循环迭代的深度\n     * @returns body 已处理好的数据\n     */\n    protected loopDecodeBody(body, funcName: string = null, loopCount: number = 0) {\n        loopCount = loopCount + 1;\n        let _body = null;\n        if (body != null && typeof (body) == \"object\") {\n            //默认状态下:将所有 byte 转换成 string\n            let newBody = body.toRawDefault(true, true);\n            _body = newBody;\n        } else {\n            _body = body;\n        }\n        return _body;\n    }\n\n\n    //当前类日志输出\n    protected print = function (...args: any[]) {\n        Logger.logModel(6, `【${this._className}】`, ...args)\n    }\n    //当前类错误日志输出\n    public error = function (...args: any[]) {\n        console.error(`【${this._className}】`, ...args)\n    }\n\n    //当前类日志输出\n    public dump = function (arg1, args2 = null) {\n        if (!args2) {\n            args2 = \"打印输出 :\"\n        }\n        Logger.logModel(5, args2)\n        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {\n            console.table(arg1);\n        } else {\n            Utils.dump(arg1);\n        }\n    }\n\n}"]}