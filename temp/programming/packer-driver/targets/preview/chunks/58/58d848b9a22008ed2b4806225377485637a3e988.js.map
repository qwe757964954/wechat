{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/package/game/cache/RoomMgr.ts"],"names":["RoomMgr","GCache","BaseCache","constructor","name","roomCfg","bankSeatId","dices","mySeatId","totalCardCount","timerInfoList","laiziInfo","rollDice","remainCardsCount","fangangCards","selectFanGangCards","timePass","observers","getInstance","instance","addObserver","observer","push","removeObserver","index","indexOf","splice","notifyObservers","updateCardsCount","getRoomInfoData","GameID","gameData","SelectGame","getServerGameLevelTabListByGameID","roomInfo","forEach","gameInfo","dataArr","data","key","hasOwnProperty","info","level","mySelfIsBanker","getTimeOut","state","timeOut","timeInfo","timerId","timeout","updateRoomInfo","resp","fanGangPai","updateRemainCardsCount","remainCardCount","count","clear"],"mappings":"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","sourcesContent":["import { GCache } from \"../../../cache/GCache\";\nimport { BaseCache } from \"../../../framework/vc/BaseCache\";\nimport { GameStatus } from \"../common/FXJConfig\";\nimport { Common } from \"../common/idl/Common\";\nimport { Game } from \"../common/idl/Game\";\nimport { Observer } from \"./PlayerMgr\";\nexport class RoomMgr extends BaseCache {\n    // public roomInfo?: Common.IRoomInfo = null;\n    public roomCfg?:Common.IRoomCfg = null;\n    public bankSeatId: number = null;\n    public dices: number[]  = null;\n    public mySeatId: number = null;\n    public totalCardCount?: number = null;\n    public timerInfoList?: Common.ITimerInfo[] = null;\n    public laiziInfo?: Game.IFixLaizi = null;\n    public rollDice?: Game.IRollDice = null;\n    public remainCardsCount?: number = 0;\n    public fangangCards: number[] = null;\n    public selectFanGangCards: number = null;\n    public timePass?: number = 0;\n    private static instance: RoomMgr | null = null;\n    \n    private observers: Observer[] = [];\n\n\n\n    constructor(name = \"\") {\n\t\tsuper(name);\n\t};\n    public static getInstance(): RoomMgr {\n        if (!RoomMgr.instance) {\n            RoomMgr.instance = new RoomMgr();\n        }\n        return RoomMgr.instance;\n    }\n    //更新房间信息list数据\n    public addObserver(observer: Observer): void {\n        this.observers.push(observer);\n    }\n    \n    public removeObserver(observer: Observer): void {\n        const index = this.observers.indexOf(observer);\n        if (index !== -1) {\n            this.observers.splice(index, 1);\n        }\n    }\n    \n    public notifyObservers(): void {\n        for (const observer of this.observers) {\n            observer.updateCardsCount();\n        }\n    }\n    \n    getRoomInfoData(GameID?: number){\n        let gameData = GCache.SelectGame.getServerGameLevelTabListByGameID(GameID);\n        let roomInfo = {}\n        gameData.forEach(gameInfo => {\n            let dataArr = gameInfo.data;\n            for (const key in dataArr) {\n                if (dataArr.hasOwnProperty(key)) {\n                    const info = dataArr[key];\n                    if(info.level === this.roomCfg.level){\n                        roomInfo = info;\n                    }\n                }\n            }\n        });\n        return roomInfo;\n    }\n\n    public mySelfIsBanker():boolean{\n        return this.bankSeatId === this.mySeatId;\n    }\n\n    public getTimeOut(state:GameStatus):number{\n        let timeOut:number = 0;\n        this.timerInfoList.forEach(timeInfo => {\n            if(timeInfo.timerId == state){\n                timeOut = timeInfo.timeout;\n            }\n        });\n        return timeOut\n    }\n\n    public updateRoomInfo(resp:Game.IUserLoginRoom | Game.IUserReconnect){\n        this.roomCfg = resp.roomInfo.roomCfg;\n        this.bankSeatId = resp.roomInfo.gameInfo.bankSeatId;\n        this.dices = resp.roomInfo.gameInfo.dices;\n        this.fangangCards = resp.roomInfo.gameInfo.fanGangPai;\n        this.mySeatId = resp.roomInfo.gameInfo.mySeatId;\n        this.updateRemainCardsCount(resp.roomInfo.gameInfo.remainCardCount);\n        this.timerInfoList = resp.roomInfo.gameInfo.timerInfoList;\n        this.totalCardCount = resp.roomInfo.gameInfo.totalCardCount;\n    }\n\n    public updateRemainCardsCount(count?:number){\n        this.remainCardsCount = count;\n        this.notifyObservers();\n    } \n\n    //清理房间数据\n\tpublic clear(): void {\n\t\t// this.roomInfo = null;\n\t}\n}"]}