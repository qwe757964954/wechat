{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/loader/ResLoader.ts"],"names":["ResLoader","Asset","assetManager","error","js","resources","GameConfig","Utils","setMaxRetryCount","num","downloader","maxRetryCount","setRetryInterval","retryInterval","setMaxConcurrency","maxConcurrency","setMaxRequestsPerFrame","maxRequestsPerFrame","loadResourcePromise","url","callFunc","Promise","resolve","reject","loadBundle","err","bundle","callback","v","version","parseLoadResArgs","paths","type","onProgress","onComplete","pathsOut","typeOut","onProgressOut","onCompleteOut","undefined","isValidType","isChildClassOf","loadByBundleAndArgs","args","dir","loadDir","load","loadByArgs","bundles","has","get","preloadByBundleAndArgs","preloadDir","preload","preloadByArgs","bundleName","Array","loadRemote","options","string_isHttp","instance","isOnlineServer","String","replace","release","path","getBundle","releaseList","pathList","length","index","releaseDir","infos","getDirWithPath","map","info","asset","assets","uuid","releaseAsset","removeBundle","dump","forEach","value","key","console","log","count","resLoader"],"mappings":"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","sourcesContent":["/**\n * 资源加载管理\n */\nimport { Asset, AssetManager, assetManager, Constructor, error, js, resources, __private } from \"cc\";\nimport { GameConfig } from \"../../config/GameConfig\";\nimport { Utils } from \"../Utils\";\n\n// 资源加载的处理回调\nexport type ProgressCallback = __private._cocos_core_asset_manager_shared__ProgressCallback;\n// 资源加载的完成回调\nexport type CompleteCallback<T = any> = __private._cocos_core_asset_manager_shared__CompleteCallbackWithData;\n\nexport type IRemoteOptions = __private._cocos_core_asset_manager_shared__IRemoteOptions;\nexport type AssetType<T = Asset> = Constructor<T>;\n\n// load方法的参数结构\ninterface ILoadResArgs<T extends Asset> {\n    bundle?: string;            /**包名 可空 */\n    dir?: string;               /**目录 可空 */\n    paths: string | string[];   /**路径 */\n    type: AssetType<T> | null;  /** 加载资源类型 */\n    onProgress: ProgressCallback | null; /**处理回调 */\n    onComplete: CompleteCallback<T> | null; /** 完成回调 */\n}\n\nclass ResLoader {\n    /**\n     * 设置重试下载的最大次数，默认 3 次。若不需要重试下载，可设置为 0，则下载失败时会立即返回错误\n     * @param num 默认3\n     */\n    public setMaxRetryCount(num: number) {\n        if (num == null) {\n            return;\n        }\n        assetManager.downloader.maxRetryCount = num;\n    }\n    /**\n     * 设置重试下载的间隔时间，默认 2000 ms。若设置为 4000 ms，则下载失败时会先等待 4000 ms，然后再重新下载。\n     * @param num 默认3\n     */\n    public setRetryInterval(num: number) {\n        if (num == null) {\n            return;\n        }\n        assetManager.downloader.retryInterval = num;\n    }\n\n\n    /**\n     * 设置下载的最大并发连接数，若当前连接数超过限制，将会进入等待队列。\n     * @param num 默认10\n     */\n    public setMaxConcurrency(num: number) {\n        if (num == null) {\n            return;\n        }\n        assetManager.downloader.maxConcurrency = num;\n    }\n    /**\n     * 设置每帧发起的最大请求数，从而均摊发起请求的 CPU 开销，避免单帧过于卡顿。如果此帧发起的连接数已经达到上限，将延迟到下一帧发起请求。\n     * @param num 默认6\n     */\n    public setMaxRequestsPerFrame(num: number) {\n        if (num == null) {\n            return;\n        }\n        assetManager.downloader.maxRequestsPerFrame = num;\n    }\n\n\n    public loadResourcePromise(url: string, callFunc?: Function) {\n        return new Promise<AssetManager.Bundle>((resolve, reject) => {\n            assetManager.loadBundle(url, (err, bundle: AssetManager.Bundle) => {\n                if (err) {\n                    return error(err);\n                }\n                resolve(bundle);\n            });\n        });\n    }\n\n    /**\n     * 加载资源包\n     * @param url       资源地址\n     * @param complete  完成事件\n     * @param v         资源MD5版本号\n     */\n    public loadBundle(url: string, callback: Function = null, v?: string) {\n\n        return new Promise<AssetManager.Bundle>((resolve, reject) => {\n            assetManager.loadBundle(url, { version: v }, (err, bundle: AssetManager.Bundle) => {\n                if (err) {\n                    if (callback) {\n                        callback(err, bundle);\n                    }\n                    return error(err);\n                }\n                resolve(bundle);\n                if (callback) {\n                    callback(err, bundle);\n                }\n            });\n        });\n    }\n    /**解析加载参数 */\n    public parseLoadResArgs<T extends Asset>(\n        paths: string | string[],\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onProgress?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onComplete?: ProgressCallback | CompleteCallback | null\n    ) {\n        let pathsOut: any = paths;\n        let typeOut: any = type;\n        let onProgressOut: any = onProgress;\n        let onCompleteOut: any = onComplete;\n        if (onComplete === undefined) {\n            const isValidType = js.isChildClassOf(type as AssetType, Asset);\n            if (onProgress) {\n                onCompleteOut = onProgress as CompleteCallback;\n                if (isValidType) {\n                    onProgressOut = null;\n                }\n            }\n            else if (onProgress === undefined && !isValidType) {\n                onCompleteOut = type as CompleteCallback;\n                onProgressOut = null;\n                typeOut = null;\n            }\n            if (onProgress !== undefined && !isValidType) {\n                onProgressOut = type as ProgressCallback;\n                typeOut = null;\n            }\n        }\n        return { paths: pathsOut, type: typeOut, onProgress: onProgressOut, onComplete: onCompleteOut };\n    }\n\n    private loadByBundleAndArgs<T extends Asset>(bundle: AssetManager.Bundle, args: ILoadResArgs<T>): void {\n        if (args.dir) {\n            bundle.loadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\n        }\n        else {\n            if (typeof args.paths == 'string') {\n                bundle.load(args.paths, args.type, args.onProgress, args.onComplete);\n            }\n            else {\n                bundle.load(args.paths, args.type, args.onProgress, args.onComplete);\n            }\n        }\n    }\n\n    private loadByArgs<T extends Asset>(args: ILoadResArgs<T>) {\n        if (args.bundle) {\n            if (assetManager.bundles.has(args.bundle)) {\n                let bundle = assetManager.bundles.get(args.bundle);\n                this.loadByBundleAndArgs(bundle!, args);\n            }\n            else {\n                // 自动加载bundle\n                assetManager.loadBundle(args.bundle, (err, bundle) => {\n                    if (!err) {\n                        this.loadByBundleAndArgs(bundle, args);\n                    }\n                })\n            }\n        }\n        else {\n            this.loadByBundleAndArgs(resources, args);\n        }\n    }\n    private preloadByBundleAndArgs<T extends Asset>(bundle: AssetManager.Bundle, args: ILoadResArgs<T>): void {\n        if (args.dir) {\n            bundle.preloadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\n        }\n        else {\n            if (typeof args.paths == 'string') {\n                bundle.preload(args.paths, args.type, args.onProgress, args.onComplete);\n            }\n            else {\n                bundle.preload(args.paths, args.type, args.onProgress, args.onComplete);\n            }\n        }\n    }\n\n    private preloadByArgs<T extends Asset>(args: ILoadResArgs<T>) {\n        if (args.bundle) {\n            if (assetManager.bundles.has(args.bundle)) {\n                let bundle = assetManager.bundles.get(args.bundle);\n                this.loadByBundleAndArgs(bundle!, args);\n            }\n            else {\n                // 自动加载bundle\n                assetManager.loadBundle(args.bundle, (err, bundle) => {\n                    if (!err) {\n                        this.loadByBundleAndArgs(bundle, args);\n                    }\n                })\n            }\n        }\n        else {\n            this.loadByBundleAndArgs(resources, args);\n        }\n    }\n\n    /**\n     * 预加载资源\n     * @param bundleName        assetbundle的路径（image/bg）\n     * @param paths             资源paths或paths数组 相对包的相对路径\n     * @param type 资源类型，默认为null\n     * @param onProgress 加载进度回调\n     * @param onComplete 加载完成回调\n     */\n    public preload<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(bundleName: string, paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(bundleName: string, paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public preload<T extends Asset>(\n        bundleName: string,\n        paths?: string | string[] | AssetType<T> | ProgressCallback | CompleteCallback | null,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onProgress?: ProgressCallback | CompleteCallback | null,\n        onComplete?: CompleteCallback | null,\n    ) {\n        let args: ILoadResArgs<T> | null = null;\n        if (typeof paths === \"string\" || paths instanceof Array) {\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        }\n        else {\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\n        }\n        this.preloadByArgs(args);\n    }\n    /**\n     * 开始加载资源\n     * @param bundleName        assetbundle的路径（image/bg）\n     * @param paths             资源paths或paths数组 相对包的相对路径\n     * @param type              资源类型，默认为null\n     * @param onProgess         加载进度回调\n     * @param onComplete        加载完成回调\n     */\n    public load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(\n        bundleName: string,\n        paths?: string | string[] | AssetType<T> | ProgressCallback | CompleteCallback | null,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onProgress?: ProgressCallback | CompleteCallback | null,\n        onComplete?: CompleteCallback | null,\n    ) {\n        let args: ILoadResArgs<T> | null = null;\n        if (typeof paths === \"string\" || paths instanceof Array) {\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        }\n        else {\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\n        }\n        this.loadByArgs(args);\n    }\n    /**加载目录 */\n    public loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(bundleName: string, dir: string, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(bundleName: string, dir: string, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T> | null, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, type: AssetType<T> | null, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(\n        bundleName: string,\n        dir?: string | AssetType<T> | ProgressCallback | CompleteCallback | null,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onProgress?: ProgressCallback | CompleteCallback | null,\n        onComplete?: CompleteCallback | null,\n    ) {\n        let args: ILoadResArgs<T> | null = null;\n        if (typeof dir === \"string\") {\n            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        }\n        else {\n            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);\n        }\n        args.dir = args.paths as string;\n        this.loadByArgs(args);\n    }\n    /**加载远端资源 */\n    public loadRemote<T extends Asset>(url: string, options: IRemoteOptions | null, onComplete?: CompleteCallback<T> | null): void;\n    public loadRemote<T extends Asset>(url: string, onComplete?: CompleteCallback<T> | null): void;\n    public loadRemote(\n        url: string,\n        options?: IRemoteOptions | CompleteCallback | null,\n        onComplete?: CompleteCallback | null\n    ) {\n        if (Utils.string_isHttp(url) && GameConfig.instance.isOnlineServer()) {\n            //线上:将所有远端资源全部采用https\n            url = String(url).replace(\"http://\", \"https://\")\n            url = String(url).replace(\"HTTP://\", \"https://\")\n        }\n        if (onComplete) {\n            assetManager.loadRemote(url, options, onComplete);\n        } else {\n            assetManager.loadRemote(url, options);\n        }\n\n    }\n\n\n    /**释放资源 */\n    public release(path: string, bundleName: string = \"resources\") {\n        if (path) {\n            var bundle = assetManager.getBundle(bundleName);\n            bundle?.release(path);\n        }\n    }\n    /**释放资源 定义的list*/\n    public releaseList(pathList: string[], bundleName: string = \"resources\") {\n        if (pathList && pathList.length > 0) {\n            for (let index = 0; index < pathList.length; index++) {\n                let path = pathList[index];\n                this.release(path, bundleName)\n            }\n        }\n    }\n\n    /**释放目录资源 */\n    public releaseDir(path: string, bundleName: string = \"resources\") {\n        var bundle: AssetManager.Bundle | null = assetManager.getBundle(bundleName);\n        var infos = bundle?.getDirWithPath(path);\n        infos?.map(function (info) {\n            var asset = assetManager.assets.get(info.uuid)!;\n            assetManager.releaseAsset(asset);\n        });\n\n        if (path == \"\" && bundleName != \"resources\" && bundle) {\n            assetManager.removeBundle(bundle);\n        }\n    }\n    /**获取已加载的内存资源 */\n    public get<T extends Asset>(path: string, type?: __private._cocos_core_asset_manager_shared__AssetType<T> | null, bundleName: string = \"resources\"): T | null {\n        let bundle: AssetManager.Bundle | null = assetManager.getBundle(bundleName);\n        if (bundle && bundle[\"get\"]) {\n            return bundle.get(path, type);\n        } else {\n            return null;\n        }\n    }\n\n    public dump() {\n        assetManager.assets.forEach((value: Asset, key: string) => {\n            // console.log(key);\n        })\n        console.log(`当前资源总数:${assetManager.assets.count}`);\n    }\n}\n\nexport let resLoader = new ResLoader();"]}