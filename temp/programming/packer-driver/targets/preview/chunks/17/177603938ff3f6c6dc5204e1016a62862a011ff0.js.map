{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/proj/gnet/GlobalProtocol.ts"],"names":["GlobalProtocol","Encrypt","Logger","WebSocketBuffer","Utils","GlobalCMDHead","GPBWriteAndRead","PacketSize","getHeadlen","getHearbeatPackage","array","headCmd","SERVER_SEND_HEART","isCompress","data","buffer","getPackageLen","msg","toString","length","checkRequestPackage","checkResponsePackage","handlerRequestPackage","reqProtocol","headlen","preDetalData","packetID","Write","newPacket","isLittleEndian","writeInt","a","string_codeToASCII","b","writeByte","writeShort","writeUByte","logNet","number_formatToHex","Start","Read","delPacket","syncPacket","dataView","readPacket","setInt32","byteLength","encodeBuffer","handlerResponsePackage","insertPacket","headLen","contentLength","readInt","readByte","readShort","readUByte","countRealSize","realContentLength","console","warn","SERVER_HEART_RESPONSE","log","decodeBuffer","newArrayBuffer","slice","bbView","readPacketOffset","respPackage","error"],"mappings":"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","sourcesContent":["/**\n * Name = GlobalProtocol\n * URL = db://assets/proj/GlobalProtocol.ts\n * Time = Wed Apr 13 2022 19:18:13 GMT+0800 (中国标准时间)\n * Author = xueya\n * 封包与解包\n */\n\nimport { Encrypt } from \"../../framework/crypto/Encrypto\";\nimport { Logger } from \"../../framework/log/Logger\";\nimport { IProtocolHelper, IRequestProtocol, IResponseProtocol, NetData } from \"../../framework/network/NetInterface\";\nimport { WebSocketBuffer } from \"../../framework/network/WebSocketBuffer\";\nimport { Utils } from \"../../framework/Utils\";\nimport { GlobalCMDHead } from \"./GlobalCMD\";\nimport { GPBWriteAndRead } from \"./GPBWriteAndRead\";\n\n\nexport class GlobalProtocol implements IProtocolHelper {\n\t//最大包长\n\tPacketSize: number = 16384;\n\n\t// 返回包头长度\n\tgetHeadlen(): number {\n\t\treturn 15;\n\t};\n\t// 返回一个心跳包\n\tgetHearbeatPackage(): IRequestProtocol | null {\n\t\tlet array = {\n\t\t\theadCmd: GlobalCMDHead.SERVER_SEND_HEART,\n\t\t\tisCompress: false,\n\t\t\tdata: {},\n\t\t\tbuffer: null\n\t\t}\n\t\treturn array\n\t};\n\t// 返回整个包的长度                  \n\tgetPackageLen(msg: NetData): number {\n\t\treturn msg[\"byteLength\"] || msg.toString().length\n\t};\n\t// 检查请求包数据是否合法（避免客户端报错崩溃） \n\tcheckRequestPackage(msg: NetData): boolean {\n\t\treturn this.getPackageLen(msg) <= this.PacketSize;\n\t}\n\t// 检查响应包数据是否合法（避免客户端报错崩溃）                 \n\tcheckResponsePackage(msg: NetData): boolean {\n\t\treturn this.getPackageLen(msg) >= this.getHeadlen()\n\t};\n\n\t// 处理请求包数据(以二进制流的方式)\n\thandlerRequestPackage(reqProtocol: IRequestProtocol): boolean {\n\t\tif (!reqProtocol || !reqProtocol.headCmd) {\n\t\t\treturn false\n\t\t}\n\t\t//对数据进行转换（二进制流）\n\t\treqProtocol.buffer = null\n\t\t//头部长度\n\t\tlet headlen = this.getHeadlen()\n\t\t//处理之后的数据\n\t\tlet preDetalData = null\n\n\t\t//////////////////////////////////\n\t\t//包ID\n\t\tlet packetID = WebSocketBuffer.Write.newPacket(0, this.isLittleEndian())\n\n\t\t//写标头\n\t\tWebSocketBuffer.Write.writeInt(packetID, 0) //正文数据长度\n\t\tlet a = Utils.string_codeToASCII(\"Q\")\n\t\tlet b = Utils.string_codeToASCII(\"E\")\n\t\tWebSocketBuffer.Write.writeByte(packetID, a)\n\t\tWebSocketBuffer.Write.writeByte(packetID, b)\n\t\tWebSocketBuffer.Write.writeByte(packetID, 1)\n\t\tWebSocketBuffer.Write.writeByte(packetID, 0)\n\t\tWebSocketBuffer.Write.writeInt(packetID, reqProtocol.headCmd)\n\t\tWebSocketBuffer.Write.writeShort(packetID, 1)\n\t\tWebSocketBuffer.Write.writeUByte(packetID, 0)   //校验码\n\n\t\tLogger.logNet(`[GProtocol]:handlerRequestPackage 处理请求包数据 HeadCmd[10进制] = ${reqProtocol.headCmd} HeadCmd[16进制] = ${Utils.number_formatToHex(reqProtocol.headCmd)}`)\n\n\t\t//开始写\n\t\treqProtocol = GPBWriteAndRead.Write.Start(reqProtocol.headCmd, packetID, reqProtocol)\n\n\n\t\tif (!reqProtocol) {\n\t\t\t//删除这个包\n\t\t\tWebSocketBuffer.Read.delPacket(packetID)\n\t\t\treturn false\n\t\t}\n\t\t//读取包\n\t\tWebSocketBuffer.Read.syncPacket(packetID)\n\t\tlet dataView = WebSocketBuffer.Read.readPacket(packetID, true)\n\t\tWebSocketBuffer.Read.delPacket(packetID)\n\n\t\t//重新设置包体正文长度\n\t\tif (dataView) {\n\t\t\tdataView.setInt32(0, dataView.byteLength - 4)\n\t\t}\n\t\t//心跳包不加密\n\t\tif (reqProtocol.headCmd == GlobalCMDHead.SERVER_SEND_HEART) {\n\t\t\treqProtocol.buffer = dataView\n\t\t} else {\n\t\t\treqProtocol.buffer = Encrypt.encodeBuffer(headlen, this.PacketSize, dataView, this.isLittleEndian())\n\t\t}\n\n\t\tif (!this.checkRequestPackage(dataView)) {\n\t\t\treqProtocol.buffer = null\n\t\t\tLogger.logNet(\"[GProtocol]: Error:封包失败长度超出限制\")\n\t\t\treturn false;\n\t\t}\n\t\tif (!reqProtocol || reqProtocol.buffer == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\t// 处理响应包数据   \n\thandlerResponsePackage(msg: ArrayBuffer): IResponseProtocol | null {\n\t\t// Logger.logNet(\"处理响应包数据===>\")\n\t\tif (!msg) {\n\t\t\treturn null;\n\t\t}\n\t\t//包ID\n\t\tlet packetID = WebSocketBuffer.Write.insertPacket(msg, false);\n\t\tif (!packetID) {\n\t\t\treturn null;\n\t\t}\n\t\tlet dataView = WebSocketBuffer.Read.readPacket(packetID, true);\n\t\tlet headLen = this.getHeadlen()\n\t\tif (dataView.byteLength < headLen) {\n\t\t\tWebSocketBuffer.Read.delPacket(packetID)\n\t\t\treturn null;\n\t\t}\n\t\t//读标头\n\t\tlet contentLength = WebSocketBuffer.Read.readInt(packetID, this.isLittleEndian()) //正文数据长度\n\t\tWebSocketBuffer.Read.readByte(packetID)\n\t\tWebSocketBuffer.Read.readByte(packetID)\n\t\tWebSocketBuffer.Read.readByte(packetID)\n\t\tWebSocketBuffer.Read.readByte(packetID)\n\t\tlet headCmd = WebSocketBuffer.Read.readInt(packetID, this.isLittleEndian()) //头部命令\n\t\tWebSocketBuffer.Read.readShort(packetID, this.isLittleEndian())\n\t\tWebSocketBuffer.Read.readUByte(packetID)   //校验码\n\n\t\tlet countRealSize = contentLength + 4\n\t\tlet realContentLength = countRealSize - headLen\n\t\tif (realContentLength < 0 || countRealSize > dataView.byteLength) {//等于0则可能为心跳包 大于则超出限制\n\t\t\tconsole.warn(\"[GProtocol]: 数据有误，正文数据比头部数据还短 或者 定义的数据长度比整个包还长 countRealSize:\" + countRealSize);\n\t\t\t//删除这个包\n\t\t\tWebSocketBuffer.Read.delPacket(packetID);\n\t\t\treturn null;\n\t\t}\n\t\tLogger.logNet(`[GProtocol]: 处理响应包数据 headCmd[10进制] = ${headCmd} headCmd[16进制] = ${Utils.number_formatToHex(headCmd)}`)\n\t\t//非心跳包需要解密\n\t\tif (headCmd != GlobalCMDHead.SERVER_HEART_RESPONSE) {\n\t\t\tif (Utils.number_formatToHex(headCmd) == \"0x1007\") {\n\t\t\t\tconsole.log(\"！！！！这是进入房间成功的数据!!!!\")\n\n\t\t\t\t// //删除这个包\n\t\t\t\t// WebSocketBuffer.Read.delPacket(packetID)\n\t\t\t\t// //将新包推进缓存区\n\t\t\t\t// let newArrayBuffer = dataView.buffer.slice(headLen, dataView.byteLength);\n\t\t\t\t// packetID = WebSocketBuffer.Write.insertPacket(newArrayBuffer, false);\n\t\t\t\t// console.log(\"老包===>\", dataView)\n\t\t\t\t// console.log(\"新包包长：===>\", newArrayBuffer)\n\t\t\t}\n\t\t\tdataView = Encrypt.decodeBuffer(headLen, this.PacketSize, dataView, this.isLittleEndian())\n\n\t\t\t//删除这个包\n\t\t\tWebSocketBuffer.Read.delPacket(packetID)\n\t\t\t//将新包推进缓存区\n\t\t\tlet newArrayBuffer = dataView.buffer.slice(0, dataView.byteLength)\n\t\t\tpacketID = WebSocketBuffer.Write.insertPacket(newArrayBuffer, false)\n\n\t\t\tlet bbView = WebSocketBuffer.Read.readPacket(packetID, true)\n\n\t\t\t//从指定位置开始读\n\t\t\tWebSocketBuffer.Read.readPacketOffset(packetID, headLen - 1)\n\t\t}\n\t\tlet respPackage = null\n\t\t//根据头来分包解析正文\n\t\tif (packetID) {\n\t\t\t//开始读\n\t\t\trespPackage = GPBWriteAndRead.Read.Start(headCmd, packetID)\n\n\t\t} else {\n\t\t\tconsole.error(`[Protocol]: Error：第一步解包出错 `)\n\t\t}\n\t\t//删除这个包\n\t\tWebSocketBuffer.Read.delPacket(packetID)\n\t\treturn respPackage\n\t}\n\n\t/** 是否是小端 */\n\tisLittleEndian(): boolean {\n\t\treturn false\n\t}\n\n}\n\n"]}