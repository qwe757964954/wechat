{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/cache/MailInfo.ts"],"names":["MailInfo","GConstants","StoreKey","Encrypt","LocalStorage","Utils","BaseCache","constructor","superClass","__User","_mailData","MailData","clone","getDataByLocal","key","string_format","USER_MAIL_CACHE","getUserMid","totalData","get","string_isEmpty","table_verify","JsonDecode","saveDataToLocal","data","Array","set","JsonEncode","uniqueData","console","log","arr","len","length","idArr","i","v","id","number_valueOf","index","indexOf","push","getMaxId","key_SystemLastId","WATCH_MESSAGE_SYSTEMID","systemLastId","getMsgByID","msgid","saveDataFromNet","oldData","mergeArray","sliceData","RedDot","update_mail_red","diff","MessageMaxNum","sort","a","b","Number","cols","num","awardArr","awards","status","MsgStatus","MSG_STATUS_HANDLED","table_isEmpty","MSG_STATUS_READ","newDiff","tmpArr","j","tmpArr2","updateMailDataInCache","currentData","obj","sortMsgData","handledArr","unHandleArr","MSG_STATUS_FRESH","tmpHandleArr","tmpUnHandleArr"],"mappings":"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","sourcesContent":["/**\n * Name = MailInfo\n * URL = db://assets/cache/MailInfo.ts\n * Time = Mon May 09 2022 14:43:04 GMT+0800 (中国标准时间)\n * Author = xueya\n * 用户邮件缓存\n */\n\nimport { GConstants, StoreKey } from \"../config/GameConstant\";\nimport { Encrypt } from \"../framework/crypto/Encrypto\";\nimport { LocalStorage } from \"../framework/LocalStorage\";\nimport { Utils } from \"../framework/Utils\";\nimport { BaseCache } from \"../framework/vc/BaseCache\";\nimport { User } from \"./User\";\n\nexport class MailInfo extends BaseCache {\n\n\n    /** 用户类 */\n    private __User: User = null;\n    /** 邮件数据 */\n    private _mailData: Array<any> = [];\n    //实例化\n    constructor(superClass) {\n        super(\"MailInfo\");\n        this.__User = superClass;\n    };\n    /** 邮件数据 */\n    get MailData() {\n        return Utils.clone(this._mailData);\n    }\n    /**\n     * 获取存储在本地的数据\n     * @returns \n     */\n    getDataByLocal() {\n        //说明此时本地没有邮件配置，防止是被清缓存的时候清掉\n        let key = Utils.string_format(StoreKey.USER_MAIL_CACHE, this.__User.getUserMid());\n        let totalData = LocalStorage.get(key, \"\");\n        if (Utils.string_isEmpty(totalData)) {\n            this._mailData = [];\n        } else {\n            this._mailData = Utils.table_verify(Encrypt.JsonDecode(totalData), true);\n        }\n        return this._mailData;\n    }\n\n    /**\n     * 保存数据到本地\n     * @param data \n     */\n    saveDataToLocal(data) {\n        if (!data) {\n            data = [];\n        }\n        if (data instanceof Array) {\n            let key = Utils.string_format(StoreKey.USER_MAIL_CACHE, this.__User.getUserMid());\n            LocalStorage.set(key, Encrypt.JsonEncode(data));\n        }\n    }\n\n    \n    /**\n     * 对传入邮件数组根据ID去重\n     * @param data\n     * @returns \n     */\n    uniqueData(data) {\n        console.log(\"uniqueData\")\n        let arr=[]\n        if (data instanceof Array) {\n            let len = data.length;\n            if (len > 0) {\n                let idArr=[]\n                for (let i = 0; i < len;i++){\n                    let v = data[i];\n                    let id = Utils.number_valueOf(v.id)\n                    let index = idArr.indexOf(id)\n                    if (index==-1) {\n                        idArr.push(id);\n                        arr.push(v);\n                    }    \n                }\n            }\n        }\n        return arr;\n    }\n\n\n    /**\n     * 获取存储在本地的邮件的最大ID\n     * @returns \n     */\n    getMaxId(): number {\n        let key_SystemLastId = Utils.string_format(StoreKey.WATCH_MESSAGE_SYSTEMID, this.__User.getUserMid());\n        let systemLastId = LocalStorage.get(key_SystemLastId, 0);\n        return systemLastId\n    }\n\n    /**\n     * 根据消息ID获取邮件消息\n     * @param msgid \n     * @return data | null \n     */\n    getMsgByID(msgid) {\n        if (msgid == null) {\n            return null;\n        }\n        for (let i = 0; i < this._mailData.length; i++) {\n            if (this._mailData[i][\"id\"] == msgid) {\n                return Utils.clone(this._mailData[i]);\n            };\n        }\n        return null;\n    }\n    /**\n     * 通过请求的获取数据和本地数据进行合并存本地\n     * @param data 请求获取的数据\n     * @returns 处理后的数据\n     */\n    saveDataFromNet(data): Array<any> {\n        //根据当前用户的id不同区分\n        //因为是增量，所以需要把新数据跟老数据合并\n        data = Utils.table_verify(data, true);\n        console.log(\"saveDataFromNet:\", data)\n        let oldData = this.getDataByLocal();\n        console.log(\"oldData:\", oldData)\n        let totalData = Utils.mergeArray(data, oldData);\n        totalData=this.uniqueData(totalData)\n        console.log(\"totalData:\", totalData)\n        this._mailData = this.sliceData(totalData);\n        this.saveDataToLocal(this._mailData);\n        this.__User.RedDot.update_mail_red();\n        return this._mailData\n    }\n\n\n    /**\n     * 针对现有的数据进行截取,最多保留一百条\n     * @param totalData \n     * @returns \n     */\n    sliceData(totalData) {\n        let diff = totalData.length - GConstants.MessageMaxNum\n        if (diff <= 0) {\n            return totalData\n        }\n        // ID升序,方便删除,还得去重\n        let arr = totalData.sort((a, b) => Number(a.id) - Number(b.id));\n        let cols = [];\n        let num = 0;\n        for (let i = 0; i < arr.length; i++) {\n            let v = arr[i];\n            let awardArr = Encrypt.JsonDecode(v.awards)\n            if (num < diff) {\n                if ((v.status == GConstants.MsgStatus.MSG_STATUS_HANDLED) || (Utils.table_isEmpty(awardArr) && v.status == GConstants.MsgStatus.MSG_STATUS_READ)) {\n                    num += 1\n                    continue;\n                }\n            }\n            cols.push(v)\n        }\n        let newDiff = cols.length - GConstants.MessageMaxNum\n        let tmpArr = []\n        if (newDiff > 0) {\n            for (let j = 0; j < cols.length; j++) {\n                if (j >= newDiff) {\n                    tmpArr.push(cols[j])\n                }\n            }\n        } else {\n            tmpArr = cols\n        }\n        //降序\n        let tmpArr2 = tmpArr.sort((a, b) => Number(b.id) - Number(a.id));\n        return tmpArr2\n    }\n\n    /**\n     * 更新邮件缓存\n     * @param currentData \n     */\n    updateMailDataInCache(currentData) {\n        let data = this._mailData;\n        let len = data.length;\n         for (let i = 0; i < len; i++) {\n            if (data[i]['id'] == currentData.id) {\n                let obj = currentData\n                data[i]=obj\n            } \n        }\n        let arr=this.uniqueData(data)\n        this.saveDataToLocal(arr);\n        this._mailData = arr;\n        this.__User.RedDot.update_mail_red();\n        return true;\n    }\n\n    /**\n     * 对数据进行排序\n     * @param data \n     * @returns \n     */\n    sortMsgData(data: Array<any>) {\n        let handledArr = []\n        let unHandleArr = []\n        for (let i = 0; i < data.length; i++) {\n            let v = data[i];\n            let awardArr = Encrypt.JsonDecode(v.awards)\n            if (v.status == GConstants.MsgStatus.MSG_STATUS_FRESH || (!Utils.table_isEmpty(awardArr) && v.status == GConstants.MsgStatus.MSG_STATUS_READ)) {\n                unHandleArr.push(v)\n            }\n            if ((v.status == GConstants.MsgStatus.MSG_STATUS_HANDLED) || (Utils.table_isEmpty(awardArr) && v.status == GConstants.MsgStatus.MSG_STATUS_READ)) {\n                handledArr.push(v)\n            }\n        }\n        //倒序排序\n        let tmpHandleArr = handledArr.sort((a, b) => Number(b.id) - Number(a.id));\n        let tmpUnHandleArr = unHandleArr.sort((a, b) => Number(b.id) - Number(a.id));\n        let arr = Utils.mergeArray(tmpUnHandleArr, tmpHandleArr);\n        return arr;\n    }\n\n}"]}