{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/layer/DelegateComponent.ts"],"names":["Component","_decorator","AppEvent","resLoader","Logger","EventManager","ccclass","menu","DelegateComponent","viewParams","add","noticeToRoot","onAdded","node","applyComponentsFunction","params","callbacks","array","UIID","uuid","Prefab","prefabPath","Bundle","bundle","dispatch","VIEW_UI_OPENED","remove","isDestroy","valid","onBeforeRemove","removed","onDestroy","isAutoRecover","logView","release","onRemoved","VIEW_UI_CLOSED","destroy","removeFromParent","funName","i","components","length","component","func","call","getViewParams","getParams"],"mappings":"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","sourcesContent":["\n/**\n * Name = DelegateComponent\n * URL = db://assets/framework/layer/DelegateComponent.ts\n * Time = Thu Apr 14 2022 12:03:00 GMT+0800 (中国标准时间)\n * Author = xueya\n * Gui模块绑定的通用组件\n */\nimport { Component, Node, _decorator } from \"cc\";\nimport { AppEvent } from \"../../config/AppEvent\";\nimport { inf_ViewParams } from \"../InterfaceDefines\";\nimport { resLoader } from \"../loader/ResLoader\";\nimport { Logger } from \"../log/Logger\";\nimport { EventManager } from \"../manager/EventManager\";\n\nconst { ccclass, menu } = _decorator;\n\n/** 窗口事件触发组件 */\n@ccclass('DelegateComponent')\n//方便编辑器识别的菜单项目\n@menu('layer/DelegateComponent')\n\nexport class DelegateComponent extends Component {\n    /** 外部传递的参数 */\n    public viewParams: inf_ViewParams | null = null;\n\n    add() {\n        let viewParams = this.viewParams!;\n\n        // 通知外部UI管理窗口添加到父节点后的事件\n        if (typeof viewParams.noticeToRoot!.onAdded === \"function\") {\n            viewParams.noticeToRoot!.onAdded(this.node, viewParams);\n        }\n        // 触发窗口组件上添加到父节点后的事件\n        this.applyComponentsFunction(this.node, \"onAdded\", viewParams.params);\n        if (typeof viewParams.callbacks!.onAdded === \"function\") {\n            viewParams.callbacks!.onAdded(this.node, viewParams.params);\n        }\n        //发送全局事件\n        let array = {\n            UIID: viewParams.uuid,\n            Prefab: viewParams.prefabPath,\n            Bundle: viewParams.bundle,\n        }\n        EventManager.dispatch(AppEvent.VIEW_UI_OPENED, array)\n    }\n\n    /** 删除节点，该方法只能调用一次，将会触发onBeforeRemoved回调 */\n    remove(isDestroy: boolean) {\n        let viewParams = this.viewParams!;\n\n        if (viewParams.valid) {\n            // 触发窗口组件上移除之前的事件\n            this.applyComponentsFunction(this.node, \"onBeforeRemove\", viewParams.params);\n\n            // 通知外部UI管理窗口添加到父节点后的事件\n            if (typeof viewParams.noticeToRoot!.onBeforeRemove === \"function\") {\n                viewParams.noticeToRoot!.onBeforeRemove(this.node,\n                    () => {\n                        this.removed(viewParams, isDestroy);\n                    });\n            }\n\n            //  通知外部对象窗口组件上移除之前的事件（关闭窗口前的关闭动画处理）\n            if (typeof viewParams.callbacks!.onBeforeRemove === \"function\") {\n                viewParams.callbacks!.onBeforeRemove(\n                    this.node,\n                    () => {\n                        this.removed(viewParams, isDestroy);\n                    });\n            }\n            else {\n                this.removed(viewParams, isDestroy);\n            }\n        }\n    }\n\n    /**销毁 */\n    onDestroy() {\n        let viewParams = this.viewParams!;\n        if (viewParams) {\n            viewParams.valid = false;\n            if (viewParams.isAutoRecover == true) {\n                Logger.logView(`释放资源:${viewParams.prefabPath}`)\n                resLoader.release(viewParams.prefabPath)\n            }\n        }\n        // 触发窗口组件上窗口移除之后的事件\n        this.applyComponentsFunction(this.node, \"onRemoved\", viewParams?.params);\n\n        // 通知外部UI管理窗口移除之后的事件\n        if (typeof viewParams.noticeToRoot!.onRemoved === \"function\") {\n            viewParams.noticeToRoot!.onRemoved(this.node, viewParams);\n        }\n        // 通知外部对象窗口移除之后的事件\n        if (typeof viewParams.callbacks!.onRemoved === \"function\") {\n            viewParams.callbacks!.onRemoved(this.node, viewParams);\n        }\n        //发送全局事件\n        let array = {\n            UIID: viewParams.uuid,\n            Prefab: viewParams.prefabPath,\n            Bundle: viewParams.bundle,\n        }\n        EventManager.dispatch(AppEvent.VIEW_UI_CLOSED, array)\n        this.viewParams = null;\n    }\n\n\n    /** 窗口组件中触发移除事件与释放窗口对象 */\n    private removed(viewParams: inf_ViewParams, isDestroy: boolean) {\n        viewParams.valid = false;\n\n        if (isDestroy) {\n            this.node.destroy();\n        } else {\n            this.node.removeFromParent();\n        }\n    }\n    protected applyComponentsFunction(node: Node, funName: string, params: any) {\n        for (let i = 0; i < node.components.length; i++) {\n            let component: any = node.components[i];\n            let func = component[funName];\n            if (func) {\n                func.call(component, params);\n            }\n        }\n    }\n    /**获取传递的所有数据 */\n    public getViewParams() {\n        return this.viewParams;\n    }\n    /**获取主动传递的参数 */\n    public getParams() {\n        if (this.viewParams) {\n            return this.viewParams.params\n        }\n        return null\n    }\n\n\n}"]}