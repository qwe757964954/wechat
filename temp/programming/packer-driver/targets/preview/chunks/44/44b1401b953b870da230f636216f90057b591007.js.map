{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/network/NetManager.ts"],"names":["NetManager","MapEx","NetNode","_channels","getInstance","_instance","addNetNode","netnode","index","setNetNode","newNode","key","size","newKey","set","removeNetNode","channelId","netNode","has","dtor","delete","setNetNodeCallback","options","errorConnectedCallback","error","connectedCallback","connected","disconnectCallback","disconnect","connectOutTimeCallback","connectouttime","connect","send","reqProtocol","force","request","requestUnique","close","code","reason","closeSocket","closeAll","netNodes","values","forEach","removeNetNodeAll","clear"],"mappings":"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","sourcesContent":["import { MapEx } from \"../extend/MapEx\";\nimport { IRequestProtocol } from \"./NetInterface\";\nimport { NetConnectOptions, NetNode } from \"./NetNode\";\n\n/*\n * 网络节点管理类({NetNode})\n */\nexport class NetManager {\n    private static _instance: NetManager;\n    protected _channels = new MapEx();\n\n    public static getInstance(): NetManager {\n        if (!this._instance) {\n            this._instance = new NetManager();\n        }\n        return this._instance;\n    }\n    /** 添加Node，返回NetNode对象 */\n    public addNetNode(): [netnode: NetNode, index: number] {\n        let netnode = new NetNode()\n        let index = NetManager.getInstance().setNetNode(netnode)\n        return [netnode, index]\n    }\n    /** 添加Node，返回ChannelID */\n    public setNetNode(newNode: NetNode): number {\n        let key = this._channels.size\n        let newKey = key + 1\n        this._channels.set(newKey, newNode)\n        return newKey\n    }\n\n    /** 移除Node */\n    public removeNetNode(channelId: number) {\n        if (channelId) {\n            let netNode = this._channels.has(channelId)\n            if (netNode) {\n                if (netNode.dtor) {\n                    netNode.dtor()\n                }\n                this._channels.delete(channelId)\n            }\n        }\n    }\n    /**设置回调 */\n    public setNetNodeCallback(channelId: number, options: { error?: Function, connected?: Function, disconnect?: Function, connectouttime?: Function }) {\n        if (channelId) {\n            let netNode = this._channels.has(channelId)\n            if (netNode) {\n                netNode.errorConnectedCallback = options.error\n                netNode.connectedCallback = options.connected\n                netNode.disconnectCallback = options.disconnect\n                netNode.connectOutTimeCallback = options.connectouttime\n                return true\n            }\n        }\n        return false;\n    }\n\n    /** 调用Node连接 */\n    public connect(channelId: number, options: NetConnectOptions): boolean {\n        if (channelId) {\n            let netNode = this._channels.has(channelId)\n            if (netNode) {\n                return netNode.connect(options);\n            }\n        }\n        return false;\n    }\n\n    /** 调用Node发送 */\n    public send(channelId: number, reqProtocol: IRequestProtocol, force: boolean = false): number {\n        if (channelId) {\n            let netNode = this._channels.has(channelId)\n            if (netNode) {\n                return netNode!.send(reqProtocol, force);\n            }\n        }\n        return -1;\n    }\n\n    /** 发起请求 */\n    public request(channelId: number, reqProtocol: IRequestProtocol, force: boolean = false) {\n        if (channelId) {\n            let netNode = this._channels.has(channelId)\n            if (netNode) {\n                netNode.request(reqProtocol, force);\n            }\n        }\n    }\n\n    /** 同request，但在request之前会先判断队列中是否已有rspCmd，如有重复的则直接返回 */\n    public requestUnique(channelId: number, reqProtocol: IRequestProtocol, force: boolean = false): boolean {\n        if (channelId) {\n            let netNode = this._channels.has(channelId)\n            if (netNode) {\n                return netNode.requestUnique(reqProtocol, force);\n            }\n        }\n        return false;\n    }\n\n    /** 调用Node关闭 */\n    public close(channelId: number, code?: number, reason?: string) {\n        if (channelId) {\n            let netNode = this._channels.has(channelId)\n            if (netNode) {\n                return netNode.closeSocket(code, reason);\n            }\n        }\n    }\n\n    //关闭所有连接\n    public closeAll(code?: number, reason?: string) {\n        let netNodes = this._channels.values()\n        netNodes.forEach((key, index) => {\n            netNodes[index].closeSocket(code, reason);\n        });\n    }\n    /** 移除所有Node */\n    public removeNetNodeAll() {\n        let netNodes = this._channels.values()\n\n        netNodes.forEach((key, index) => {\n            if (netNodes[index].dtor) {\n                netNodes[index].dtor()\n            }\n        });\n        this._channels.clear()\n    }\n}"]}