{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/network/NetNode.ts"],"names":["NetNode","error","warn","Logger","Utils","NetNodeStateStrs","NetTipsType","NetNodeState","_connectOptions","_autoReconnect_old","_autoReconnect","_isSocketInit","_isSocketOpen","_state","Closed","_socket","_isCanCallback","_networkTips","_protocolHelper","_callbackExecuter","connectOutTimeCallback","connectedCallback","disconnectCallback","errorConnectedCallback","_isStartHeart","_keepAliveTimer","_receiveMsgTimer","_reconnectTimer","_heartFirstTime","_heartTime","_receiveTime","_reconnetTimeOut","_requests","Array","_maxReqQuene","init","socket","protocol","networkTips","execFunc","logNet","responseData","connect","options","initSocket","Connecting","updateNetTips","autoReconnect","startHeart","isSocketOpend","resetHearbeatTimer","stopHeart","setHeartTime","time","onConnectedCB","event","onConnected","onMessageCB","msg","onMessage","onErrorCB","onError","onCloseCB","onClosed","tipsType","isShow","Requesting","requestTips","connectTips","ReConnecting","reconnectTips","Checking","onChecked","Working","checkReqQuene","Closing","resetReceiveMsgTimer","checkResponsePackage","respData","handlerResponsePackage","requests","concat","length","maxCount","i","array","reqArray","buffer","headCmd","action","sendRes","send","outtime","splice","table_verify","code","reason","clearTimer","isAutoReconnect","setTimeout","close","rejectReconnect","closeSocket","reqProtocol","force","res","handlerRequestPackage","push","request","base_request","requestUnique","index","_req","buf","JSON","stringify","outTime","isOnlyStop","clearTimeout","isFirstStart","sendHeartbeatPacket","getHearbeatPackage","setInterval","isSocketInited","dtor","setCallbackState","state","isConnected","readyState","WebSocket","CLOSED","CLOSING"],"mappings":"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","sourcesContent":["import { error, warn } from \"cc\";\nimport { Logger } from \"../log/Logger\";\nimport { Utils } from \"../Utils\";\nimport { INetworkTips, IProtocolHelper, IRequestProtocol, IResponseProtocol, RequestObject } from \"./NetInterface\";\nimport { WebSocketTask } from \"./WebSocketTask\";\n\n/*\n*   CocosCreator网络节点基类，以及网络相关接口定义\n*   1. 网络连接、断开、请求发送、数据接收等基础功能\n*   2. 心跳机制\n*   3. 断线重连 + 请求重发\n*   4. 调用网络屏蔽层\n*/\n//绑定的回调监听返回的数据结构\ntype ExecuterFunc = (responseData: IResponseProtocol) => void;\ntype CheckFunc = (checkedFunc: VoidFunc) => void;\ntype VoidFunc = () => void;\ntype ConnectOptions = (connectOptions: NetConnectOptions, event: any, endReconnerNumber: number) => void;\ntype CloseFunc = (endReconnerNumber: number) => void;\n\nlet NetNodeStateStrs = [\"已关闭\", \"关闭中\", \"连接中\", \"验证中\", \"可传输数据\"];\n\nexport enum NetTipsType {\n    Connecting,\n    ReConnecting,\n    Requesting,\n}\n\nexport enum NetNodeState {\n    Closed,                     // 已关闭\n    Closing,                    // 关闭中\n    Connecting,                 // 连接中\n    Checking,                   // 验证中\n    Working,                    // 可传输数据\n}\n\n//请求连接的url结构\nexport interface NetConnectOptions {\n    host?: string,              // 地址\n    port?: number,              // 端口\n    url?: string,               // url，与地址+端口二选一\n    autoReconnect?: number,     // -1 永久重连，0不自动重连，其他正整数为自动重试次数\n}\n//单个的websocket 节点类\nexport class NetNode {\n    protected _connectOptions: NetConnectOptions | null = null;             //网络地址\n    protected _autoReconnect_old: number = 0;\n    protected _autoReconnect: number = 0;\n    protected _isSocketInit: boolean = false;                               // Socket是否初始化过\n    protected _isSocketOpen: boolean = false;                               // Socket是否连接成功过\n    protected _state: NetNodeState = NetNodeState.Closed;                   // 节点当前状态\n    protected _socket: WebSocketTask | null = null;                               // Socket对象（可能是原生socket、websocket、wx.socket...)\n    protected _isCanCallback: boolean = true;                              // 是否可回调\n    protected _networkTips: INetworkTips | null = null;                     // 网络提示ui对象（请求提示、断线重连提示等）\n    protected _protocolHelper: IProtocolHelper | null = null;               // 包解析对象\n\n    /**业务实现 */\n    protected _callbackExecuter: ExecuterFunc | null = null;                // 回调执行\n    public connectOutTimeCallback: CloseFunc | null = null;                 // 连接超时回调 参数为剩余重连的次数\n    public connectedCallback: CheckFunc | null = null;                      // 连接完成回调\n    public disconnectCallback: CloseFunc | null = null;                     // 断线回调 参数为剩余重连的次数\n    public errorConnectedCallback: ConnectOptions | null = null;            // 连接错误回调\n\n    protected _isStartHeart: boolean = false;                               // 是否主动开启了心跳\n    protected _keepAliveTimer: any = null;                                  // 心跳定时器\n    protected _receiveMsgTimer: any = null;                                 // 接收数据定时器\n    protected _reconnectTimer: any = null;                                  // 重连定时器\n    protected _heartFirstTime: number = 1000;                               // 心跳首次开启间隔:毫秒\n    protected _heartTime: number = 10000;                                   // 心跳间隔:毫秒\n    protected _receiveTime: number = 20000;                                 // 多久没收到数据断开：毫秒\n    protected _reconnetTimeOut: number = 5000;                             //  重连间隔：毫秒\n    protected _requests: RequestObject[] = Array<RequestObject>();          // 请求列表\n\n    protected _maxReqQuene: number = 3;                                     //队列请求：每次最多同时请求次数\n    /********************** 网络相关处理 *********************/\n    /**公开：初始化网络配置*/\n    /**\n     * 公开：初始化网络配置\n     * @param socket Websocket类\n     * @param protocol  包解析对象\n     * @param networkTips 网络提示ui对象（请求提示、断线重连提示等）\n     * @param execFunc 回调执行\n     */\n    public init(socket: WebSocketTask, protocol: IProtocolHelper, networkTips: INetworkTips | null = null, execFunc: ExecuterFunc | null = null) {\n        Logger.logNet(`网络初始化`);\n        this._socket = socket;\n        this._protocolHelper = protocol;\n        this._networkTips = networkTips;\n        this._callbackExecuter = execFunc ? execFunc : (responseData: IResponseProtocol) => {\n        }\n    }\n    /**\n     * 开启连接\n     * @param options 详见 NetConnectOptions\n     * @returns 是否连接成功\n     */\n    public connect(options: NetConnectOptions): boolean {\n        if (this._socket && this._state == NetNodeState.Closed) {\n            if (!this._isSocketInit) {\n                this.initSocket();\n            }\n            this._state = NetNodeState.Connecting;\n            if (!this._socket.connect(options)) {\n                this.updateNetTips(NetTipsType.Connecting, false);\n                return false;\n            }\n            if (this._connectOptions == null && typeof options.autoReconnect == \"number\") {\n                this._autoReconnect_old = options.autoReconnect;\n                this._autoReconnect = options.autoReconnect;\n            }\n            this._connectOptions = options;\n            this.updateNetTips(NetTipsType.Connecting, true);\n            return true;\n        } else {\n            Logger.logNet(`Socket连接已开启 要开启请先关闭`);\n        }\n        return false;\n    }\n    /**\n     * 主动开启心跳\n     */\n    public startHeart() {\n        if (!this.isSocketOpend()) {\n            Logger.logNet(\"主动开启心跳失败，socket从未连接成功\")\n            return\n        }\n        if (this._isStartHeart == true) {\n            return\n        }\n        this._isStartHeart = true\n        this.resetHearbeatTimer(true)\n    }\n    /**\n     * 主动关闭心跳\n     */\n    public stopHeart() {\n        this._isStartHeart = false\n        this.resetHearbeatTimer(false)\n    }\n    /**\n     * 设置心跳间隔\n     * @param time 毫秒级别\n     */\n    public setHeartTime(time: number = null) {\n        if (time == null) {\n            return\n        }\n        this._heartTime = time\n    }\n    /**私有：初始化网络socket */\n    protected initSocket() {\n        if (this._socket) {\n\n            this._socket.onConnectedCB = (event) => {\n                this.onConnected(event)\n            };\n            this._socket.onMessageCB = (msg) => { this.onMessage(msg) };\n            this._socket.onErrorCB = (event) => { this.onError(event) };\n            this._socket.onCloseCB = (event) => { this.onClosed(event) };\n            this._isSocketInit = true;\n        }\n    }\n    /**私有:更新网络状态提示 */\n    protected updateNetTips(tipsType: NetTipsType, isShow: boolean) {\n        if (this._networkTips) {\n            if (tipsType == NetTipsType.Requesting) {\n                this._networkTips.requestTips(isShow);\n            }\n            else if (tipsType == NetTipsType.Connecting) {\n                this._networkTips.connectTips(isShow);\n            }\n            else if (tipsType == NetTipsType.ReConnecting) {\n                this._networkTips.reconnectTips(isShow);\n            }\n        }\n    }\n\n    /**私有: 网络连接成功 */\n    protected onConnected(event: any) {\n        Logger.logNet(\"网络已连接\")\n        this._isSocketOpen = true;\n        this._autoReconnect = this._autoReconnect_old;\n        this._state = NetNodeState.Checking;\n        this.onChecked()\n        Logger.logNet(`网络已连接当前状态为【${NetNodeStateStrs[this._state]}】`);\n        // 如果设置了成功回调，在连接完成后进入检查阶段，等待检查结束\n        if (this.connectedCallback !== null && this._isCanCallback) {\n            this.connectedCallback(() => { });\n        }\n    }\n\n    /**私有: 连接验证成功，进入工作状态 */\n    protected onChecked() {\n        Logger.logNet(\"连接验证成功，进入工作状态\");\n        this._state = NetNodeState.Working;\n        // 关闭连接或重连中的状态显示\n        this.updateNetTips(NetTipsType.Connecting, false);\n        this.updateNetTips(NetTipsType.ReConnecting, false);\n\n        // 重发待发送信息\n        this.checkReqQuene()\n    }\n\n    /**私有: 接收到一个完整的消息包 */\n    protected onMessage(msg: any): void {\n        Logger.logNet(\"******[Socket]:onMessage 收到一条消息*******\")\n        if (this._state == NetNodeState.Closing || this._state == NetNodeState.Closed) {\n            Logger.logNet(`拒收消息：接受消息状态为【${NetNodeStateStrs[this._state]}】`);\n            return;\n        }\n\n        // 接受到数据，停止超时检测\n        this.resetReceiveMsgTimer(null, true);\n        // 重置心跳包发送器\n        this.resetHearbeatTimer();\n\n        // 进行头部的校验（实际包长与头部长度是否匹配）\n        if (!this._protocolHelper!.checkResponsePackage(msg)) {\n            error(`校验接受消息数据异常`);\n            return;\n        }\n\n        // 开始解包\n        let respData = this._protocolHelper?.handlerResponsePackage(msg)\n        // Utils.dump(respData)\n        if (respData) {\n            if (this._isCanCallback) {\n                //触发回调\n                this._callbackExecuter(respData)\n            }\n        } else {\n            Logger.logNet(`[Socket]:收到一条未知的命令 解包失败`)\n        }\n        // 触发消息执行\n        if (this._state == NetNodeState.Working) {\n            this.checkReqQuene()\n        }\n    }\n    /**检查发送队列 */\n    protected checkReqQuene() {\n        // 待发送信息 每次最多同时发送3条\n        let requests = this._requests.concat();\n        if (requests.length > 0) {\n            let maxCount = requests.length > this._maxReqQuene ? this._maxReqQuene : requests.length\n            Logger.logNet(`[Socket]:checkReqQuene 队列中有【${this._requests.length}】个待发送的信息,本次发送 ${maxCount} 条`);\n            for (let i = 0; i < maxCount; i++) {\n                let array = requests[i]\n                if (array) {\n                    if (array?.reqArray?.buffer) {\n                        Logger.logNet(`[Socket]:checkReqQuene 发送命令为【${array.reqArray.headCmd}】【${array.reqArray.action}】的请求，等待请求数据的回调`);\n                        let sendRes = this._socket!.send(array.reqArray.buffer);\n                        this.resetReceiveMsgTimer(array.reqArray.outtime)\n                        if (sendRes == 1) {\n                            requests.splice(i, 1)\n                        } else {\n                            break\n                        }\n                    }\n\n                }\n            }\n            // 如果还有等待返回的请求，启动网络请求层\n            this.updateNetTips(NetTipsType.Requesting, requests.length > 0);\n        }\n        this._requests = requests\n    }\n    /**连接错误 */\n    protected onError(event: any) {\n        if (this.errorConnectedCallback && this._isCanCallback) {\n            this.errorConnectedCallback(this._connectOptions, event, this._autoReconnect)\n            Logger.logNet(`[Socket]:onError 连接错误`);\n            return;\n        }\n        error(event);\n    }\n    /**连接失败 */\n    protected onClosed(event: CloseEvent) {\n        event = Utils.table_verify(event);\n        Logger.logNet(`***Websocket 连接关闭，code:${event?.code},reason:${event?.reason}***`)\n        this.clearTimer();\n        //主动关闭不回调\n        if (!this._isCanCallback) {\n            this._state = NetNodeState.Closed;\n            return;\n        }\n        // 自动重连\n        if (this.isAutoReconnect()) {\n            // 执行断线回调，参数为剩余重连的次数\n            if (this.disconnectCallback) {\n                this.disconnectCallback(this._autoReconnect)\n                Logger.logNet(`[Socket]:onClosed 断开连接`);\n            }\n\n            this.updateNetTips(NetTipsType.ReConnecting, true);\n            this._reconnectTimer = setTimeout(() => {\n                this._socket!.close();\n                this._state = NetNodeState.Closed;\n                //主动关闭不回调\n                if (!this._isCanCallback) {\n                    return;\n                }\n                Logger.logNet(\"[Socket]:执行重连逻辑 先关闭 再连接...\");\n                this.connect(this._connectOptions!);\n                if (this._autoReconnect > 0) {\n                    this._autoReconnect -= 1;\n                }\n\n            }, this._reconnetTimeOut);\n        } else {\n            this._state = NetNodeState.Closed;\n            // 执行断线回调，参数为剩余重连的次数 此时不再重连\n            if (this.disconnectCallback) {\n                this.disconnectCallback(this._autoReconnect)\n                Logger.logNet(`[Socket]:onClosed 断开连接`);\n                this.disconnectCallback = null;\n            }\n\n        }\n    }\n    /** 主动关闭连接 （停止所有定时器 停止重连）*/\n    public close(code?: number, reason?: string) {\n        Logger.logNet(\"=====================主动关闭连接======================\")\n        this.clearTimer();\n        this.rejectReconnect();\n        this._requests = Array<RequestObject>();\n        this._requests.length = 0\n        this._isStartHeart = false\n        if (this._networkTips) {\n            this._networkTips.connectTips(false);\n            this._networkTips.reconnectTips(false);\n            this._networkTips.requestTips(false);\n        }\n        if (this._socket) {\n            this._state = NetNodeState.Closing;\n            this._socket.close(code, reason);\n        }\n        else {\n            this._state = NetNodeState.Closed;\n        }\n\n    }\n\n    /** 只是关闭Socket套接字（仍然重用缓存与当前状态） */\n    public closeSocket(code?: number, reason?: string) {\n        if (this._socket) {\n            this._socket.close(code, reason);\n        }\n    }\n\n    /** 发起包，如果当前处于重连中，进入缓存列表等待重连完成后发送 */\n    public send(reqProtocol: IRequestProtocol, force: boolean = false): number {\n        let res = this._protocolHelper!.handlerRequestPackage(reqProtocol);\n\n        if (!res || !reqProtocol.buffer) {\n            error(`发送数据格式有误 缓存发送失败`);\n            return -1\n        }\n        if (this._state == NetNodeState.Working || force) {\n            Logger.logNet(\"[Send]:心跳包发送成功\")\n            let sendRes = this._socket!.send(reqProtocol.buffer)\n            this.resetReceiveMsgTimer(reqProtocol.outtime)\n            return sendRes;\n        }\n        else if (this._state == NetNodeState.Checking ||\n            this._state == NetNodeState.Connecting) {\n            this._requests.push({\n                reqArray: reqProtocol,\n            });\n            Logger.logNet(`当前状态为【${NetNodeStateStrs[this._state]}】,繁忙并缓冲发送数据`);\n            return 0;\n        }\n        else {\n            error(`当前状态为【${NetNodeStateStrs[this._state]}】,请求错误`);\n            return -1;\n        }\n    }\n\n    /**发起请求，并进入缓存列表\n     * 此处要对 data进行包装加密\n     * @param reqProtocol \n     * @param force \n     */\n    public request(reqProtocol: IRequestProtocol, force: boolean = false) {\n        let res = this._protocolHelper!.handlerRequestPackage(reqProtocol);\n        // Logger.logNet(\"发起请求，并进入缓存列表===>\"+res)\n        if (res) {\n            this.base_request(reqProtocol, force);\n        }\n    }\n\n    /** 唯一request(利用action唯一)，确保没有同一响应的请求（避免一个请求重复发送） */\n    public requestUnique(reqProtocol: IRequestProtocol, force: boolean = false): boolean {\n        let action = reqProtocol.action\n        if (!action) {\n            return\n        }\n        for (let index = 0; index < this._requests.length; index++) {\n            let _req = this._requests[index];\n            if (_req && _req.reqArray && _req.reqArray.action == action) {\n                Logger.logNet(`[Socket]:requestUnique 命令 action【${_req.reqArray.action}】重复请求 已拒绝再次执行`);\n                return false;\n            }\n\n        }\n        this.request(reqProtocol, force)\n        return true;\n    }\n    /**\n     * 将要发送的数据命令保存起来，要不缓存要不立即发送\n     * @param reqProtocol 请求的结构体\n     * @param force 强制发送\n     * @returns \n     */\n    private base_request(reqProtocol: IRequestProtocol, force: boolean = false) {\n        let buf = null\n        try {\n            buf = JSON.stringify(reqProtocol);\n        } catch (error) {\n            error(`缓存数据失败 当前action${reqProtocol.action}`)\n        }\n        if (buf && reqProtocol && reqProtocol.buffer != null) {\n            // Logger.logNet(\"进入缓存列表\")\n            // 进入发送缓存列表\n            this._requests.push({\n                reqArray: reqProtocol\n            });\n        }\n        if (this._state == NetNodeState.Working || force) {\n            this.checkReqQuene()\n        }\n    }\n    /********************** 心跳、超时相关处理 *********************/\n    //重置超时定时器\n    protected resetReceiveMsgTimer(outTime?: number, isOnlyStop?: boolean) {\n        if (this._receiveMsgTimer !== null) {\n            clearTimeout(this._receiveMsgTimer);\n        }\n        if (isOnlyStop) {\n            return\n        }\n        this._receiveMsgTimer = setTimeout(() => {\n            warn(\"接收消息定时器超时 关闭网络连接\");\n            // 执行超时回调，参数为剩余重连的次数\n            if (this.connectOutTimeCallback && this._isCanCallback) {\n                this.connectOutTimeCallback(this._autoReconnect)\n                Logger.logNet(`[Socket]:网络连接超时`);\n            }\n            this._socket!.close();\n        }, outTime || this._receiveTime);\n    }\n    //重置心跳定时器\n    protected resetHearbeatTimer(isFirstStart: boolean = false) {\n        if (this._keepAliveTimer !== null) {\n            clearTimeout(this._keepAliveTimer);\n        }\n        //必须主动开启\n        this.sendHeartbeatPacket(isFirstStart)\n    }\n    //发送心跳包\n    protected sendHeartbeatPacket(isFirstStart) {\n        if (this._isStartHeart == true && this._state == NetNodeState.Working) {\n            let time = 0\n            if (isFirstStart) {\n                time = this._heartFirstTime\n                this._keepAliveTimer = setTimeout(() => {\n                    Logger.logNet(\"[Socket]:持续发送心跳信息中...\");\n                    this.send(this._protocolHelper!.getHearbeatPackage());\n                }, this._heartFirstTime);\n            }\n            this._keepAliveTimer = setInterval(() => {\n                Logger.logNet(\"[Socket]:持续发送心跳信息中...\");\n                this.send(this._protocolHelper!.getHearbeatPackage());\n            }, (this._heartTime + time) * 3 / 4);\n\n        }\n    }\n    //清理所有定时器\n    protected clearTimer() {\n        if (this._receiveMsgTimer !== null) {\n            clearTimeout(this._receiveMsgTimer);\n        }\n        if (this._keepAliveTimer !== null) {\n            clearTimeout(this._keepAliveTimer);\n        }\n        if (this._reconnectTimer !== null) {\n            clearTimeout(this._reconnectTimer);\n        }\n        this._isStartHeart = false\n    }\n    /**是否开启过 */\n    public isSocketOpend() {\n        return this._isSocketOpen\n    }\n    /**是否初始化过 */\n    public isSocketInited() {\n        return this._isSocketInit\n    }\n    /** 是否自动重连 */\n    public isAutoReconnect() {\n        return this._autoReconnect != 0;\n    }\n    /** 停止重连 */\n    public rejectReconnect() {\n        this._autoReconnect = 0;\n        this.clearTimer();\n    }\n    /**删除 */\n    public dtor() {\n        this._networkTips = null\n        this.close()\n    }\n    /**设置是否可回调 */\n    public setCallbackState(state: boolean) {\n        if (state != null) {\n            this._isCanCallback = state\n        }\n    }\n    /** 是否连接成功 */\n    public isConnected() {\n        if (this._socket) {\n            return this._socket.readyState() != WebSocket.CLOSED && this._socket.readyState() != WebSocket.CLOSING;\n        }\n        return false;\n    }\n}"]}