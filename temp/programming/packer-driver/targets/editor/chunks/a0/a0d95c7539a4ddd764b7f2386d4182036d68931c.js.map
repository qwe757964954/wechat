{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/manager/EventManager.ts"],"names":["_EventManager","Observer","listeners","instance","_instance","addListener","name","callback","context","observers","push","removeListener","length","i","observer","compar","splice","removeListenerByContext","deleteList","event","Object","prototype","hasOwnProperty","call","dispatch","args","notify","constructor","self","EventManager"],"mappings":";;;iBAQaA,a,EAmGPC,Q;;;;;;;;;;;;;AA3GN;AACA;AACA;AACA;AACA;AACA;AACA;+BAEaD,a,GAAN,MAAMA,aAAN,CAAoB;AAAA;AAAA,eAEfE,SAFe,GAEiC,EAFjC;AAAA;;AAKG,mBAARC,QAAQ,GAAkB;AACxC,cAAI,CAAC,KAAKC,SAAN,IAAmB,KAAKA,SAAL,IAAkB,IAAzC,EAA+C;AAC3C,iBAAKA,SAAL,GAAiB,IAAIJ,aAAJ,EAAjB;AACH;;AACD,iBAAO,KAAKI,SAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,WAAW,CAACC,IAAD,EAAeC,QAAf,EAAmCC,OAAnC,EAAkD;AAChE,cAAIC,SAAqB,GAAG,KAAKP,SAAL,CAAeI,IAAf,CAA5B;;AACA,cAAI,CAACG,SAAL,EAAgB;AACZ,iBAAKP,SAAL,CAAeI,IAAf,IAAuB,EAAvB;AACH;;AACD,eAAKJ,SAAL,CAAeI,IAAf,EAAqBI,IAArB,CAA0B,IAAIT,QAAJ,CAAaM,QAAb,EAAuBC,OAAvB,CAA1B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWG,QAAAA,cAAc,CAACL,IAAD,EAAeE,OAAf,EAA6B;AAC9C,cAAIC,SAAqB,GAAG,KAAKP,SAAL,CAAeI,IAAf,CAA5B;AACA,cAAI,CAACG,SAAL,EAAgB;AAChB,cAAIG,MAAM,GAAGH,SAAS,CAACG,MAAvB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,gBAAIC,QAAQ,GAAGL,SAAS,CAACI,CAAD,CAAxB;;AACA,gBAAIC,QAAQ,CAACC,MAAT,CAAgBP,OAAhB,CAAJ,EAA8B;AAC1BC,cAAAA,SAAS,CAACO,MAAV,CAAiBH,CAAjB,EAAoB,CAApB;AACA;AACH;AACJ;;AACD,cAAIJ,SAAS,CAACG,MAAV,IAAoB,CAAxB,EAA2B;AACvB,mBAAO,KAAKV,SAAL,CAAeI,IAAf,CAAP;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACWW,QAAAA,uBAAuB,CAACT,OAAD,EAAe;AACzC,cAAIU,UAAU,GAAG,EAAjB;;AACA,eAAK,IAAIC,KAAT,IAAkB,KAAKjB,SAAvB,EAAkC;AAC9B,gBAAIkB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKrB,SAA1C,EAAqDiB,KAArD,CAAJ,EAAiE;AAC7D,kBAAIV,SAAqB,GAAG,KAAKP,SAAL,CAAeiB,KAAf,CAA5B;;AACA,kBAAIV,SAAJ,EAAe;AACX,qBAAK,IAAII,CAAC,GAAGD,MAAM,GAAG,CAAtB,EAAyBC,CAAC,IAAI,CAA9B,EAAiCA,CAAC,EAAlC,EAAsC;AAClC,sBAAIC,QAAQ,GAAGL,SAAS,CAACI,CAAD,CAAxB;;AACA,sBAAIC,QAAQ,CAACC,MAAT,CAAgBP,OAAhB,CAAJ,EAA8B;AAC1BC,oBAAAA,SAAS,CAACO,MAAV,CAAiBH,CAAjB,EAAoB,CAApB;AACA;AACH;AACJ;AACJ;;AAAA;;AACD,kBAAIJ,SAAS,CAACG,MAAV,IAAoB,CAAxB,EAA2B;AACvBM,gBAAAA,UAAU,CAACR,IAAX,CAAgBS,KAAhB;AACH;;AAAA;AACJ;AACJ;;AACD,eAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACN,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC,gBAAI,KAAKX,SAAL,CAAegB,UAAU,CAACL,CAAD,CAAzB,CAAJ,EAAmC;AAC/B,qBAAO,KAAKX,SAAL,CAAegB,UAAU,CAACL,CAAD,CAAzB,CAAP;AACH;;AAAA;AACJ;;AAAA;AAEJ;AAGD;AACJ;AACA;AACA;;;AACWW,QAAAA,QAAQ,CAACL,KAAD,EAAgB,GAAGM,IAAnB,EAAgC;AAC3C;AACA,cAAIhB,SAAqB,GAAG,KAAKP,SAAL,CAAeiB,KAAf,CAA5B;AACA,cAAI,CAACV,SAAL,EAAgB;AAChB,cAAIG,MAAM,GAAGH,SAAS,CAACG,MAAvB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,gBAAIC,QAAQ,GAAGL,SAAS,CAACI,CAAD,CAAxB;AACAC,YAAAA,QAAQ,CAACY,MAAT,CAAgBP,KAAhB,EAAuB,GAAGM,IAA1B;AACH;AACJ;;AA7FsB,O;AAgG3B;AACA;AACA;;;AAlGazB,MAAAA,a,CAIMI,S,GAAY,I;AA+FzBH,MAAAA,Q,GAAN,MAAMA,QAAN,CAAe;AACX;;AAEA;AAGA0B,QAAAA,WAAW,CAACpB,QAAD,EAAqBC,OAArB,EAAmC;AAAA,eAJtCD,QAIsC,GAJjB,IAIiB;AAAA,eAFtCC,OAEsC,GAFvB,IAEuB;AAC1C,cAAIoB,IAAI,GAAG,IAAX;AACAA,UAAAA,IAAI,CAACrB,QAAL,GAAgBA,QAAhB;AACAqB,UAAAA,IAAI,CAACpB,OAAL,GAAeA,OAAf;AACH;AAED;AACJ;AACA;AACA;;;AACIkB,QAAAA,MAAM,CAAC,GAAGD,IAAJ,EAAuB;AACzB,cAAIG,IAAI,GAAG,IAAX;AACAA,UAAAA,IAAI,CAACrB,QAAL,CAAcgB,IAAd,CAAmBK,IAAI,CAACpB,OAAxB,EAAiC,GAAGiB,IAApC;AACH;AAED;AACJ;AACA;AACA;;;AACIV,QAAAA,MAAM,CAACP,OAAD,EAAwB;AAC1B,iBAAOA,OAAO,IAAI,KAAKA,OAAvB;AACH;;AA3BU,O;;8BA8BFqB,Y,GAAe7B,aAAa,CAACG,Q","sourcesContent":["/**\n * Name = _EventManager \n * URL = db://assets/framework/manager/_EventManager.ts\n * Time = Wed Apr 06 2022 10:47:07 GMT+0800 (中国标准时间)\n * Author = xueya\n * 事件消息处理\n */\n\nexport class _EventManager {\n    /** 监听数组 */\n    private listeners: { [key: string]: Array<Observer> } = {};\n\n    private static _instance = null;\n    public static get instance(): _EventManager {\n        if (!this._instance || this._instance == null) {\n            this._instance = new _EventManager();\n        }\n        return this._instance;\n    }\n\n    /** \n     * 注册事件 每一个事件对应n个上下文\n     * @param name 事件名称\n     * @param callback 回调函数\n     * @param context 上下文 可空\n     */\n    public addListener(name: string, callback: Function, context?: any) {\n        let observers: Observer[] = this.listeners[name];\n        if (!observers) {\n            this.listeners[name] = [];\n        }\n        this.listeners[name].push(new Observer(callback, context));\n    }\n\n    /**\n     * 移除事件\n     * @param name 事件名称\n     * @param callback 回调函数\n     * @param context 上下文\n     */\n    public removeListener(name: string, context: any) {\n        let observers: Observer[] = this.listeners[name];\n        if (!observers) return;\n        let length = observers.length;\n        for (let i = 0; i < length; i++) {\n            let observer = observers[i];\n            if (observer.compar(context)) {\n                observers.splice(i, 1);\n                break;\n            }\n        }\n        if (observers.length == 0) {\n            delete this.listeners[name];\n        }\n    }\n    /**\n     * 根据上下文移除所有事件\n     * @param context \n     * @returns \n     */\n    public removeListenerByContext(context: any) {\n        let deleteList = [];\n        for (let event in this.listeners) {\n            if (Object.prototype.hasOwnProperty.call(this.listeners, event)) {\n                let observers: Observer[] = this.listeners[event];\n                if (observers) {\n                    for (let i = length - 1; i >= 0; i--) {\n                        let observer = observers[i];\n                        if (observer.compar(context)) {\n                            observers.splice(i, 1);\n                            break;\n                        }\n                    }\n                };\n                if (observers.length == 0) {\n                    deleteList.push(event);\n                };\n            }\n        }\n        for (let i = 0; i < deleteList.length; i++) {\n            if (this.listeners[deleteList[i]]) {\n                delete this.listeners[deleteList[i]];\n            };\n        };\n\n    }\n\n\n    /**\n     * 分发事件\n     * @param event 事件名称\n     */\n    public dispatch(event: string, ...args: any[]) {\n        /**获取该事件相关的所有上下文 */\n        let observers: Observer[] = this.listeners[event];\n        if (!observers) return;\n        let length = observers.length;\n        for (let i = 0; i < length; i++) {\n            let observer = observers[i];\n            observer.notify(event, ...args);\n        }\n    }\n}\n\n/**\n * 观察者\n */\nclass Observer {\n    /** 回调函数 */\n    private callback: Function = null;\n    /** 上下文 */\n    private context: any = null;\n\n    constructor(callback: Function, context: any) {\n        let self = this;\n        self.callback = callback;\n        self.context = context;\n    }\n\n    /**\n     * 发送通知\n     * @param args 不定参数\n     */\n    notify(...args: any[]): void {\n        let self = this;\n        self.callback.call(self.context, ...args);\n    }\n\n    /**\n     * 上下文比较\n     * @param context 上下文\n     */\n    compar(context: any): boolean {\n        return context == this.context;\n    }\n}\n\nexport const EventManager = _EventManager.instance\n"]}