{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/network/NetInterface.ts"],"names":["DefStringProtocol","PacketSize","getHeadlen","getHearbeatPackage","getPackageLen","msg","toString","length","checkRequestPackage","checkResponsePackage","handlerResponsePackage","handlerRequestPackage","reqProtocol","isLittleEndian"],"mappings":";;;iBAmGaA,iB;;;;;;;;;;;;;AADb;mCACaA,iB,GAAN,MAAMA,iBAAN,CAAmD;AAAA;AAAA,eACtDC,UADsD,GACjC,CADiC;AAAA;;AAGtDC,QAAAA,UAAU,GAAW;AACjB,iBAAO,CAAP;AACH;;AACDC,QAAAA,kBAAkB,GAA4B;AAC1C,iBAAO,IAAP;AACH;;AACDC,QAAAA,aAAa,CAACC,GAAD,EAAuB;AAChC,iBAAOA,GAAG,CAACC,QAAJ,GAAeC,MAAtB;AACH;;AACDC,QAAAA,mBAAmB,CAACH,GAAD,EAAwB;AACvC,iBAAO,IAAP;AACH;;AACDI,QAAAA,oBAAoB,CAACJ,GAAD,EAAwB;AACxC,iBAAO,IAAP;AACH;;AAEDK,QAAAA,sBAAsB,CAACL,GAAD,EAAyC;AAC3D,iBAAO,IAAP;AACH;;AAEDM,QAAAA,qBAAqB,CAACC,WAAD,EAAyC;AAC1D,iBAAO,IAAP;AACH;;AAEDC,QAAAA,cAAc,GAAY;AACtB,iBAAO,KAAP;AACH;;AA7BqD,O","sourcesContent":["\n/*\n * 网络相关接口定义\n */\nexport type NetData = (string | ArrayBufferLike | Blob | ArrayBufferView);\nexport type NetCallFunc = (data: any) => void;\n\n/** socket消息数据接口 */\nexport interface INetMessage {\n    cmd: any;\n    body?: any;\n    timeout?: number;\n    isStream?: boolean;\n    host?: string;\n    /** 用于做标识 resp会传递回来 */\n    code?: any;\n\n}\n\n/** php消息数据接口 */\nexport interface INetPHPMessage {\n    cmd?: number,\n    mid?: any,\n    compressType?: number, //1 压缩 0未压缩\n    body?: any             //处理之后的数据\n}\n\n/** 命令通用绑定接口 */\nexport interface ICMD_BINDING_HEAD {\n    /** 请求头 */\n    reqHead: number;\n    /** 响应头 */\n    respHead: number;\n    /** 动作名 */\n    action: string;\n    /** 返回时绑定的事件 */\n    respEvent?: string;\n    /** 读还是写 只有头部命令有 0读 1写*/\n    pbType?: number;\n    /** 解析函数 只有头部命令有 */\n    pbFunc?: Function;\n}\n\n/** 请求协议 */\nexport interface IRequestProtocol {\n    /**头部命令 */\n    headCmd: number;\n    /** 动作名 */\n    action?: string;\n    /** 回调方法名 */\n    callback?: string;\n    /** 是否压缩 */\n    isCompress?: boolean;\n    /** 消息内容 */\n    data?: any;\n    /** 加密成的buffer data */\n    buffer?: any;\n    /**超时时间 毫秒*/\n    outtime?: number;\n}\n\n/** 服务端下发的相应协议 */\nexport interface IResponseProtocol {\n    /**头部命令 */\n    headCmd: number;\n    /** 动作名 */\n    action?: string;\n    /** 消息内容 */\n    data?: any;\n    /** 加密成的buffer data 服务端下发*/\n    buffer: NetData;\n    /** 请求的原数据 */\n    reqData?: any;\n}\n\n/** 回调对象 */\nexport interface CallbackObject {\n    target: any;                // 回调对象，不为null时调用target.callback(xxx)\n    callback: NetCallFunc;      // 回调函数\n}\n\n/** 请求对象 */\nexport interface RequestObject {\n    reqArray: IRequestProtocol;                   // 请求的数据队列\n}\n\n/** 协议辅助接口 */\nexport interface IProtocolHelper {\n    PacketSize: number;                                                 //最大包长                        \n    getHeadlen(): number;                                               // 返回包头长度\n    getHearbeatPackage(): IRequestProtocol | null;                      // 返回一个心跳包\n    getPackageLen(msg: NetData): number;                                // 返回整个包的长度\n    checkRequestPackage(msg: NetData): boolean;                         // 检查请求包数据是否合法（避免客户端报错崩溃）\n    checkResponsePackage(msg: NetData): boolean;                        // 检查响应包数据是否合法（避免客户端报错崩溃）\n    handlerRequestPackage(reqProtocol: IRequestProtocol): boolean;      // 处理请求包数据\n    handlerResponsePackage(msg: NetData): IResponseProtocol | null;     // 处理响应包数据\n}\n\n/** 默认字符串协议对象 */\nexport class DefStringProtocol implements IProtocolHelper {\n    PacketSize: number = 0;\n\n    getHeadlen(): number {\n        return 0;\n    }\n    getHearbeatPackage(): IRequestProtocol | null {\n        return null;\n    }\n    getPackageLen(msg: NetData): number {\n        return msg.toString().length;\n    }\n    checkRequestPackage(msg: NetData): boolean {\n        return true;\n    }\n    checkResponsePackage(msg: NetData): boolean {\n        return true;\n    }\n\n    handlerResponsePackage(msg: NetData): IResponseProtocol | null {\n        return null\n    }\n\n    handlerRequestPackage(reqProtocol: IRequestProtocol): boolean {\n        return true;\n    }\n\n    isLittleEndian(): boolean {\n        return false;\n    }\n}\n\nexport type SocketFunc = (event: any) => void;\nexport type MessageFunc = (msg: NetData) => void;\n\n\n/** 网络提示接口 */\nexport interface INetworkTips {\n    connectTips(isShow: boolean): void;\n    reconnectTips(isShow: boolean): void;\n    requestTips(isShow: boolean): void;\n    responseErrorCode(code: number): void;\n}"]}