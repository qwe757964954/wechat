{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/proj/servers/ReportServers.ts"],"names":["ReportServers","AppEvent","BaseControll","_maxSize","_tempClientClickList","_lastReportTime","_reportTimeSpance","_handlerHttpReport","getInstance","_instance","updateLoggerReportInfo","init","clear","onInitModuleEvent","addModelListener","REPORT_CLIENT_CLICK","reqReportClick","event","param"],"mappings":";;;sDAaaA,a;;;;;;;;;;;;;;;;;;;;;;;;;;AALJC,MAAAA,Q,iBAAAA,Q;;AAGAC,MAAAA,Y,iBAAAA,Y;;;;;;;+BAEIF,a,GAAN,MAAMA,aAAN;AAAA;AAAA,wCAAyC;AAAA;AAAA;AAAA,eAmBpCG,QAnBoC,GAmBzB,EAnByB;AAAA,eAqBpCC,oBArBoC,GAqBb,EArBa;AAAA,eAuBpCC,eAvBoC,GAuBlB,CAvBkB;AAAA,eAyBpCC,iBAzBoC;AAAA,eA2BpCC,kBA3BoC,GA2BF,IA3BE;AAAA;;AAEnB,eAAXC,WAAW,GAAkB;AACvC,cAAI,CAAC,KAAKC,SAAN,IAAmB,KAAKA,SAAL,IAAkB,IAAzC,EAA+C;AAC3C,iBAAKA,SAAL,GAAiB,IAAIT,aAAJ,CAAkB,eAAlB,CAAjB;AACH;;AACD,eAAKS,SAAL,CAAeC,sBAAf;;AACA,iBAAO,KAAKD,SAAZ;AACH;;AACiB,eAAJE,IAAI,GAAkB;AAChC,cAAI,KAAKF,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAeG,KAAf;AACH;;AACD,eAAKH,SAAL,GAAiB,IAAjB;AACAT,UAAAA,aAAa,CAACQ,WAAd;AACA;AACH;AAED;;;AAWA;AACUK,QAAAA,iBAAiB,GAAS;AAChC;AACA;AACA;AACA;AAEA;AACA,eAAKC,gBAAL,CAAsB;AAAA;AAAA,oCAASC,mBAA/B,EAAoD,KAAKC,cAAzD,EAPgC,CAQhC;AACA;AACA;AACA;AACH,SA1C2C,CA4C5C;;;AACAN,QAAAA,sBAAsB,GAAG,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACD;;;AACAM,QAAAA,cAAc,CAACC,KAAD,EAAQC,KAAR,EAAgC,CAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH,SAzE2C,CA0E5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;AA9K4C,O;;AAAnClB,MAAAA,a,CACMS,S,GAAY,I","sourcesContent":["/**\n * Name = ReportServers\n * URL = db://assets/proj/servers/servers/ReportServers.ts\n * Time = Wed Aug 24 2022 11:45:42 GMT+0800 (中国标准时间)\n * Author = xueya\n * Client 数据上报控制器\n */\n\nimport { AppEvent } from \"../../config/AppEvent\";\nimport { inf_ClickReport } from \"../../framework/InterfaceDefines\";\nimport { HttpRequest } from \"../../framework/network/HttpRequest\";\nimport { BaseControll } from \"../../framework/vc/BaseController\";\n\nexport class ReportServers extends BaseControll {\n    private static _instance = null;\n    public static getInstance(): ReportServers {\n        if (!this._instance || this._instance == null) {\n            this._instance = new ReportServers(\"ReportServers\");\n        }\n        this._instance.updateLoggerReportInfo();\n        return this._instance;\n    }\n    public static init(): ReportServers {\n        if (this._instance) {\n            this._instance.clear()\n        }\n        this._instance = null\n        ReportServers.getInstance()\n        return\n    }\n\n    /** 一次最多条 */\n    private _maxSize = 50;\n    /** 客户端点击上报队列 */\n    private _tempClientClickList = [];\n    /** 上次提交得时间 毫秒*/\n    private _lastReportTime = 0;\n    /** 上报的时间间隔 毫秒*/\n    private _reportTimeSpance: 30000;\n    /** 上报的Http类 */\n    private _handlerHttpReport: HttpRequest = null;\n\n    /**初始化添加事件绑定 */\n    protected onInitModuleEvent(): void {\n        // //登录状态改变(更新客户端数据上报的信息)\n        // this.addModelListener(AppEvent.LOGIN_STATE_CHANGE, this.updateLoggerReportInfo)\n        // //更新客户端数据上报的信息\n        // this.addModelListener(AppEvent.REPORT_UPDATE_LOGGER_REPORT_INFO, this.updateLoggerReportInfo);\n\n        //客户端点击事件\n        this.addModelListener(AppEvent.REPORT_CLIENT_CLICK, this.reqReportClick);\n        // //上报支付订单\n        // this.addModelListener(AppEvent.NET_REQ_REPORT_PAY_ORDER, this.reqReportPayOrder);\n        // //支付订单上报回调\n        // this.addModelListener(AppEvent.NET_FORWARD_REPORT_PAY_ORDER, this.respReportPayOrder);\n    }\n\n    // /** 更新数据上报的基础信息 */\n    updateLoggerReportInfo() {\n        // let uid = null;\n        // let platform = Platform.ClientPlatform;\n        // let sdkVersion = Platform.SDKVersion;\n        // if (GCache && GCache.User) {\n        // \tuid = GCache.User.getUserMid();\n        // }\n        // let info = `[HallVer:${ClientInfo.HallVer},Uid:${uid}]`;\n        // Logger.ReportConf.BaseInfo = info;\n    }\n    /** 请求客户端点击上报 */\n    reqReportClick(event, param: inf_ClickReport) {\n        // \tif (Utils.table_isEmpty(param) == true) {\n        // \t\treturn;\n        // \t}\n        // \tif (param.eventID == null || Number(param.eventID) == NaN) {\n        // \t\treturn;\n        // \t}\n        // \tlet actionID = Number(param.eventID);\n        // \tlet item = this.__genPackageBody(actionID, param.body);\n        // \t// item[\"_index_\"] = Utils.timeEx();\n\n        // \tthis._tempClientClickList.push(item);\n        // \tif (this.__checkCanReport(param[\"isFouce\"]) == false) {\n        // \t\treturn;\n        // \t}\n        // \t//开始上报\n        // \tthis.__startReport();\n    }\n    // /** 执行上报 */\n    // private __startReport() {\n    // \tlet max = (this._tempClientClickList.length >= this._maxSize ? this._maxSize : this._tempClientClickList.length);\n    // \tlet tempList = this._tempClientClickList.slice(0, max);\n    // \tif (tempList.length <= 0) {\n    // \t\treturn;\n    // \t}\n    // \tthis.print(\"开始上报==>\", tempList)\n    // \tlet hostUrl = GameConfig.instance.AppUrlConf.Web;\n\n    // \tif (!this._handlerHttpReport) {\n    // \t\tthis._handlerHttpReport = new HttpRequest();\n    // \t} else {\n    // \t\tthis._handlerHttpReport.abort();\n    // \t}\n    // \tthis._handlerHttpReport.server = hostUrl;\n    // \tthis._handlerHttpReport.timeout = 5000;\n    // \tthis.print(\"开始上报客户端点击事件:\", tempList);\n\n    // \tlet body = {\n    // \t\tevt_list: tempList,\n    // \t\tchannel: ClientInfo.ChannelId,\n    // \t\tuid: GCache.User.getUserMid(),\n    // \t}\n    // \tlet packageConf = GCmdMapping.getReqPacketByEvent(AppEvent.NET_CMD_REQ_ClIENT_REPORT);\n    // \tif (!packageConf) {\n    // \t\tthis.print(`__startReport 未找到相关映射 eventCode = ${AppEvent.NET_CMD_REQ_ClIENT_REPORT}`);\n    // \t\treturn;\n    // \t}\n    // \tthis.print(\"当前映射:\", packageConf)\n    // \tlet newBody: ArrayBuffer = GPBAdaptive.instance.encodePacket(body, packageConf.packageID, packageConf.funcName);\n\n    // \tif (!newBody) {\n    // \t\tthis.print(`__startReport 初次包装的数据结构体为空 解析函数为 = ${packageConf.funcName}`);\n    // \t\treturn;\n    // \t}\n\n    // \tlet byteBuffer = pbkiller.ByteBuffer.wrap(newBody); //body.toString(\"binary\")// Encrypt.arrayBufferToString(_body, true);\n    // \tlet str = byteBuffer.toString(\"base64\");\n    // \tlet reqParam = {\n    // \t\trpcName: packageConf.rpcName,\n    // \t\tparam: str\n    // \t}\n    // \tlet content = Encrypt.JsonEncode(reqParam);\n    // \tthis.print(\"请求的数据===>\", reqParam,)\n\n    // \tlet self = this;\n    // \tthis._handlerHttpReport.post(hostUrl, content, (respData) => {\n    // \t\tlet res = Encrypt.JsonDecode(respData);\n    // \t\tconsole.log(\"返回成功的数据：\", res);\n    // \t\tif (res && res[\"code\"] == 0) {\n    // \t\t\tif (self._tempClientClickList.length >= max) {\n    // \t\t\t\tself._tempClientClickList.splice(0, max);\n    // \t\t\t}\n    // \t\t\tself._lastReportTime = Utils.timeEx();\n    // \t\t}\n    // \t}, (respData) => {\n    // \t\tconsole.log(\"返回失败的数据：\", respData);\n    // \t})\n\n    // }\n    // /** 检查是否可以上报 */\n    // private __checkCanReport(isFouce: boolean = false) {\n    // \t//空数据、网络异常时不上报\n    // \tif (this._tempClientClickList.length == 0 || Network.instance.state != NetworkState.ONLINE) {\n    // \t\treturn false;\n    // \t}\n    // \t// 非强制上报时数据不足\n    // \tif (isFouce == false && this._tempClientClickList.length < this._maxSize) {\n    // \t\treturn false;\n    // \t}\n    // \tif (this._lastReportTime != 0 && (Utils.timeEx() - this._lastReportTime) < this._reportTimeSpance) {\n    // \t\treturn false;\n    // \t}\n    // \treturn true;\n    // }\n\n    // /** 包装数据 */\n    // private __genPackageBody(eventID, param = null) {\n    // \tlet body = {\n    // \t\tact_id: eventID,\n    // \t\tlts_at: Utils.time(),\n    // \t};\n    // \tif (Utils.table_isEmpty(param) == false) {\n    // \t\t// --渗透参数\n    // \t\tbody[\"gsubname\"] = Encrypt.JsonEncode(param);\n    // \t}\n    // \treturn body;\n    // }\n    // /** 支付订单上报 */\n    // reqReportPayOrder(event, reportOrderData) {\n    // \tthis.print(\"支付订单上报==>\", reportOrderData)\n\n    // }\n\n    // /** 支付订单上报回调 */\n    // respReportPayOrder(event, isSuccess, respData, reqData) {\n    // \tthis.print(\"支付订单上报回调==>\" + isSuccess);\n    // \tthis.dump(respData);\n\n    // }\n\n\n}\n\n"]}