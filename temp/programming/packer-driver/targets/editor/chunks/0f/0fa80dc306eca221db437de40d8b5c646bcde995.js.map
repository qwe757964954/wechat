{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/package/game/cache/OperationMgr.ts"],"names":["OperationMgr","BaseCache","OPCode","MajiangUtil","CardUtil","PlayerMgr","constructor","name","seatId","userId","myOpCode","cardSeatId","cardUserId","opGroups","tingInfos","extendInfo","outCardList","getInstance","instance","getPassNumber","num","forEach","opInfo","opCode","OPE_PASS","cardsList","cards","getHuNumber","OPE_HU","OPE_ZI_MO","getOprationListNumber","index","list","isMoreOpration","isMore","length","getOprationCardList","cardList","getSendCardListNumber","OPE_OUT_CARD","updateMyselfOpration","resp","getOutCardList","element","push","sortFeiXiaoJiCards","getDrawCardList","cloneList","slice","deleteHasInList","getMyhands","getMyHandCardResult","updateMyhands","getIndexByCards","insertCard","chiUpdateOutCardList","console","log","getSendCardIndex","byte","findIndex","item","clear"],"mappings":"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","sourcesContent":["import { BaseCache } from \"../../../framework/vc/BaseCache\";\nimport { OPCode } from \"../common/FXJConfig\";\nimport { Common } from \"../common/idl/Common\";\nimport { Game } from \"../common/idl/Game\";\nimport { MajiangUtil } from \"../common/MajiangUtil\";\nimport { CardUtil } from \"../util/CardUtil\";\nimport { PlayerMgr } from \"./PlayerMgr\";\n\nexport class OperationMgr extends BaseCache {\n    public seatId: number = 0;\n    public userId: number = 0;\n    public myOpCode: number = 0;\n    public cardSeatId: number = 0;\n    public cardUserId: number = 0;\n    public opGroups: Common.IOpGroup[] = null;\n    public tingInfos: Common.ITingInfo[] = null;\n    public extendInfo: string = \"\";\n    public outCardList: number[] = [];\n    private static instance: OperationMgr | null = null;\n    constructor(name = \"\") {\n\t\tsuper(name);\n\t};\n    public static getInstance(): OperationMgr {\n        if (!OperationMgr.instance) {\n            OperationMgr.instance = new OperationMgr();\n        }\n        return OperationMgr.instance;\n    }\n    \n    // public findCardListWithOpcode( opCode: number):number {\n    //     this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n    //         if(opInfo.opCode === opCode){\n    //             return opInfo.cardsList[];\n    //         }\n    //     });\n\t// }\n\n    public getPassNumber():number{\n        let num:number = 0;\n        this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n            if(opInfo.opCode === OPCode.OPE_PASS){\n                num = opInfo.cardsList[0].cards[0];\n            }\n        });\n        return num;\n    }\n\n    public getHuNumber():number{\n        let num:number = 0;\n        this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n            if(opInfo.opCode === OPCode.OPE_HU){\n                num = opInfo.cardsList[0].cards[0];\n            }else if(opInfo.opCode === OPCode.OPE_ZI_MO){\n                num = opInfo.cardsList[0].cards[0];\n            }\n        });\n        return num;\n    }\n    \n\n    public getOprationListNumber(opCode?:number,index?:number):number[]{\n        let list:number[] = []\n        this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n            if(opInfo.opCode === opCode){\n                list = opInfo.cardsList[index].cards;\n            }\n        });\n        return list;\n    }\n    \n    public isMoreOpration(opCode?:number):boolean{\n        let isMore = false;\n        this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n            if(opInfo.opCode === opCode){\n                isMore = opInfo.cardsList.length > 1;\n            }\n        });\n        return isMore\n    }\n    \n    public getOprationCardList(opCode?:number):Common.ICards[]{\n        let cardList:Common.ICards[] = []\n        this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n            if(opInfo.opCode === opCode){\n                cardList = opInfo.cardsList;\n            }\n        });\n        return cardList;\n    }\n\n    public getSendCardListNumber(index:number):number[]{\n        let list:number[] = []\n        this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n            if(opInfo.opCode === OPCode.OPE_OUT_CARD){\n                list = opInfo.cardsList[index].cards;\n            }\n        });\n        return list;\n    }\n\n    updateMyselfOpration(resp:Game.IOperation):void{\n        this.seatId = resp.seatId;\n        this.userId = resp.userId;\n        this.cardSeatId = resp.cardSeatId;\n        this.cardUserId = resp.cardUserId;\n        this.opGroups = resp.opGroups;\n        this.tingInfos = resp.tingInfos;\n        this.extendInfo = resp.extendInfo;\n        this.getOutCardList();\n\t}\n\n    getOutCardList(){\n        this.outCardList = [];\n        this.opGroups.forEach((opInfo:Common.IOpGroup) => {\n            if(opInfo.opCode === OPCode.OPE_OUT_CARD){\n                opInfo.cardsList.forEach((element) => {\n                    this.outCardList.push(element.cards[0]);\n                });\n            }\n        });\n        this.outCardList = CardUtil.sortFeiXiaoJiCards(this.outCardList);\n    }\n\n    getDrawCardList(): number[]{\n        const cloneList = this.outCardList.slice();\n        if(cloneList.length == 0) {\n            return [];\n        }\n        MajiangUtil.deleteHasInList(cloneList,PlayerMgr.getInstance().getMyhands());\n        return cloneList;\n    }\n\n    getMyHandCardResult(list:number[]){\n        const cloneList = this.outCardList.slice();\n        MajiangUtil.deleteHasInList(cloneList,list);\n        PlayerMgr.getInstance().updateMyhands(cloneList);\n    }\n\n    getIndexByCards(insertCard: number): number {\n        let cards = [...this.outCardList];\n        cards = CardUtil.sortFeiXiaoJiCards(cards);\n        for (let index = 0; index < cards.length; index++) {\n            if (cards[index] == insertCard) {\n                return index\n            }\n        }\n        return 0;\n    }\n\n    chiUpdateOutCardList(list:number[]){\n        this.outCardList = list.slice();\n        console.log(\"chiUpdateOutCardList_____________________\",list);\n    }\n\n    getSendCardIndex(byte:number):number{\n        const index = this.outCardList.findIndex(item => item === byte);\n        return index;\n    }\n\n    //清理房间数据\n\tpublic clear(): void {\n\t\t// this.bankerInfo = null;\n\t}\n}"]}