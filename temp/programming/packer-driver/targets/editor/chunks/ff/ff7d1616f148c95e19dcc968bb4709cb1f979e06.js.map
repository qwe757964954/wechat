{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/proj/servers/ReportServers.ts"],"names":["ReportServers","BaseControll","_maxSize","_tempClientClickList","_lastReportTime","_reportTimeSpance","_handlerHttpReport","getInstance","_instance","updateLoggerReportInfo","init","clear","onInitModuleEvent"],"mappings":";;;4CAWaA,a;;;;;;;;;;;;;;;;;;AAFJC,MAAAA,Y,iBAAAA,Y;;;;;;;+BAEID,a,GAAN,MAAMA,aAAN;AAAA;AAAA,wCAAyC;AAAA;AAAA;AAAA,eAmBvCE,QAnBuC,GAmB5B,EAnB4B;AAAA,eAqBvCC,oBArBuC,GAqBhB,EArBgB;AAAA,eAuBvCC,eAvBuC,GAuBrB,CAvBqB;AAAA,eAyBvCC,iBAzBuC;AAAA,eA2BvCC,kBA3BuC,GA2BL,IA3BK;AAAA;;AAEtB,eAAXC,WAAW,GAAkB;AAC1C,cAAI,CAAC,KAAKC,SAAN,IAAmB,KAAKA,SAAL,IAAkB,IAAzC,EAA+C;AAC9C,iBAAKA,SAAL,GAAiB,IAAIR,aAAJ,CAAkB,eAAlB,CAAjB;AACA;;AACD,eAAKQ,SAAL,CAAeC,sBAAf;;AACA,iBAAO,KAAKD,SAAZ;AACA;;AACiB,eAAJE,IAAI,GAAkB;AACnC,cAAI,KAAKF,SAAT,EAAoB;AACnB,iBAAKA,SAAL,CAAeG,KAAf;AACA;;AACD,eAAKH,SAAL,GAAiB,IAAjB;AACAR,UAAAA,aAAa,CAACO,WAAd;AACA;AACA;AAED;;;AAWA;AACUK,QAAAA,iBAAiB,GAAS,CACnC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SA1C8C,CA4C/C;;;AACAH,QAAAA,sBAAsB,GAAG,CACxnCT,MAAAA,a,CACGQ,S,GAAY,I","sourcesContent":["/**\n * Name = ReportServers\n * URL = db://assets/proj/servers/servers/ReportServers.ts\n * Time = Wed Aug 24 2022 11:45:42 GMT+0800 (中国标准时间)\n * Author = xueya\n * Client 数据上报控制器\n */\n\nimport { HttpRequest } from \"../../framework/network/HttpRequest\";\nimport { BaseControll } from \"../../framework/vc/BaseController\";\n\nexport class ReportServers extends BaseControll {\n\tprivate static _instance = null;\n\tpublic static getInstance(): ReportServers {\n\t\tif (!this._instance || this._instance == null) {\n\t\t\tthis._instance = new ReportServers(\"ReportServers\");\n\t\t}\n\t\tthis._instance.updateLoggerReportInfo();\n\t\treturn this._instance;\n\t}\n\tpublic static init(): ReportServers {\n\t\tif (this._instance) {\n\t\t\tthis._instance.clear()\n\t\t}\n\t\tthis._instance = null\n\t\tReportServers.getInstance()\n\t\treturn\n\t}\n\n\t/** 一次最多条 */\n\tprivate _maxSize = 50;\n\t/** 客户端点击上报队列 */\n\tprivate _tempClientClickList = [];\n\t/** 上次提交得时间 毫秒*/\n\tprivate _lastReportTime = 0;\n\t/** 上报的时间间隔 毫秒*/\n\tprivate _reportTimeSpance: 30000;\n\t/** 上报的Http类 */\n\tprivate _handlerHttpReport: HttpRequest = null;\n\n\t/**初始化添加事件绑定 */\n\tprotected onInitModuleEvent(): void {\n\t\t// //登录状态改变(更新客户端数据上报的信息)\n\t\t// this.addModelListener(AppEvent.LOGIN_STATE_CHANGE, this.updateLoggerReportInfo)\n\t\t// //更新客户端数据上报的信息\n\t\t// this.addModelListener(AppEvent.REPORT_UPDATE_LOGGER_REPORT_INFO, this.updateLoggerReportInfo);\n\n\t\t// //客户端点击事件\n\t\t// this.addModelListener(AppEvent.REPORT_CLIENT_CLICK, this.reqReportClick);\n\t\t// //上报支付订单\n\t\t// this.addModelListener(AppEvent.NET_REQ_REPORT_PAY_ORDER, this.reqReportPayOrder);\n\t\t// //支付订单上报回调\n\t\t// this.addModelListener(AppEvent.NET_FORWARD_REPORT_PAY_ORDER, this.respReportPayOrder);\n\t}\n\n\t// /** 更新数据上报的基础信息 */\n\tupdateLoggerReportInfo() {\n\t\t// let uid = null;\n\t\t// let platform = Platform.ClientPlatform;\n\t\t// let sdkVersion = Platform.SDKVersion;\n\t\t// if (GCache && GCache.User) {\n\t\t// \tuid = GCache.User.getUserMid();\n\t\t// }\n\t\t// let info = `[HallVer:${ClientInfo.HallVer},Uid:${uid}]`;\n\t\t// Logger.ReportConf.BaseInfo = info;\n\t}\n\t/** 请求客户端点击上报 */\n\t// reqReportClick(event, param: inf_ClickReport) {\n\t// \tif (Utils.table_isEmpty(param) == true) {\n\t// \t\treturn;\n\t// \t}\n\t// \tif (param.eventID == null || Number(param.eventID) == NaN) {\n\t// \t\treturn;\n\t// \t}\n\t// \tlet actionID = Number(param.eventID);\n\t// \tlet item = this.__genPackageBody(actionID, param.body);\n\t// \t// item[\"_index_\"] = Utils.timeEx();\n\n\t// \tthis._tempClientClickList.push(item);\n\t// \tif (this.__checkCanReport(param[\"isFouce\"]) == false) {\n\t// \t\treturn;\n\t// \t}\n\t// \t//开始上报\n\t// \tthis.__startReport();\n\t// }\n\t// /** 执行上报 */\n\t// private __startReport() {\n\t// \tlet max = (this._tempClientClickList.length >= this._maxSize ? this._maxSize : this._tempClientClickList.length);\n\t// \tlet tempList = this._tempClientClickList.slice(0, max);\n\t// \tif (tempList.length <= 0) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis.print(\"开始上报==>\", tempList)\n\t// \tlet hostUrl = GameConfig.instance.AppUrlConf.Web;\n\n\t// \tif (!this._handlerHttpReport) {\n\t// \t\tthis._handlerHttpReport = new HttpRequest();\n\t// \t} else {\n\t// \t\tthis._handlerHttpReport.abort();\n\t// \t}\n\t// \tthis._handlerHttpReport.server = hostUrl;\n\t// \tthis._handlerHttpReport.timeout = 5000;\n\t// \tthis.print(\"开始上报客户端点击事件:\", tempList);\n\n\t// \tlet body = {\n\t// \t\tevt_list: tempList,\n\t// \t\tchannel: ClientInfo.ChannelId,\n\t// \t\tuid: GCache.User.getUserMid(),\n\t// \t}\n\t// \tlet packageConf = GCmdMapping.getReqPacketByEvent(AppEvent.NET_CMD_REQ_ClIENT_REPORT);\n\t// \tif (!packageConf) {\n\t// \t\tthis.print(`__startReport 未找到相关映射 eventCode = ${AppEvent.NET_CMD_REQ_ClIENT_REPORT}`);\n\t// \t\treturn;\n\t// \t}\n\t// \tthis.print(\"当前映射:\", packageConf)\n\t// \tlet newBody: ArrayBuffer = GPBAdaptive.instance.encodePacket(body, packageConf.packageID, packageConf.funcName);\n\n\t// \tif (!newBody) {\n\t// \t\tthis.print(`__startReport 初次包装的数据结构体为空 解析函数为 = ${packageConf.funcName}`);\n\t// \t\treturn;\n\t// \t}\n\n\t// \tlet byteBuffer = pbkiller.ByteBuffer.wrap(newBody); //body.toString(\"binary\")// Encrypt.arrayBufferToString(_body, true);\n\t// \tlet str = byteBuffer.toString(\"base64\");\n\t// \tlet reqParam = {\n\t// \t\trpcName: packageConf.rpcName,\n\t// \t\tparam: str\n\t// \t}\n\t// \tlet content = Encrypt.JsonEncode(reqParam);\n\t// \tthis.print(\"请求的数据===>\", reqParam,)\n\n\t// \tlet self = this;\n\t// \tthis._handlerHttpReport.post(hostUrl, content, (respData) => {\n\t// \t\tlet res = Encrypt.JsonDecode(respData);\n\t// \t\tconsole.log(\"返回成功的数据：\", res);\n\t// \t\tif (res && res[\"code\"] == 0) {\n\t// \t\t\tif (self._tempClientClickList.length >= max) {\n\t// \t\t\t\tself._tempClientClickList.splice(0, max);\n\t// \t\t\t}\n\t// \t\t\tself._lastReportTime = Utils.timeEx();\n\t// \t\t}\n\t// \t}, (respData) => {\n\t// \t\tconsole.log(\"返回失败的数据：\", respData);\n\t// \t})\n\n\t// }\n\t// /** 检查是否可以上报 */\n\t// private __checkCanReport(isFouce: boolean = false) {\n\t// \t//空数据、网络异常时不上报\n\t// \tif (this._tempClientClickList.length == 0 || Network.instance.state != NetworkState.ONLINE) {\n\t// \t\treturn false;\n\t// \t}\n\t// \t// 非强制上报时数据不足\n\t// \tif (isFouce == false && this._tempClientClickList.length < this._maxSize) {\n\t// \t\treturn false;\n\t// \t}\n\t// \tif (this._lastReportTime != 0 && (Utils.timeEx() - this._lastReportTime) < this._reportTimeSpance) {\n\t// \t\treturn false;\n\t// \t}\n\t// \treturn true;\n\t// }\n\n\t// /** 包装数据 */\n\t// private __genPackageBody(eventID, param = null) {\n\t// \tlet body = {\n\t// \t\tact_id: eventID,\n\t// \t\tlts_at: Utils.time(),\n\t// \t};\n\t// \tif (Utils.table_isEmpty(param) == false) {\n\t// \t\t// --渗透参数\n\t// \t\tbody[\"gsubname\"] = Encrypt.JsonEncode(param);\n\t// \t}\n\t// \treturn body;\n\t// }\n\t// /** 支付订单上报 */\n\t// reqReportPayOrder(event, reportOrderData) {\n\t// \tthis.print(\"支付订单上报==>\", reportOrderData)\n\n\t// }\n\n\t// /** 支付订单上报回调 */\n\t// respReportPayOrder(event, isSuccess, respData, reqData) {\n\t// \tthis.print(\"支付订单上报回调==>\" + isSuccess);\n\t// \tthis.dump(respData);\n\n\t// }\n\n\n}\n\n"]}