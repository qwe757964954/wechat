{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/network/HttpRequest.ts"],"names":["HttpRequest","error","warn","GameConfig","urls","reqparams","HttpEvent","ResponseType","server","timeout","get","urlStr","successCallback","errorCallback","sendRequest","getWithParams","params","getByArraybuffer","getWithParamsByArraybuffer","post","responseType","abort","url","toLocaleLowerCase","indexOf","xhr","getParamString","result","data","Object","key","substr","length","isPost","isOpenTimeout","newUrl","paramsStr","XMLHttpRequest","reqData","JSON","stringify","open","replaceUrl","setRequestHeader","isCallback","callbackFunc","event","respData","ontimeout","a","deleteCache","TIMEOUT","onloadend","status","NO_NETWORK","onerror","readyState","UNKNOWN_ERROR","onreadystatechange","ArrayBuffer","buffer","response","bufferData","Uint8Array","Json","parse","console","send","instance","isOnlineServer","String","replace"],"mappings":"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","sourcesContent":["/**\n * Name = HttpRequest\n * URL = db://assets/framework/network/HttpRequest.ts\n * Time = Thu Apr 07 2022 15:30:42 GMT+0800 (中国标准时间)\n * Author = xueya\n * 网络请求\n */\n\nimport { error, warn } from \"cc\";\nimport { GameConfig } from \"../../config/GameConfig\";\n\nlet urls: any = {};                      // 当前请求地址集合\nlet reqparams: any = {};                 // 请求参数\n/** Http事件 */\nexport enum HttpEvent {\n    NO_NETWORK = \"http_request_no_network\",                  // 断网\n    UNKNOWN_ERROR = \"http_request_unknown_error\",            // 未知错误\n    TIMEOUT = \"http_request_timout\"                          // 请求超时\n}\n//返回数据解析类型\nexport enum ResponseType {\n    Default = \"\",\n    ArrayBuffer = \"arraybuffer\",\n    Blob = \"blob\",\n    Document = \"document\",\n    Json = \"json\",\n    Text = \"text\"\n}\n\nexport class HttpRequest {\n\n    /** 服务器地址 */\n    public server: string = \"http://192.168.1.150/\";\n    /** 请求超时时间 单位:毫秒*/\n    public timeout: number = 10000;\n\n    /**\n     * HTTP GET请求\n     * 例：\n     * \n     * Get\n        let complete = function(response){\n            LogWrap.log(response);\n        }\n        let error = function(response){\n            LogWrap.log(response);\n        }\n        this.get(urlStr, complete, error);\n    */\n    public get(urlStr: string, successCallback?: Function, errorCallback?: Function): string {\n        return this.sendRequest(urlStr, null, false, successCallback, errorCallback)\n    }\n    public getWithParams(urlStr: string, params: any, successCallback?: Function, errorCallback?: Function): string {\n        return this.sendRequest(urlStr, params, false, successCallback, errorCallback)\n    }\n\n    public getByArraybuffer(urlStr: string, successCallback?: Function, errorCallback?: Function): string {\n        return this.sendRequest(urlStr, null, false, successCallback, errorCallback, 'arraybuffer', false);\n    }\n    public getWithParamsByArraybuffer(urlStr: string, params: any, successCallback?: Function, errorCallback?: Function): string {\n        return this.sendRequest(urlStr, params, false, successCallback, errorCallback, 'arraybuffer', false);\n    }\n\n    /** \n     * HTTP POST请求\n     * 例：\n     *      \n     * Post\n        let param = '{\"LoginCode\":\"donggang_dev\",\"Password\":\"e10adc3949ba59abbe56e057f20f883e\"}'\n        let complete = function(response){\n                let jsonData = JSON.parse(response);\n                let data = JSON.parse(jsonData.Data);\n            LogWrap.log(data.Id);\n        }\n        let error = function(response){\n            LogWrap.log(response);\n        }\n        this.post(urlStr, param, complete, error);\n    */\n    public post(urlStr: string, params: any, successCallback?: Function, errorCallback?: Function, responseType?: XMLHttpRequestResponseType): string {\n        return this.sendRequest(urlStr, params, true, successCallback, errorCallback, responseType);\n    }\n\n    /** 取消请求中的请求 */\n    public abort(urlStr: string = \"\") {\n        let url = null;\n        if (urlStr && urlStr.toLocaleLowerCase().indexOf(\"http\") == 0) {\n            url = urlStr;\n        }\n        else {\n            url = this.server + urlStr;\n        }\n        let xhr = urls[url];\n        if (xhr) {\n            xhr.abort();\n        }\n    }\n\n    /**\n     * 获得字符串形式的参数\n     */\n    private getParamString(params: any) {\n        if (typeof (params) == 'string') {\n            return params;\n        }\n        if (typeof (params) != 'object') {\n            return params;\n        }\n        let result = \"\";\n        for (let urlStr in params) {\n            let data = params[urlStr];\n            if (data instanceof Object) {\n                for (let key in data)\n                    result += `${key}=${data[key]}&`;\n            }\n            else {\n                result += `${urlStr}=${data}&`;\n            }\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n\n    /** \n     * Http请求 \n     * @param urlStr(string)              请求地址\n     * @param params(JSON)              请求参数\n     * @param isPost(boolen)            是否为POST方式\n     * @param callback(function)        请求成功回调\n     * @param errorCallback(function)   请求失败回调\n     * @param responseType(XMLHttpRequestResponseType)      响应类型\n     * return 实际请求的地址 也是以此来取消请求的\n     */\n    private sendRequest(urlStr: string,\n        params: any,\n        isPost: boolean,\n        successCallback?: Function,\n        errorCallback?: Function,\n        responseType?: XMLHttpRequestResponseType,\n        isOpenTimeout = true,\n        timeout: number = this.timeout): string | null {\n        if (urlStr == null || urlStr == '') {\n            error(\"请求地址不能为空\");\n            return;\n        }\n\n        let url: string, newUrl: string, paramsStr: string;\n        if (urlStr.toLocaleLowerCase().indexOf(\"http\") == 0) {\n            url = urlStr;\n        }\n        else {\n            url = this.server + urlStr;\n        }\n\n        if (params) {\n            paramsStr = this.getParamString(params);\n            if (url.indexOf(\"?\") > -1) {\n                newUrl = url + \"&\" + paramsStr;\n            } else {\n                newUrl = url + \"?\" + paramsStr;\n            }\n        }\n        else {\n            newUrl = url;\n        }\n\n        if (urls[newUrl] != null && reqparams[newUrl] == paramsStr!) {\n            warn(`地址【${url}】已正在请求中，不能重复请求`);\n            return;\n        }\n        /** 当前Http */\n        let xhr: XMLHttpRequest = new XMLHttpRequest();\n\n        // 设置响应类型\n        if (responseType) {\n            xhr.responseType = responseType\n        }\n        // 防重复请求功能\n        urls[newUrl] = xhr;\n        reqparams[newUrl] = paramsStr!;\n\n\n        let reqData: any = {};\n        reqData.url = url;\n        reqData.params = params;\n\n        if (isPost) {\n            //post需要对数据进行包装\n            if (typeof (params) != \"string\") {\n                params = JSON.stringify(params);\n            }\n            xhr.open(\"POST\", this.replaceUrl(url));\n        } else {\n            xhr.open(\"GET\", this.replaceUrl(newUrl));\n        }\n        //设置请求头<此处有跨域问题>\n        xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=utf-8\")\n        xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\")\n        xhr.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild')\n        xhr.setRequestHeader(\"Access-Control-Allow-Methods\", \"PUT,POST,GET,DELETE,OPTIONS\")\n\n        /** 回调函数 */\n        let isCallback = false;\n        let callbackFunc = function (event, respData = null) {\n            //console.log(\"Http:Callback==>\", reqData, respData)\n            if (isCallback == true) {\n                return;\n            }\n            isCallback = true;\n            if (event != null) {\n                if (errorCallback) {\n                    errorCallback(reqData, respData);\n                };\n                return;\n            } else {\n                if (successCallback) {\n                    successCallback(respData, reqData);\n                };\n            }\n        }\n        // 请求超时\n        if (isOpenTimeout) {\n            xhr.timeout = timeout;\n            xhr.ontimeout = (a) => {\n                //console.log(\"xhr.ontimeout:\", a)\n                this.deleteCache(newUrl);\n                callbackFunc(HttpEvent.TIMEOUT);\n            }\n        }\n\n        xhr.onloadend = (a) => {\n            //console.log(\"xhr.onloadend:\", a)\n            if (xhr.status == 500) {\n                this.deleteCache(newUrl);\n                callbackFunc(HttpEvent.NO_NETWORK);\n            }\n        }\n        xhr.onerror = (a) => {\n            //console.log(\"xhr.onerror:\", a, xhr)\n            this.deleteCache(newUrl);\n            let event = null;\n            if (xhr.readyState == 0 || xhr.readyState == 1 || xhr.status == 0) {\n                event = HttpEvent.NO_NETWORK;          // 断网 \n            }\n            else {\n                event = HttpEvent.UNKNOWN_ERROR;       // 未知错误\n            }\n            callbackFunc(event);\n        };\n\n        xhr.onreadystatechange = (a) => {\n            //console.log(\"xhr.onreadystatechange:\", a, xhr)\n            if (xhr.readyState != 4) {\n                return;\n            };\n\n            this.deleteCache(newUrl);\n            if (xhr.status == 200) {\n                switch (responseType) {\n                    case ResponseType.ArrayBuffer:  //此处用作文件下载\n                        let buffer = xhr.response;\n                        let bufferData = new Uint8Array(buffer);\n\n                        callbackFunc(null, bufferData);\n                        break;\n                    case ResponseType.Json:\n                        let data = xhr.response;\n                        if (typeof (xhr.response) == \"string\") {\n                            try {\n                                //console.log(typeof (xhr.response), xhr.response);\n                                data = JSON.parse(xhr.response);\n                            } catch (error) {\n                                data = null;\n                                console.error(\"数据解析出错 非json格式\")\n                            }\n                        }\n                        callbackFunc(null, data);\n                        break;\n                    default:\n                        callbackFunc(null, xhr.response);\n                        break;\n                }\n\n            } else {\n                callbackFunc(HttpEvent.UNKNOWN_ERROR, xhr.response);\n            }\n        };\n        if (isPost) {\n            if (params == null || params == \"\") {\n                xhr.send();\n            } else {\n                ////console.log(\"发送的数据\", params)\n                xhr.send(params);                // 根据服务器接受数据方式做选择\n            }\n        } else {\n            xhr.send();\n        }\n        return newUrl;\n    }\n    /** 批量替换俩 */\n    private replaceUrl(url): string {\n        if (GameConfig.instance.isOnlineServer()) {\n            //线上:将所有远端资源全部采用https\n            url = String(url).replace(\"http://\", \"https://\")\n            url = String(url).replace(\"HTTP://\", \"https://\")\n            url = String(url).replace(\"uchead.static.17c.cn\", \"dfqppic.266.com\");\n        }\n        return url\n    }\n    private deleteCache(url: string) {\n        delete urls[url];\n        delete reqparams[url];\n    }\n}"]}