{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/proj/LoginController.ts"],"names":["LoginController","GCache","AppEvent","ClientInfo","GameConfig","SystemConf","GConstants","StoreKey","GameTxt","UIConfigData","UIID","Encrypt","LayerManager","LocalStorage","Logger","EventManager","Utils","BaseControll","Platform","GlobalCMD","GSocket","getInstance","_instance","init","clear","constructor","name","_viewLoginParam","_reqloginInfo","_reqLoginNum","_reqLoginMaxNum","onInitModuleEvent","addModelListener","NET_GOTO_START_LOGIN","startLogin","LOGIN_GOTO_SHOW","showLoginView","NET_REQ_USER_LOGIN_YOUKE","reqYoukeLogin","NET_FORWARD_USER_LOGIN_YOUKE","respNetLoginYouke","NET_FORWARD_USER_LOGIN_CORE","respNetLoginCore","NET_RECEIVE_LOGIN_SUCCESS","respNetLoginSuccess","NET_RECEIVE_MULTI_DEVICE_LOGIN","respNetLoginMultiDevice","NET_RECEIVE_KEEP_ALIVE","respNetKeepAlive","LOGIN_STATE_CHANGE","receiveLoginStateChange","event","reqParam","_resetFirstLogin","loginType","access_token","openId","userinfo","UserLoginType","WechatLogin","autoLogin","instance","isConnected","url","AppUrlConf","Socket","dispatch","NET_START_CONNECT","_loginType","User","getLastlocalLoginType","BoyaaPassportLogin","startByaccLogin","startWeiXinLogin","lastLoginInfo","getLastlocalLoginInfo","lastLoginByacc","getLastlocalByacc","loginAccount","loginPsd","bid","mType","string_isEmpty","isExsit","key","value","checkIsExsitAccountInfo","loginInfo","getLastlocalToken","_boyaaPassportLogin","_boyaaPassportBidTokenLogin","account","password","reg_type","verifyCode","uType","UserUType","BoyaaPassport","data","phone","pwd","flag","extraData","accesstoken","reqCoreGameLogin","Guest","in_param","ext_param","userInfo","setLoginState","UserLoginState","Logining","in_extParam","print","curTime","time","defaultParam","_getLoginDefaultParam","login_type","utype","getLastLoginValueByKey","mid","verify_code","_in_param","table_verify","Object","prototype","hasOwnProperty","call","extParam_data","getDefaultExtramParam","timestamp","_in_extParam","param","JsonEncode2","newBody","guid","api","PlatFormAppID","sendCoreGameLogin","PHP_CORE_GUEST","cmd","PHP_CORE_LOGIN","sendMsg","body","timeout","dump","NET_SEND_MSG","Notoken","lastUType","inParam","token","Token","errorType","isSuccess","respData","reqData","resultInfo","info","isNull","console","error","RegionId","otherEx","serverConf","onloadLoginSuccessParams","receiveLoginSuccess","receiveLoginFail","NET_HEART_BEAT_ONLOADING","getUserMid","string_format","LOGIN_USER_OPENID","log","set","LoginSuccess","SYS_CLOSE_NETLOADING","errInfo","LoginFailed","JsonDecode","updateReFreshAccessToken","state","PLogInfo","SYS_TOAST_TIP","content","closeConnect","UserLoginFailCode","ERR_MOVE_SERVER","ERR_STOP_SERVER","ServerStop","ERR_VerifyCode_ERROR","ERR_REG_IDIOM_ERROR","ERR_REG_PHONENUMBER_ERROR","ERR_LOGIN_BINDPHONE_ERROR","logModel","startKeepAlive","updateLoginSuccessCount","_reqCommSuccessQuene","isSupportGame","roomId","gameId","roomLevel","number_valueOf","GameID","id","matchRecInfo","matchGameId","table_isEmpty","onlookerInfo","onlookerGameId","Desk","setCurGameID","setCurTableID","setCurLevelID","Level","TableID","isReconn","SelectGame","intoGameData","GAME_GOTO_SHOW","login_goto_room_no_game","_reqSuccessQueneToHall","_toForwardHallView","MultiDeviceLogin","cleanLastlocalLoginToken","tipParam","title","alignLeftTop","notshowClose","txt_desc","remote_login","dec_fontSize","buttonsMap","label","BtnConf","Label_Confirm","click","RECOMMEND_POP_CLEAN_QUENE","VIEW_UI_OPEN","SysPopWindow","updateDataUserKey","NET_REQ_USER_LOGIN_CORE_INIT","NET_REQ_HALL_GAME_CONFIG","NET_REQ_GAME_LEVEL_ROOM_TAB","FXJ","NET_REQ_SHARE_CONFIG","NET_CMD_REQ_USER_BACKPACK","NET_REQ_LEVEL_MODEL_CONFIG","NET_REQ_PROPS_INFO","NET_REQ_GAME_PLAY_INFO","NET_REQ_SIGNIN_CONFIG","NET_REQ_HOLIDAYS_GIFTPACKAGE","NET_REQ_GOODS_INFO","scene","GoodsListID","limitPack","GiftPack","MarketSilver","MarketProp","NET_CMD_REQ_WATCH","NET_CMD_REQ_TASK_ACT_CONFIG","NET_REQ_FIRST_PAY_CONFIG","FPS","isFirstLogin","None","Offline","getLoginState","LoginPrefab","layer","self","has","isLoading","clearOther","SYS_PACKAGE_LOAD","PkgLoaderTaskList","Login","isLoginSuccesed","_checkServerChange","SYS_APP_LIFE","AppRunLife","Login_Will_Open","onAdded","VIEW_UI_MAIN_UPDATE","Login_Opened","LOGIN_SEND_SHOW","onRemoved","Login_Closed","SYS_INFO_REFRESH","lastClientVer","get","SYS_ClientVer","AppVer","oldServerConf","getLastlocalLoginServerConf","newServerConf","isSameVer","String","isChangeServer","warn","currowServer","CurrowServer","isFind","ServerUrlConf","Number","isNotNeedTip","login_success","HALL_GOTO_SHOW","isWXPlatform","WxLoginCode","updateWXLoginCode","param_data","api_ver","channel_id","ChannelId","channelKey","ChannelKey","mac","MachineId","machine_type","MachineModel","os","SysVer","resolution","DEV_SIZE","width","height","imsi","IMSI","operator","PhoneCardType","net","NetWorkType","Guid","ssaid","SSAID","appid","nick","PhoneModel","version","hall_version","HallVer","sex","verify_msg","verify_word","iccid","ICCID","imei","IMEI","safecode","SignDeviceId","safecode_mac","SignMacAddress","safecode_guid","SignGuid","factoryid","FactoryId","update_site_realtime","bundleId","BundleId"],"mappings":"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","sourcesContent":["/**\n * Name = LoginController\n * URL = db://assets/proj/LoginController.ts\n * Time = Mon Apr 18 2022 11:30:53 GMT+0800 (中国标准时间)\n * Author = xueya\n * 登录控制器\n */\n\nimport { GCache } from \"../cache/GCache\";\nimport { AppEvent } from \"../config/AppEvent\";\nimport { ClientInfo, GameConfig, SystemConf } from \"../config/GameConfig\";\nimport { GConstants, StoreKey } from \"../config/GameConstant\";\nimport { GameTxt } from \"../config/GameTxt\";\nimport { UIConfigData, UIID } from \"../config/UIConfig\";\nimport { Encrypt } from \"../framework/crypto/Encrypto\";\nimport { inf_GameIntoParams, inf_LoginViewInfo, inf_PopWindowParams } from \"../framework/InterfaceDefines\";\nimport { LayerManager } from \"../framework/layer/LayerManager\";\nimport { LocalStorage } from \"../framework/LocalStorage\";\nimport { Logger } from \"../framework/log/Logger\";\nimport { EventManager } from \"../framework/manager/EventManager\";\nimport { Utils } from \"../framework/Utils\";\nimport { BaseControll } from \"../framework/vc/BaseController\";\nimport { Platform } from \"../platform/Platform\";\nimport { GlobalCMD } from \"./gnet/GlobalCMD\";\nimport { GSocket } from \"./gnet/GSocket\";\n\nexport class LoginController extends BaseControll {\n\n    //界面传递的数据\n    _viewLoginParam: inf_LoginViewInfo | null = null;\n    //当前请求的登录数据\n    _reqloginInfo = null;\n    //当前登录请求次数\n    _reqLoginNum = 0;\n    //登录最大请求次数\n    _reqLoginMaxNum = 3;\n\n    private static _instance = null;\n    public static getInstance(): LoginController {\n        if (!this._instance || this._instance == null) {\n            this._instance = new LoginController(\"LoginController\");\n        }\n        return this._instance;\n    }\n    public static init(): LoginController {\n        if (this._instance) {\n            this._instance.clear()\n        }\n        this._instance = null\n        LoginController.getInstance()\n        return\n    }\n\n    //实例化\n    constructor(name: string) {\n        super(name)\n    };\n    /**初始化添加事件绑定 */\n    protected onInitModuleEvent(): void {\n        //登陆\n        this.addModelListener(AppEvent.NET_GOTO_START_LOGIN, this.startLogin)\n        //显示登录界面\n        this.addModelListener(AppEvent.LOGIN_GOTO_SHOW, this.showLoginView)\n\n        //请求游客登录\n        this.addModelListener(AppEvent.NET_REQ_USER_LOGIN_YOUKE, this.reqYoukeLogin)\n        //请求游客登录后返回的结果\n        this.addModelListener(AppEvent.NET_FORWARD_USER_LOGIN_YOUKE, this.respNetLoginYouke)\n        //请求登录后返回的结果\n        this.addModelListener(AppEvent.NET_FORWARD_USER_LOGIN_CORE, this.respNetLoginCore)\n        //广播：大厅登录成功\n        this.addModelListener(AppEvent.NET_RECEIVE_LOGIN_SUCCESS, this.respNetLoginSuccess)\n        //广播:异地登录\n        this.addModelListener(AppEvent.NET_RECEIVE_MULTI_DEVICE_LOGIN, this.respNetLoginMultiDevice)\n        //保活检测\n        this.addModelListener(AppEvent.NET_RECEIVE_KEEP_ALIVE, this.respNetKeepAlive)\n        //登录状态改变\n        this.addModelListener(AppEvent.LOGIN_STATE_CHANGE, this.receiveLoginStateChange)\n\n    }\n    //开始登录\n    startLogin(event, reqParam: inf_LoginViewInfo = null) {\n        if (reqParam) {\n            this._viewLoginParam = reqParam\n        }\n        if (this._reqLoginNum >= this._reqLoginMaxNum) {//此时要断开连接并显示界面\n            this._resetFirstLogin()\n            this.showLoginView()\n        } else {\n            let loginType = null;\n            if (this._viewLoginParam && this._viewLoginParam.access_token && this._viewLoginParam.openId && this._viewLoginParam.userinfo) {\n                loginType = GConstants.UserLoginType.WechatLogin;\n            }\n            this.autoLogin(loginType);\n        }\n    }\n    //自动登录\n    autoLogin(loginType = null) {\n        if (!GSocket.instance.isConnected()) {\n            let url = GameConfig.instance.AppUrlConf.Socket;\n            EventManager.dispatch(AppEvent.NET_START_CONNECT, url)\n            return\n        }\n        let _loginType = loginType || GCache.User.getLastlocalLoginType();\n\n        switch (_loginType) {\n            case GConstants.UserLoginType.BoyaaPassportLogin:  //boyaa通行证登录\n                this.startByaccLogin();\n                break;\n            case GConstants.UserLoginType.WechatLogin:  //wx登录\n                this.startWeiXinLogin();\n                break;\n            default:\n                this.reqYoukeLogin();\n                break;\n        }\n    }\n    //通行证登录\n    startByaccLogin() {\n        let lastLoginInfo = GCache.User.getLastlocalLoginInfo()\n        if (!lastLoginInfo) {\n            return\n        }\n        let lastLoginByacc = GCache.User.getLastlocalByacc()\n        let loginAccount, loginPsd, bid, access_token;\n        let mType = 0;\n        if (!Utils.string_isEmpty(lastLoginByacc)) {\n            loginAccount = lastLoginByacc;\n\n            let [isExsit, key, value] = GCache.User.checkIsExsitAccountInfo(loginAccount)\n\n            let loginInfo = value;\n\n            loginPsd = loginInfo[\"loginPsd\"];\n            bid = loginInfo[\"bid\"] || lastLoginInfo[\"bid\"];\n            access_token = loginInfo[\"access_token\"] || GCache.User.getLastlocalToken();\n\n            if (!Utils.string_isEmpty(loginAccount) && !Utils.string_isEmpty(loginPsd)) {//有账号有密码，则通行证登录 \n                mType = 1;\n            } else if (!Utils.string_isEmpty(loginAccount) && !Utils.string_isEmpty(bid) && !Utils.string_isEmpty(access_token)) { //有账号没有密码，则使用bid和accessToken登录\n                mType = 2;\n            } else {\n                mType = 3;\n            }\n\n            switch (mType) {\n                case 1:  //有账号有密码，则博雅通行证登录 \n                    this._boyaaPassportLogin(loginAccount, loginPsd, bid, access_token);\n                    break;\n                case 2:  //有账号没有密码，则使用bid和accessToken登录 \n                    this._boyaaPassportBidTokenLogin(loginAccount, loginPsd, bid, access_token);\n                    break;\n                case 3:\n                    this.reqYoukeLogin()\n                    break;\n                default:\n                    this.reqYoukeLogin()\n                    break;\n            }\n\n        }\n\n    }\n    //通行证登录：有账号有密码\n    _boyaaPassportLogin(account = null, password = null, bid = null, access_token = null, reg_type = null, verifyCode = null) {\n        let loginType = GConstants.UserLoginType.BoyaaPassportLogin;\n        let uType = GConstants.UserUType.BoyaaPassport;\n\n        let data = {\n            phone: account,\n            pwd: password,\n            flag: 0\n        };\n\n        let extraData = {\n            bid: bid,\n            accesstoken: access_token\n        };\n        extraData.bid = bid;\n        extraData.accesstoken = access_token;\n\n        // this.m_loginAccount = account;\n        // this.m_loginPswd = password;\n\n        this.reqCoreGameLogin(null, loginType, uType, data, extraData, reg_type, verifyCode);\n    }\n    //通行证登录：有账号没有密码（账户+bid+token）\n    _boyaaPassportBidTokenLogin(account = null, password = null, bid = null, access_token = null) {\n        let loginType = GConstants.UserLoginType.BoyaaPassportLogin;\n        let uType = GConstants.UserUType.BoyaaPassport;\n\n        let data = {\n            phone: account,\n            pwd: password,\n            flag: 0\n        };\n\n        let extraData = {\n            bid: bid,\n            accesstoken: access_token\n        };\n        extraData.bid = bid;\n        extraData.accesstoken = access_token;\n\n        this.reqCoreGameLogin(null, loginType, uType, data, extraData);\n    }\n    /** 开始微信登录 */\n    startWeiXinLogin() {\n        let loginType = GConstants.UserLoginType.WechatLogin;\n        let uType = GConstants.UserUType.Guest;\n\n        let in_param = {\n            access_token: this._viewLoginParam.access_token,\n        }\n        let ext_param = {\n            openId: this._viewLoginParam.openId,\n            userInfo: this._viewLoginParam.userinfo,\n        }\n        GCache.User.setLoginState(GConstants.UserLoginState.Logining);\n        this.reqCoreGameLogin(null, loginType, uType, in_param, ext_param)\n    }\n    /**\n     * 登录Core 造数据\n     * @param event \n     * @param loginType 登录类型 详见 UserLoginType\n     * @param uType  用户类型 详见 UserUType\n     * @param in_param getLoginDefaultParam的字段\n     * @param in_extParam getDefaultExtramParam的字段\n     * @param reg_type \n     * @param verifyCode \n     */\n    private reqCoreGameLogin(event, loginType, uType, in_param = null, in_extParam = null, reg_type = null, verifyCode = null) {\n        this.print(\"接到消息 开始造登录数据===>\")\n        let curTime = Utils.time();\n\n        let defaultParam = this._getLoginDefaultParam()\n\n        if (reg_type) {\n            defaultParam[\"reg_type\"] = reg_type;\n        }\n        defaultParam.login_type = loginType;\n        defaultParam.utype = uType;\n        defaultParam.access_token = GCache.User.getLastLoginValueByKey(\"token\", \"\");\n        defaultParam.mid = GCache.User.getLastLoginValueByKey(\"mid\", \"\")\n\n        if (verifyCode) {\n            defaultParam.verify_code = verifyCode;\n        }\n\n        let _in_param = Utils.table_verify(in_param)\n        for (let key in _in_param) {\n            if (Object.prototype.hasOwnProperty.call(_in_param, key)) {\n                let value = _in_param[key];\n                if (value) {\n                    defaultParam[key] = value\n                }\n            }\n        }\n        let extParam_data = this.getDefaultExtramParam();\n\n        extParam_data.timestamp = curTime;\n\n        let _in_extParam = Utils.table_verify(in_extParam)\n        for (let key in _in_extParam) {\n            if (Object.prototype.hasOwnProperty.call(_in_extParam, key)) {\n                let value = _in_extParam[key];\n                if (value) {\n                    extParam_data[key] = value\n                }\n            }\n        }\n        defaultParam.param = Encrypt.JsonEncode2(extParam_data)\n        //记录本次登录信息\n        this._reqloginInfo = defaultParam\n        this.print(\"登录Core 造数据:\", defaultParam);\n        if (defaultParam.utype == GConstants.UserUType.Guest) {  // 游客登录\n            let newBody = {\n                guid: defaultParam.guid,\n                api: ClientInfo.PlatFormAppID\n            }\n            this.sendCoreGameLogin(newBody, GlobalCMD.PHP_CORE_GUEST)\n            // this.sendCoreGameLogin(defaultParam)\n        } else {\n            this.sendCoreGameLogin(defaultParam)\n        }\n    }\n    //发送登录消息\n    sendCoreGameLogin(param, cmd = null) {\n        this._reqLoginNum = this._reqLoginNum + 1;\n        cmd = cmd || GlobalCMD.PHP_CORE_LOGIN;\n        let sendMsg = {\n            cmd: cmd,\n            body: param,\n            timeout: 15000\n        }\n        this.dump(sendMsg, \"================sendCoreGameLogin======================\")\n        EventManager.dispatch(AppEvent.NET_SEND_MSG, sendMsg)\n    }\n    //请求游客登录\n    reqYoukeLogin() {\n        let loginType = GConstants.UserLoginType.Notoken;\n        let uType = GConstants.UserUType.Guest;\n\n        let lastUType = GCache.User.getLastLoginValueByKey(\"uType\");\n\n        let inParam = null\n        if (lastUType == GConstants.UserUType.Guest) {\n            let token = GCache.User.getLastLoginValueByKey(\"token\");\n            if (token && token != \"\") {\n                loginType = GConstants.UserLoginType.Token\n            } else {\n                inParam = {\n                    guid: this._viewLoginParam.access_token\n                }\n            }\n        } else if (lastUType == null) {\n            inParam = {\n                guid: this._viewLoginParam.access_token\n            }\n        }\n        GCache.User.setLoginState(GConstants.UserLoginState.Logining)\n        this.reqCoreGameLogin(null, loginType, uType, inParam)\n    }\n    //游客登录后返回的结果\n    respNetLoginYouke(event, param) {\n        this.dump(param, \"这是游客登录返回的结果\")\n        if (param.errorType == 1083) { //已经绑定手机 跳转手机登录\n\n        } else {\n            GCache.User.setLoginState(GConstants.UserLoginState.Logining)\n            this.sendCoreGameLogin(this._reqloginInfo)\n        }\n\n    }\n    //登录返回的结果\n    respNetLoginCore(event, isSuccess, respData, reqData) {\n        this.dump(respData, \"登录是否成功？===>\" + isSuccess)\n\n        let resultInfo = {};\n        if (!isSuccess) {\n            resultInfo = respData\n        } else {\n            let info = respData\n            if (!info || Utils.isNull(info[\"game\"]) || Utils.isNull(info[\"user\"]) || Utils.isNull(info[\"account\"])) {\n                Utils.dump(respData);\n                console.error(\"登录数据有误 字段有空数据\")\n                isSuccess = false\n            } else {\n                ClientInfo.RegionId = info[\"user\"][\"region\"];\n                let otherEx = {\n                    serverConf: GameConfig.instance.AppUrlConf\n                }\n                GCache.User.onloadLoginSuccessParams(info[\"user\"], info[\"game\"], info[\"account\"], otherEx);\n                isSuccess = true;\n            }\n        }\n        if (isSuccess == true) {\n            this.receiveLoginSuccess()\n        } else {\n            this.receiveLoginFail(respData)\n        }\n        //判断是否开启发送心跳包\n        EventManager.dispatch(AppEvent.NET_HEART_BEAT_ONLOADING, isSuccess)\n    }\n    /** 统一处理登录成功 */\n    receiveLoginSuccess() {\n        //保存用户openid\n        if (this._viewLoginParam && Utils.string_isEmpty(this._viewLoginParam.openId) != null) {\n            let key: any = GCache.User.getUserMid();\n            key = Utils.string_format(StoreKey.LOGIN_USER_OPENID, key)\n            console.log('当前用户openId', this._viewLoginParam.openId)\n            LocalStorage.set(key, this._viewLoginParam.openId)\n        }\n        GCache.User.setLoginState(GConstants.UserLoginState.LoginSuccess);\n        EventManager.dispatch(AppEvent.SYS_CLOSE_NETLOADING);\n        this._reqLoginNum = 0\n    }\n    /** 统一处理登录失败 */\n    receiveLoginFail(errInfo) {\n        GCache.User.setLoginState(GConstants.UserLoginState.LoginFailed);\n\n        this.dump(errInfo, `[Login Fail]登录失败了,是否需要自动重新请求登录 ${this._reqLoginNum < this._reqLoginMaxNum}`)\n\n        if (this._reqLoginNum < this._reqLoginMaxNum) {\n            //更新每次请求的时间戳\n            let extParam_data = Encrypt.JsonDecode(this._reqloginInfo.param);\n            extParam_data.timestamp = Utils.time();\n            this._reqloginInfo.param = Encrypt.JsonEncode2(extParam_data);\n            //此处针对wx平台 要做access_token的实时更新\n            if (this._reqloginInfo && this._reqloginInfo[\"login_type\"] == GConstants.UserLoginType.WechatLogin) {\n                Platform.updateReFreshAccessToken((state) => {\n                    if (state == true) {\n                        this._reqloginInfo[\"access_token\"] = Platform.PLogInfo.access_token;\n                        this.sendCoreGameLogin(this._reqloginInfo);\n                        return;\n                    }\n                    this._reqloginInfo = null;\n                    this._resetFirstLogin();\n                    EventManager.dispatch(AppEvent.SYS_CLOSE_NETLOADING);\n                    this.showLoginView();\n                    EventManager.dispatch(AppEvent.SYS_TOAST_TIP, { content: \"Fail:用户信息获取异常，请重新登录\" })\n                })\n                return;\n            }\n            this.sendCoreGameLogin(this._reqloginInfo);\n        } else {\n            //断开连接 并显示登录\n            this._reqloginInfo = null;\n            EventManager.dispatch(AppEvent.SYS_CLOSE_NETLOADING);\n            GSocket.instance.closeConnect()\n            this.showLoginView()\n        }\n        let errorType = errInfo ? errInfo[\"errorType\"] : null\n        switch (errorType) {\n            case GConstants.UserLoginFailCode.ERR_MOVE_SERVER:\n                this.print(\"receiveLoginFail: 登录失败>>>>server迁服\")\n                break;\n            case GConstants.UserLoginFailCode.ERR_STOP_SERVER:\n                this.print(\"receiveLoginFail: 登录失败>>>>计划性停服\")\n                GCache.User.setLoginState(GConstants.UserLoginState.ServerStop);\n\n                break;\n            case GConstants.UserLoginFailCode.ERR_VerifyCode_ERROR:\n                this.print(\"receiveLoginFail: 登录失败>>>>验证码错误\")\n                break;\n            case GConstants.UserLoginFailCode.ERR_REG_IDIOM_ERROR:\n                this.print(\"receiveLoginFail: 登录失败>>>>注册__需要成语验证码\")\n                break;\n            case GConstants.UserLoginFailCode.ERR_REG_PHONENUMBER_ERROR:\n                this.print(\"receiveLoginFail: 登录失败>>>>注册__需要手机号码注册\")\n                break;\n            case GConstants.UserLoginFailCode.ERR_LOGIN_BINDPHONE_ERROR:\n                this.print(\"receiveLoginFail: 登录失败>>>>需要绑定手机后登录\")\n                break;\n\n            default:\n                this.print(\"receiveLoginFail: 登录失败>>>>\" + errorType)\n                if (errInfo && errInfo[\"errorTips\"] && errInfo[\"errorTips\"] != \"\") {\n                    EventManager.dispatch(AppEvent.SYS_TOAST_TIP, { content: errInfo[\"errorTips\"] })\n                }\n                break;\n        }\n\n    }\n\n    //广播:登录成功(断线重连)\n    respNetLoginSuccess(event, respData: any, reqData: any) {\n        Logger.logModel(\"广播:登录成功 开启会话保活 即将跳转==>\")\n        this.print(\"respNetLoginSuccess\", this._reqloginInfo);\n        this.print(respData);\n        GCache.User.setLoginState(GConstants.UserLoginState.LoginSuccess);\n\n        GSocket.instance.startKeepAlive(true)\n        //更新登录计次\n        GCache.User.updateLoginSuccessCount()\n\n        //请求通用队列\n        this._reqCommSuccessQuene();\n        //******************重连游戏********************/\n        let isSupportGame = false;\n        let roomId = 0;\n        let gameId = 0;\n        let roomLevel = 0;\n\n        if (respData[\"ret\"] == 1) {\n            roomId = Utils.number_valueOf(respData[\"roomId\"]);\n            gameId = Utils.number_valueOf(respData[\"gameType\"]);\n\n            if (roomId > 0) {\n                roomLevel = Utils.number_valueOf(respData[\"roomLevel\"]);\n            }\n            for (let key in GConstants.GameID) {\n                if (Object.prototype.hasOwnProperty.call(GConstants.GameID, key)) {\n                    let id = GConstants.GameID[key];\n                    if (gameId == id) {\n                        isSupportGame = true;\n                    }\n                }\n            }\n        }\n\n        //比赛场\n        let matchRecInfo = respData[\"matchInfo\"];\n        let matchGameId = 0;\n\n        if (!Utils.table_isEmpty(matchRecInfo)) {\n            matchGameId = Utils.number_valueOf(matchRecInfo[\"gameId\"]);\n        }\n\n        let onlookerInfo = respData[\"onlookerInfo\"];\n        let onlookerGameId = 0;\n        if (!Utils.table_isEmpty(onlookerInfo)) {\n            onlookerGameId = Utils.number_valueOf(onlookerInfo[\"gameId\"]);\n        }\n\n        if (roomId > 0 && gameId > 0) {\n            if (isSupportGame == true) {//不支持的游戏\n                if (GCache.Desk) {\n                    GCache.Desk.setCurGameID(gameId);\n                    GCache.Desk.setCurTableID(roomId);\n                    GCache.Desk.setCurLevelID(roomLevel);\n                }\n                this.print(\"****************在游戏中 重连进入************\")\n                //设置缓存数据\n                let body: inf_GameIntoParams = {\n                    GameID: gameId,\n                    Level: roomLevel,\n                    TableID: roomId,\n                    isReconn: true,\n                };\n                GCache.SelectGame.intoGameData = body;\n                //加载游戏场景\n                EventManager.dispatch(AppEvent.GAME_GOTO_SHOW)\n                return;\n            } else {\n                this.print(`进入游戏gameID = ${gameId}失败，当前版本不支持`);\n                EventManager.dispatch(AppEvent.SYS_TOAST_TIP, { content: GameTxt.login_goto_room_no_game });\n            }\n        }\n        this._reqSuccessQueneToHall()\n        this._toForwardHallView(null)\n    }\n    //广播：异地登录\n    respNetLoginMultiDevice(event, param: any) {\n        this.print(\"广播:异地登录\")\n        GCache.User.setLoginState(GConstants.UserLoginState.MultiDeviceLogin);\n        GCache.User.cleanLastlocalLoginToken();\n\n        let tipParam: inf_PopWindowParams = {\n            title: \"异地登录\",\n            alignLeftTop: false,\n            notshowClose: true,\n            txt_desc: GameTxt.remote_login,//正文内容\n            dec_fontSize: 28,\n            buttonsMap: [\n                {\n                    label: GConstants.BtnConf.Label_Confirm,\n                    click: () => {\n                        //清除推荐弹窗队列\n                        EventManager.dispatch(AppEvent.RECOMMEND_POP_CLEAN_QUENE);\n                        // 点击回调\n                        EventManager.dispatch(AppEvent.LOGIN_GOTO_SHOW);\n                    }\n                },\n\n            ],\n        }\n        //增加弹窗异地登录\n        EventManager.dispatch(AppEvent.VIEW_UI_OPEN, UIID.SysPopWindow, tipParam);\n        this._resetFirstLogin();\n    }\n    //保活检测\n    respNetKeepAlive(event, isSuccess, respData, reqData) {\n        if (isSuccess == true && respData[\"ssid\"]) {\n            GCache.User.updateDataUserKey(\"ssid\", respData[\"ssid\"])\n        }\n    }\n\n    /** 登录状态改变 */\n    receiveLoginStateChange(event, state) {\n\n    }\n\n    //登录成功后 请求的通用队列 必定会请求\n    private _reqCommSuccessQuene() {\n        //请求登录初始化\n        EventManager.dispatch(AppEvent.NET_REQ_USER_LOGIN_CORE_INIT);\n        //请求大厅游戏配置\n        EventManager.dispatch(AppEvent.NET_REQ_HALL_GAME_CONFIG);\n        //请求游戏房间信息\n        EventManager.dispatch(AppEvent.NET_REQ_GAME_LEVEL_ROOM_TAB, GConstants.GameID.FXJ);\n        //请求分享配置\n        EventManager.dispatch(AppEvent.NET_REQ_SHARE_CONFIG);\n        //请求背包配置\n        EventManager.dispatch(AppEvent.NET_CMD_REQ_USER_BACKPACK);\n\n        //请求等级配置\n        EventManager.dispatch(AppEvent.NET_REQ_LEVEL_MODEL_CONFIG);\n        //请求道具信息\n        EventManager.dispatch(AppEvent.NET_REQ_PROPS_INFO);\n        //请求玩家玩某个游戏的信息\n        EventManager.dispatch(AppEvent.NET_REQ_GAME_PLAY_INFO, GConstants.GameID.FXJ);\n\n\n    }\n    //登录成功后 请求的队列\n    private _reqSuccessQueneToHall() {\n\n        // //请求子游戏场次中人数\n        // EventManager.dispatch(AppEvent.NET_REQ_GAME_LEVEL_PERSON_COUNT, GConstants.GameID.FXJ);\n\n        //请求签到数据\n        EventManager.dispatch(AppEvent.NET_REQ_SIGNIN_CONFIG)\n        //请求限时折扣\n        EventManager.dispatch(AppEvent.NET_REQ_HOLIDAYS_GIFTPACKAGE);\n        //请求限时折扣礼包数据\n        EventManager.dispatch(AppEvent.NET_REQ_GOODS_INFO, { scene: GConstants.GoodsListID.limitPack });\n\n        //请求首充礼包商品数据\n        EventManager.dispatch(AppEvent.NET_REQ_GOODS_INFO, { scene: GConstants.GoodsListID.GiftPack });\n\n        //请求商城银币\n        EventManager.dispatch(AppEvent.NET_REQ_GOODS_INFO, { scene: GConstants.GoodsListID.MarketSilver });\n        //请求商城道具\n        EventManager.dispatch(AppEvent.NET_REQ_GOODS_INFO, { scene: GConstants.GoodsListID.MarketProp });\n        //请求邮箱数据\n        EventManager.dispatch(AppEvent.NET_CMD_REQ_WATCH);\n\n        //请求活动中心数据\n        EventManager.dispatch(AppEvent.NET_CMD_REQ_TASK_ACT_CONFIG);\n        //请求首充礼包配置\n        EventManager.dispatch(AppEvent.NET_REQ_FIRST_PAY_CONFIG)\n    }\n\n    //显示登录页\n    showLoginView(event = null, param: any = null) {\n        GameConfig.instance.FPS = 30;\n        let isFirstLogin = false;\n\n        if (param) {\n            if (param.state == \"first_login\") {//首次登录\n                isFirstLogin = true;\n                GCache.User.setLoginState(GConstants.UserLoginState.None);\n            } else if (param.state == \"reconnect_fail\") {\n                GCache.User.setLoginState(GConstants.UserLoginState.Offline);\n            }\n        }\n        if (GCache.User.getLoginState() == GConstants.UserLoginState.LoginSuccess) {\n            LayerManager.clear(UIConfigData[UIID.LoginPrefab].layer);\n            return;\n        }\n        let self = this;\n        if (!LayerManager.has(UIID.LoginPrefab) && !LayerManager.isLoading(UIID.LoginPrefab)) {\n            if (GCache.User.getLoginState() == GConstants.UserLoginState.LoginSuccess) {\n                LayerManager.clear(UIConfigData[UIID.LoginPrefab].layer);\n                return;\n            }\n            LayerManager.clearOther(null, true);\n            EventManager.dispatch(AppEvent.SYS_PACKAGE_LOAD, GConstants.PkgLoaderTaskList.Login, () => {\n                if (GCache.User.isLoginSuccesed() == true) {\n                    return;\n                }\n                self._checkServerChange(isFirstLogin);\n                //通知:sys周期变化\n                EventManager.dispatch(AppEvent.SYS_APP_LIFE, GConstants.AppRunLife.Login_Will_Open);\n                //打开登录界面\n                EventManager.dispatch(AppEvent.VIEW_UI_OPEN, UIID.LoginPrefab, null, {\n                    onAdded: function () {\n                        //通知:主场景更换\n                        EventManager.dispatch(AppEvent.VIEW_UI_MAIN_UPDATE, UIID.LoginPrefab);\n                        //通知:sys周期变化\n                        EventManager.dispatch(AppEvent.SYS_APP_LIFE, GConstants.AppRunLife.Login_Opened);\n                        if (GCache.User.getLoginState() == GConstants.UserLoginState.LoginSuccess) {\n                            LayerManager.clear(UIConfigData[UIID.LoginPrefab].layer);\n                            return;\n                        }\n                        LayerManager.clearOther(UIConfigData[UIID.LoginPrefab].layer, true);\n                        //加载完毕给登录界面传参\n                        EventManager.dispatch(AppEvent.LOGIN_SEND_SHOW, param)\n                    },\n                    onRemoved: function () {\n                        //通知:sys周期变化\n                        EventManager.dispatch(AppEvent.SYS_APP_LIFE, GConstants.AppRunLife.Login_Closed);\n                    }\n                })\n            })\n\n        } else {\n            LayerManager.clearOther(UIConfigData[UIID.LoginPrefab].layer, true);\n            self._checkServerChange(isFirstLogin);\n            //加载完毕给登录界面传参\n            EventManager.dispatch(AppEvent.LOGIN_SEND_SHOW, param);\n        }\n        //系统信息刷新\n        EventManager.dispatch(AppEvent.SYS_INFO_REFRESH);\n    }\n    /** 检测服务端变化（即将跳转登录界面时） */\n    private _checkServerChange(isFirstLogin = false) {\n        //代码 和 本地 冲突， 以本地为准\n        //没有 本地 ，代码为准\n        let lastClientVer = LocalStorage.get(StoreKey.SYS_ClientVer, ClientInfo.AppVer);\n        let oldServerConf = GCache.User.getLastlocalLoginServerConf();\n        let newServerConf = GameConfig.instance.AppUrlConf;\n\n        if (!oldServerConf) {//说明没有登录成功过\n            LocalStorage.set(StoreKey.SYS_ClientVer, ClientInfo.AppVer);\n            return;\n        }\n        let isSameVer = (String(lastClientVer) == String(ClientInfo.AppVer));\n        let isChangeServer = false;\n        for (let key in newServerConf) {\n            if (Object.prototype.hasOwnProperty.call(newServerConf, key)) {\n                if (oldServerConf[key] != newServerConf[key]) {\n                    isChangeServer = true;\n                };\n            }\n        }\n        //版本号不一致且地址不一致 以代码为主\n        if (isSameVer == false && isChangeServer == true) {\n            console.warn(\"---【版本号不一致且服务器地址不一致，重置本地所有数据存储】---\");\n            console.log(`当前版本:${ClientInfo.AppVer} 上个版本:${lastClientVer}`)\n            LocalStorage.clear();\n            LocalStorage.set(StoreKey.SYS_ClientVer, ClientInfo.AppVer);\n            return;\n        }\n        //服务器地址不一致 以代码为主\n        if (isChangeServer == true) {\n            if (isFirstLogin == true) {//首次登录 切换为已有的登录历史\n                let currowServer = ClientInfo.CurrowServer;\n                let isFind = false;\n                for (let key in GameConfig.ServerUrlConf) {\n                    if (Object.prototype.hasOwnProperty.call(GameConfig.ServerUrlConf, key) && isFind == false) {\n                        if (oldServerConf[\"Socket\"] == GameConfig.ServerUrlConf[key].Socket) {\n                            isFind = true;\n                            currowServer = Number(key);\n                        }\n                    }\n                }\n                ClientInfo.CurrowServer = currowServer;\n                LocalStorage.set(StoreKey.SYS_ClientVer, ClientInfo.AppVer);\n                return;\n            }\n            console.warn(\"---【服务器地址有切换 ，重置本地所有数据存储】---\");\n            LocalStorage.clear();\n            LocalStorage.set(StoreKey.SYS_ClientVer, ClientInfo.AppVer);\n            return;\n        }\n    }\n    //登录成功 跳转大厅\n    private _toForwardHallView(param: any, isNotNeedTip: boolean = false) {\n        if (isNotNeedTip == false) {\n            //显示吐司\n            EventManager.dispatch(AppEvent.SYS_TOAST_TIP, { content: GameTxt.login_success })\n        }\n        EventManager.dispatch(AppEvent.HALL_GOTO_SHOW, param)\n    }\n    //重置登录\n    private _resetFirstLogin() {\n        this._reqLoginNum = 0;\n        GSocket.instance.closeConnect();\n        if (Platform.isWXPlatform() && Platform.WxLoginCode) {\n            Platform.updateWXLoginCode();\n        }\n    }\n\n    //获取登录的基础信息\n    private _getLoginDefaultParam(phone: string = \"\") {\n        let param_data = {\n            api_ver: 2,         //接口版本号\n            channel_id: ClientInfo.ChannelId,\n            channelKey: ClientInfo.ChannelKey,\n            mac: ClientInfo.MachineId,\n            machine_type: ClientInfo.MachineModel,\n            os: ClientInfo.SysVer,\n            resolution: `${SystemConf.DEV_SIZE.width}*${SystemConf.DEV_SIZE.height}`,\n            imsi: ClientInfo.IMSI,\n            operator: ClientInfo.PhoneCardType,\n            net: ClientInfo.NetWorkType,\n            guid: ClientInfo.Guid,\n            ssaid: ClientInfo.SSAID,\n            appid: ClientInfo.PlatFormAppID,\n\n            nick: ClientInfo.PhoneModel,\n            version: ClientInfo.AppVer,\n            hall_version: ClientInfo.HallVer,\n\n            login_type: 1,  //登录类型\n            utype: 1,       //用户类型\n            sex: 0,         //性别\n            phone: phone || \"\",\n            access_token: \"\",\n            pwd: \"\",\n            verify_code: -1,\n            verify_msg: \"\",\n            verify_word: \"\",\n            param: \"\",\n            mid: \"\"\n        }\n        return param_data;\n    }\n    //获取默认的param参数\n    getDefaultExtramParam() {\n        let param_data = {\n            iccid: ClientInfo.ICCID,\n            imei: ClientInfo.IMEI,\n            imsi: ClientInfo.IMSI,\n            timestamp: Utils.time(),\n            safecode: ClientInfo.SignDeviceId,\n            safecode_mac: ClientInfo.SignMacAddress,\n            safecode_guid: ClientInfo.SignGuid,\n            factoryid: ClientInfo.FactoryId,\n            update_site_realtime: 1,    //客户端是否支持登录接口更新请求入口配置（切服务器）\n            bundleId: ClientInfo.BundleId,\n            // if System.getPlatform() == kPlatformAndroid then\n            // \t--android 平台禁止模拟器登录\n            // \tlocal isVirtual, flag : kClientInfo:isVirtual(),\n            // \tisSimulator : isVirtual,\n            // \tsimulatorCheckFlag : flag,\n\n            // end\n        }\n        return param_data\n    }\n\n}\n\n"]}