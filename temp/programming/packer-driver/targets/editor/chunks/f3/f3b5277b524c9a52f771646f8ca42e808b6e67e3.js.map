{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/framework/layer/LayerNotify.ts"],"names":["LayerNotify","Layers","inf_ViewParams","ToastComponent","LayerUI","queue","currentPrefabPath","onRemoved","node","viewParams","setTimeout","valid","prefabPath","next","show","config","param","callbacks","isAutoRecover","bundle","prefab","uuid","getSoleID","params","noticeToRoot","onAdded","onBeforeRemove","isClickSpanceClose","push","updateMaskState","_maskNode","isValid","active","load","createNode","needAddNode","childNode","layer","Enum","UI_2D","_activeInHierarchy","toastCom","getComponent","toast","currentParams","shift","remove","isDestroy","toDestoryNotNotify","clear"],"mappings":"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","sourcesContent":["/*\n * 消息提示层，类似以前Toast\n * 请直接调用 show方法来显示提示\n */\n/**\n * Name = LayerNotify\n * URL = db://assets/framework/layer/LayerNotify.ts\n * Time = Thu Apr 14 2022 12:03:00 GMT+0800 (中国标准时间)\n * Author = xueya\n * 消息提示层，类似Toast\n * 请直接调用 show方法来显示提示\n * \n * 该层的节点对于同一个路径的预制体将一次只显示一个，删除以后会自动从队列当中取下一个相同路径的预制体，直到队列为空\n */\nimport { Layers, Node } from \"cc\";\nimport { inf_UICallbacks, inf_UIConfig, inf_ViewParams } from \"../InterfaceDefines\";\nimport { ToastComponent } from \"../vc/ToastComponent\";\nimport { LayerUI } from \"./LayerUI\";\n\n\nexport class LayerNotify extends LayerUI {\n    private queue = {};\n    private currentPrefabPath = {}; //当前显示出的预制体\n    /**\n     * 显示toast\n     * @param config.prefab 预制件路径 config.bundle 分包包名 默认resources\n     * @param param 传递的参数\n     * @param callbacks 回调函数 UICallbacks定义\n     * @param isAutoRecover 是否自动释放加载的资源 默认false不释放\n     */\n    show(config: inf_UIConfig, param: any, callbacks?: inf_UICallbacks, isAutoRecover?: boolean): void {\n        let bundle = config.bundle || \"resources\"\n        let prefabPath = config.prefab\n        let uuid = this.getSoleID(prefabPath);\n\n        var viewParams = new inf_ViewParams();\n        viewParams.uuid = uuid;\n        viewParams.bundle = bundle\n        viewParams.prefabPath = prefabPath;\n        viewParams.params = param || null;\n        viewParams.callbacks = callbacks || {};\n        viewParams.noticeToRoot = {\n            onAdded: this.onAdded,\n            onBeforeRemove: this.onBeforeRemove,\n            onRemoved: this.onRemoved\n        }\n        viewParams.valid = true;\n        viewParams.isAutoRecover = isAutoRecover || false;\n        viewParams.isClickSpanceClose = false;\n\n        if (!this.queue[prefabPath]) {\n            this.queue[prefabPath] = []\n        }\n        this.queue[prefabPath].push(viewParams);\n\n        if (!this.currentPrefabPath[prefabPath]) {\n            this.next(prefabPath)\n        }\n\n    }\n\n    protected updateMaskState() {\n        if (this._maskNode && this._maskNode.isValid == true) {\n            this._maskNode.active = false;\n        }\n    }\n    /**UI层的回调 UICallbacks类型 */\n    protected onRemoved = (node: Node | null, viewParams: inf_ViewParams) => {\n        setTimeout(() => {\n            viewParams.valid = false;\n            this.currentPrefabPath[viewParams.prefabPath] = null;\n            this.next(viewParams.prefabPath)\n        }, 0);\n    }\n\n    protected load(viewParams: inf_ViewParams) {\n        super.load(viewParams)\n    }\n\n    protected createNode(needAddNode: Node | null, viewParams: inf_ViewParams) {\n        //this不存在了\n        if (this.isValid == false) {\n            return;\n        }\n        let childNode: Node = super.createNode(needAddNode, viewParams);\n        if (!childNode) {\n            return null\n        }\n\n        //激活场景\n        this.layer = Layers.Enum.UI_2D\n        this._activeInHierarchy = true;\n\n        childNode.active = true;\n        let toastCom = childNode.getComponent(ToastComponent)!;\n        childNode.active = true;\n\n        if (toastCom?.toast) {\n            toastCom.toast(viewParams.params)\n        }\n        return childNode;\n    }\n    //下一个相同类型的预制体\n    private next(prefabPath: string) {\n        //this不存在了\n        if (this.isValid == false) {\n            return;\n        }\n        if (prefabPath && this.queue[prefabPath]) {\n            let currentParams = this.queue[prefabPath].shift()!;\n            if (currentParams) {\n                this.currentPrefabPath[currentParams.prefabPath] = true\n                this.load(currentParams);\n            }\n        }\n    }\n    remove(prefabPath: string, isDestroy: boolean): void {\n        if (prefabPath && this.queue[prefabPath]) {\n            this.queue[prefabPath] = null\n        }\n        super.remove(prefabPath, isDestroy)\n    }\n    /**\n     * 执行销毁,不发送通知\n     */\n    toDestoryNotNotify() {\n        this.queue = {};\n        this.currentPrefabPath = {};\n        super.toDestoryNotNotify();\n    }\n\n    clear(isDestroy: boolean) {\n        this.queue = {}\n        super.clear(isDestroy)\n    }\n}"]}