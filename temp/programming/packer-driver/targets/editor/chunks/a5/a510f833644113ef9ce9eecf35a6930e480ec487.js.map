{"version":3,"sources":["file:///Users/mac/work/WXGame_FlySmallChick/assets/proj/servers/ReportServers.ts"],"names":["ReportServers","GCache","AppEvent","ClientInfo","Utils","Encrypt","Logger","EventManager","Network","NetworkState","BaseControll","Platform","GlobalCMD","_maxSize","_tempClientClickList","_lastReportTime","_reportTimeSpance","_reportRows","_maxRows","getInstance","_instance","updateLoggerReportInfo","init","clear","onInitModuleEvent","addModelListener","LOGIN_STATE_CHANGE","REPORT_CLIENT_CLICK","reqReportClick","REPORT_RESP_CLIENT_CLICK","respReportClick","uid","platform","ClientPlatform","sdkVersion","SDKVersion","User","getUserMid","info","HallVer","ReportConf","BaseInfo","event","param","table_isEmpty","eventID","string_isEmpty","actionID","Number","item","__genPackageBody","body","push","__checkCanReport","__startReport","isSuccess","respData","reqData","timeEx","splice","console","log","max","length","tempList","slice","print","appid","getUserAppID","list","JsonEncode","sendMsg","cmd","PHP_CLICK_REPORT","dispatch","NET_SEND_MSG","isFouce","instance","state","ONLINE","act_id","lts_at","time"],"mappings":"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","sourcesContent":["/**\n * Name = ReportServers\n * URL = db://assets/proj/servers/servers/ReportServers.ts\n * Time = Wed Aug 24 2022 11:45:42 GMT+0800 (中国标准时间)\n * Author = xueya\n * Client 数据上报控制器\n */\n\nimport { GCache } from \"../../cache/GCache\";\nimport { AppEvent } from \"../../config/AppEvent\";\nimport { ClientInfo } from \"../../config/GameConfig\";\nimport { inf_ClickReport } from \"../../framework/InterfaceDefines\";\nimport { Utils } from \"../../framework/Utils\";\nimport { Encrypt } from \"../../framework/crypto/Encrypto\";\nimport { Logger } from \"../../framework/log/Logger\";\nimport { EventManager } from \"../../framework/manager/EventManager\";\nimport { Network, NetworkState } from \"../../framework/network/NetState\";\nimport { BaseControll } from \"../../framework/vc/BaseController\";\nimport { Platform } from \"../../platform/Platform\";\nimport { GlobalCMD } from \"../gnet/GlobalCMD\";\n\nexport class ReportServers extends BaseControll {\n    private static _instance = null;\n    public static getInstance(): ReportServers {\n        if (!this._instance || this._instance == null) {\n            this._instance = new ReportServers(\"ReportServers\");\n        }\n        this._instance.updateLoggerReportInfo();\n        return this._instance;\n    }\n    public static init(): ReportServers {\n        if (this._instance) {\n            this._instance.clear()\n        }\n        this._instance = null\n        ReportServers.getInstance()\n        return\n    }\n\n    /** 一次最多条 */\n    private _maxSize = 5;\n    /** 客户端点击上报队列 */\n    private _tempClientClickList = [];\n    /** 上次提交得时间 毫秒*/\n    private _lastReportTime = 0;\n    /** 上报的时间间隔 毫秒*/\n    private _reportTimeSpance: 30000;\n    /** 实际上报条数 */\n    private _reportRows = 0;\n    /** 可存最大条数 */\n    private _maxRows = 100;\n\n    /**初始化添加事件绑定 */\n    protected onInitModuleEvent(): void {\n        //登录状态改变(更新客户端数据上报的信息)\n        this.addModelListener(AppEvent.LOGIN_STATE_CHANGE, this.updateLoggerReportInfo)\n        //客户端点击事件请求\n        this.addModelListener(AppEvent.REPORT_CLIENT_CLICK, this.reqReportClick);\n        //点击事件响应\n        this.addModelListener(AppEvent.REPORT_RESP_CLIENT_CLICK, this.respReportClick);\n    }\n\n\n    /**\n     * 更新数据上报的基础信息\n     */\n    updateLoggerReportInfo() {\n        let uid = null;\n        let platform = Platform.ClientPlatform;\n        let sdkVersion = Platform.SDKVersion;\n        if (GCache && GCache.User) {\n        \tuid = GCache.User.getUserMid();\n        }\n        let info = `[HallVer:${ClientInfo.HallVer},Uid:${uid}]`;\n        Logger.ReportConf.BaseInfo = info;\n    }\n   \n    \n    /**\n     * 请求事件上报接口\n     * @param event \n     * @param param \n     * @returns \n     */\n    reqReportClick(event, param: inf_ClickReport) { \n        if (Utils.table_isEmpty(param) == true) {\n        \treturn;\n        }\n        if (param.eventID == null || Utils.string_isEmpty(param.eventID)) {\n        \treturn;\n        }\n        let actionID = Number(param.eventID);\n        let item = this.__genPackageBody(actionID, param.body);\n        this._tempClientClickList.push(item);\n        if (this.__checkCanReport(param[\"isFouce\"]) == false) {\n        \treturn;\n        }\n        //开始上报\n        this.__startReport();\n    }\n\n    /**\n     * 上报请求响应\n     * @param event \n     * @param isSuccess \n     * @param respData \n     * @param reqData \n     */\n    respReportClick(event, isSuccess, respData, reqData) {\n        if (isSuccess) {\n            this._lastReportTime = Utils.timeEx();\n            this._tempClientClickList.splice(0, this._reportRows);\n            console.log(\"上报成功:\", reqData, respData);\n        } else {\n            console.log(\"上报失败:\", reqData, respData);\n        }  \n    }\n\n    /** 执行上报 */\n    private __startReport() {\n    \tlet max = (this._tempClientClickList.length >= this._maxSize ? this._maxSize : this._tempClientClickList.length);\n    \tlet tempList = this._tempClientClickList.slice(0, max);\n    \tif (tempList.length <= 0) {\n    \t\treturn;\n        }\n        //如果条数太多了,久未上报成功,那就清空\n        if (tempList.length > this._maxRows) {\n            console.log(\"上报数据:清空\");\n            this._tempClientClickList.splice(0, tempList.length);\n            return;\n        }\n        this.print(\"开始上报客户端点击事件==>\", tempList);\n        this._reportRows = tempList.length;\n        let appid = GCache.User.getUserAppID();\n        let body = {\n            list: Encrypt.JsonEncode(tempList),      \n            appid: appid,\n        };\n        let sendMsg = {\n            cmd: GlobalCMD.PHP_CLICK_REPORT,\n            body: body,\n        }\n        this.print(\"reqReportClick\", sendMsg);\n        EventManager.dispatch(AppEvent.NET_SEND_MSG, sendMsg);\n    }\n \n    /**\n     * 检查是否可以上报\n     * @param isFouce 是否强制\n     * @returns \n     */\n    private __checkCanReport(isFouce: boolean = false) {\n        //空数据、网络异常时不上报\n        if (this._tempClientClickList.length == 0 || Network.instance.state != NetworkState.ONLINE) {\n            return false;\n        }\n        // 非强制上报时数据不足不上报\n        if (isFouce == false && this._tempClientClickList.length < this._maxSize) {\n            return false;\n        }\n        //如果上次上报事件不为空 且 当前时间比上次上报\n        if (this._lastReportTime != 0 && (Utils.timeEx() - this._lastReportTime) < this._reportTimeSpance) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 组装数据\n     * @param eventID \n     * @param param \n     * @returns \n     */\n    private __genPackageBody(eventID, param = null) {\n        console.log(\"包装数据:\",eventID, param)\n    \tlet body = {\n    \t\tact_id: eventID,\n    \t\tlts_at: Utils.time(),\n    \t};\n        if (Utils.table_isEmpty(param) == false) {\n    \t\t// --渗透参数\n    \t\tbody[\"gsubname\"] = Encrypt.JsonEncode(param);\n        }\n    \treturn body;\n    }\n}\n\n"]}